use std::str::FromStr;
use crate::ast::*;

grammar;

// *** *** *** EXPESSIONS *** *** *** //

GIdent: String = {
    <s:r"[A-Za-z_'][A-Za-z0-9_']*"> => String::from(s),
}

GOperandOr: BinaryOp = {
    "||" => BinaryOp::Or,
}

GOperandAnd: BinaryOp = {
    "&&" => BinaryOp::And,
}

GOperandRel: BinaryOp = {
    "<" => BinaryOp::Lt,
    "<=" => BinaryOp::Lte,
    ">" => BinaryOp::Gt,
    ">=" => BinaryOp::Gte,
    "==" => BinaryOp::Eq,
    "!=" => BinaryOp::Neq,
}

GOperandAdd: BinaryOp = {
    "+" => BinaryOp::Add,
    "-" => BinaryOp::Sub,
}

GOperandMul: BinaryOp = {
    "*" => BinaryOp::Mul,
    "/" => BinaryOp::Div,
    "%" => BinaryOp::Mod,
}

GInteger: i32 = {
    <v:r"[0-9]+"> =>? {
        match i32::from_str(v) {
            Err(_) => Err(lalrpop_util::ParseError::User{error: "oh no, invalid integer! ;C" }),
            Ok(v) => Ok(v),
        }
    }
}

GBoolean: bool = {
    "true" =>  true,
    "false" => false,
}

// TODO: bug here: printString("\\a\\n\n\tb\"");
// It won't be handled correctly because of naive removal of escape sequences.
GString: String = {
    <l:@L> <s:r#""([^"\\]|\\"|\\n|\\t|\\)*""#> <r:@R> => {
        s[1..s.len()-1]
        .replace(r#"\\"#, r#"\"#)
        .replace(r#"\n"#, "\n")
        .replace(r#"\t"#, "\t")
        .replace(r#"\""#, r#"""#)
    }
}

// Left Associative Expression Macro
LAExpMacro<Op, NextTier>: Box<ExpNode> = {
    <l:@L> <lexp:LAExpMacro<Op,NextTier>> <o:Op> <rexp:NextTier> <r:@R> => ExpNode::new_bin(l, r, o, lexp, rexp),
    NextTier,
};

// Right Associative Expression Macro
RAExpMacro<Op, NextTier>: Box<ExpNode> = {
    <l:@L> <lexp:NextTier> <o:Op> <rexp:RAExpMacro<Op,NextTier>> <r:@R> => ExpNode::new_bin(l, r, o, lexp, rexp),
    NextTier,
};

GListMaybeEmpty<T, Sep>: Vec<T> = {
    <v:(<T> Sep)*> <e:T?> => match e {
        None => v,
        Some(e) => {
            let mut v = v;
            v.push(e);
            v
        }
    }
};

GListNotEmptyOpen<T, Sep>: Vec<T> = {
    <v:(<T> Sep)*> <e:T> => {
        let mut v = v;
        v.push(e);
        v
    }
};

GListNotEmptyClosed<T, Sep>: Vec<T> = {
    <v:(<T> Sep)*> <e:(<T> Sep)> => {
        let mut v = v;
        v.push(e);
        v
    }
};

GExp = GExpOr;
GExpOr  = RAExpMacro<GOperandOr,  GExpAnd>;
GExpAnd = RAExpMacro<GOperandAnd, GExpRel>;
GExpRel = LAExpMacro<GOperandRel, GExpAdd>;
GExpAdd = LAExpMacro<GOperandAdd, GExpMul>;
GExpMul = LAExpMacro<GOperandMul, GExpUnary>;

GExpUnary: Box<ExpNode> = {
    <l:@L> "!" <e:GExpUnary> <r:@R> => ExpNode::new_un(l, r, UnaryOp::Not, e),
    <l:@L> "-" <e:GExpUnary> <r:@R> => ExpNode::new_un(l, r, UnaryOp::Neg, e),
    <GExpAtom>  => <>,
    <GExpLiteral> => <>,
};

GExpLiteral: Box<ExpNode> = {
    <l:@L> <e:GInteger> <r:@R> => ExpNode::new(l, r, Exp::Int(e)),
    <l:@L> <e:GBoolean> <r:@R> => ExpNode::new(l, r, Exp::Bool(e)),
    <l:@L> <e:GString>  <r:@R> => ExpNode::new(l, r, Exp::Str(e)),
    <l:@L> "(" <typename:GIdent> r#"\)\s*null"# <r:@R> => ExpNode::new(l, r, Exp::Null(typename)),
};

GField: Field = {
    <obj:GIdent> "." <field:GIdent> => Field::Direct(obj, field),
    <obj:GField> "." <field:GIdent> => Field::Indirect(Box::new(obj), field),
};

GMemLoc: MemLoc = {
    <ident:GIdent> => MemLoc::Var(ident),
    <GField> => MemLoc::Field(Box::new(<>)),
};

GExpAtom: Box<ExpNode> = {
    <l:@L> <mem:GMemLoc> <r:@R> => ExpNode::new(l, r, Exp::Obj(mem)),
    <l:@L> <n:GIdent> "(" <a:GListMaybeEmpty<GExp, ",">> ")" <r:@R> => ExpNode::new(l, r, Exp::Call(n, a)),
    <l:@L> "new" <typename:GIdent> <r:@R> => ExpNode::new(l, r, Exp::New(typename)),
    "(" <GExp> ")" => <>,
};

// *** TOP LEVEL ***

GTopDef: TopDef = {
    <GFnDef> => TopDef::Fn(<>),
    <GClassDef> => TopDef::Class(<>),
};

GFnDef: FnDef = {
    <l:@L> <t:GTypeOrVoid> <n:GIdent> "(" <p:GListMaybeEmpty<GDeclSingle, ",">> ")" <b:GBlock> <r:@R> => {
        FnDef {span: Span(l, r), type_spec: t, ident: n, params: p, body: b}
    }
};

GClassDef: ClassDef = {
    <l:@L> "class" <i:GIdent> "{" <f:GListNotEmptyClosed<GDeclSingle, ";">> "}" <r:@R> => {
        ClassDef { span: Span(l, r), ident: i, fields: f }
    }
}

pub GProgram: Program = {
    <l:@L> <topdefs: GTopDef+> <r:@R> => {
        let mut fs = Vec::new();
        let mut cs = Vec::new();
        for td in topdefs {
            match td {
                TopDef::Fn(f) => fs.push(f),
                TopDef::Class(c) => cs.push(c),
            }
        }
        Program{span: Span(l, r), functions: fs, classes: cs}
    }
};

GType: TypeSpecifier = {
    <l:@L> "int" <r:@R>     => TypeSpecifier::new(l, r, Type::Int),
    <l:@L> "boolean" <r:@R> => TypeSpecifier::new(l, r, Type::Bool),
    <l:@L> "string" <r:@R>  => TypeSpecifier::new(l, r, Type::Str),
    <l:@L> <i:GIdent> <r:@R> => TypeSpecifier::new(l, r, Type::Struct(i)),
}

GVoid: TypeSpecifier = {
    <l:@L> "void" <r:@R>    => TypeSpecifier::new(l, r, Type::Void),
}

GTypeOrVoid: TypeSpecifier = {
    GType => <>,
    GVoid => <>
}

GDeclBodyNoInit: DeclBody = {
    <l:@L> <n:GIdent> <r:@R> => DeclBody {span: Span(l, r), ident: n, init: None},
}

GDeclBody: DeclBody = {
    <l:@L> <n:GIdent> <e:("=" <GExp>)?> <r:@R> => DeclBody {span: Span(l, r), ident: n, init: e},
}

GDeclSingle: VarDecl = {
    <l:@L> <t:GType> <b:GDeclBodyNoInit> <r:@R> => VarDecl {span: Span(l, r), type_spec: t, vars: vec![b]},
};

GDecls: VarDecl = {
    <l:@L> <t:GType> <bs:GListNotEmptyOpen<GDeclBody, ",">> <r:@R> => VarDecl {span: Span(l, r), type_spec: t, vars: bs},
};

GBlock: Box<StmtNode> = {
     <l:@L> "{" <s:GStmt*> "}" <r:@R> => StmtNode::new(l, r, Stmt::BStmt(s)),
}

// https://en.wikipedia.org/wiki/Dangling_else

GStmt: Box<StmtNode> = {
    <GOpenStmt>   => <>,
    <GClosedStmt> => <>,
}

GOpenStmt: Box<StmtNode> = {
    <l:@L> "if" "(" <c:GExp> ")" <t:GSimpleStmt> <r:@R>                          => StmtNode::new(l, r, Stmt::Cond(c,  StmtNode::block(t), None)),
    <l:@L> "if" "(" <c:GExp> ")" <t:GOpenStmt> <r:@R>                            => StmtNode::new(l, r, Stmt::Cond(c,  StmtNode::block(t), None)),
    <l:@L> "if" "(" <c:GExp> ")" <t:GClosedStmt> "else" <f:GOpenStmt> <r:@R>     => StmtNode::new(l, r, Stmt::Cond(c,  StmtNode::block(t), Some(StmtNode::block(f)))),
    <l:@L> "while" "(" <c:GExp> ")" <t:GOpenStmt> <r:@R>                         => StmtNode::new(l, r, Stmt::While(c, StmtNode::block(t))),
}

GClosedStmt: Box<StmtNode> = {
    <l:@L> "if" "(" <c:GExp> ")" <t:GClosedStmt> "else" <f:GClosedStmt> <r:@R> => StmtNode::new(l, r, Stmt::Cond(c,  StmtNode::block(t), Some(StmtNode::block(f)))),
    <l:@L> "while" "(" <c:GExp> ")" <t:GClosedStmt> <r:@R>                     => StmtNode::new(l, r, Stmt::While(c, StmtNode::block(t))),
    <GSimpleStmt> => <>,
}

GSimpleStmt: Box<StmtNode> = {
    <GBlock>                                     => <>,
    <l:@L> ";" <r:@R>                            => StmtNode::new(l, r, Stmt::BStmt(vec![])),
    <l:@L> <e:GExp> ";" <r:@R>                   => StmtNode::new(l, r, Stmt::EStmt(e)),
    <l:@L> <d:GDecls> ";" <r:@R>                 => StmtNode::new(l, r, Stmt::Decl(d)),
    <l:@L> <mem:GMemLoc> "=" <e:GExp> ";" <r:@R> => StmtNode::new(l, r, Stmt::Ass(mem, e)),
    <l:@L> <mem:GMemLoc> "++" ";" <r:@R>         => StmtNode::new(l, r, Stmt::Incr(mem)),
    <l:@L> <mem:GMemLoc> "--" ";" <r:@R>         => StmtNode::new(l, r, Stmt::Decr(mem)),
    <l:@L> "return" <e:GExp> ";" <r:@R>          => StmtNode::new(l, r, Stmt::Ret(e)),
    <l:@L> "return" ";" <r:@R>                   => StmtNode::new(l, r, Stmt::VRet),
}
