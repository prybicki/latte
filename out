   Compiling latte v0.1.0 (/home/prybicki/code/latte)
error: failed to run custom build command for `latte v0.1.0 (/home/prybicki/code/latte)`

Caused by:
  process didn't exit successfully: `/home/prybicki/code/latte/target/debug/build/latte-acf4d1fd98cbae50/build-script-build` (exit code: 1)
--- stdout
processing file `/home/prybicki/code/latte/src/latte.lalrpop`
/home/prybicki/code/latte/src/latte.lalrpop:108:20: 108:44: Conflict detected

    when in this state:
  (<GExpr> ",")+ = (*) (<GExpr> ",")+ GExpr "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  (<GExpr> ",")+ = (<GExpr> ",")+ (*) GExpr "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  (<GExpr> ",")+ = (*) GExpr "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) (<GExpr> ",")+ ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (<GExpr> ",")+ (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) (<GExpr> ",")+ GExpr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (<GExpr> ",")+ (*) GExpr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) GExpr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GBoolean = (*) "false" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GBoolean = (*) "true" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExpr = (*) GExprOr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAdd = (*) LAExprMacro<GOperandAdd, GExprMul> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAnd = (*) RAExprMacro<GOperandAnd, GExprRel> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) CommaSeparatedList<GExpr> ")" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GBoolean ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GIdent ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GIdent "(" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GInteger ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GString ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) "(" GExprOr ")" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprMul = (*) LAExprMacro<GOperandMul, GExprUnary> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprOr = (*) RAExprMacro<GOperandOr, GExprAnd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprRel = (*) LAExprMacro<GOperandRel, GExprAdd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) "!" GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) "-" GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GIdent = (*) r#"[A-Z,a-z,_\']+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GInteger = (*) r#"[+-]"# r#"[0-9]+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GInteger = (*) r#"[0-9]+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GString = (*) r#"\"([^,\",\\\\]|\\\\\")*\""# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandAdd, GExprMul> = (*) GExprMul ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandAdd, GExprMul> = (*) LAExprMacro<GOperandAdd, GExprMul> GOperandAdd GExprMul ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandMul, GExprUnary> = (*) GExprUnary ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandMul, GExprUnary> = (*) LAExprMacro<GOperandMul, GExprUnary> GOperandMul GExprUnary ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandRel, GExprAdd> = (*) GExprAdd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandRel, GExprAdd> = (*) LAExprMacro<GOperandRel, GExprAdd> GOperandRel GExprAdd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandAnd, GExprRel> = (*) GExprRel ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandAnd, GExprRel> = (*) GExprRel GOperandAnd RAExprMacro<GOperandAnd, GExprRel> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandOr, GExprAnd> = (*) GExprAnd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandOr, GExprAnd> = (*) GExprAnd GOperandOr RAExprMacro<GOperandOr, GExprAnd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `"!"` we can reduce to a `CommaSeparatedList<GExpr>` but we can also shift

/home/prybicki/code/latte/src/latte.lalrpop:108:20: 108:44: Conflict detected

    when in this state:
  (<GExpr> ",")+ = (*) (<GExpr> ",")+ GExpr "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  (<GExpr> ",")+ = (<GExpr> ",")+ (*) GExpr "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  (<GExpr> ",")+ = (*) GExpr "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) (<GExpr> ",")+ ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (<GExpr> ",")+ (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) (<GExpr> ",")+ GExpr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (<GExpr> ",")+ (*) GExpr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) GExpr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GBoolean = (*) "false" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GBoolean = (*) "true" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExpr = (*) GExprOr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAdd = (*) LAExprMacro<GOperandAdd, GExprMul> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAnd = (*) RAExprMacro<GOperandAnd, GExprRel> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) CommaSeparatedList<GExpr> ")" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GBoolean ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GIdent ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GIdent "(" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GInteger ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GString ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) "(" GExprOr ")" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprMul = (*) LAExprMacro<GOperandMul, GExprUnary> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprOr = (*) RAExprMacro<GOperandOr, GExprAnd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprRel = (*) LAExprMacro<GOperandRel, GExprAdd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) "!" GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) "-" GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GIdent = (*) r#"[A-Z,a-z,_\']+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GInteger = (*) r#"[+-]"# r#"[0-9]+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GInteger = (*) r#"[0-9]+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GString = (*) r#"\"([^,\",\\\\]|\\\\\")*\""# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandAdd, GExprMul> = (*) GExprMul ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandAdd, GExprMul> = (*) LAExprMacro<GOperandAdd, GExprMul> GOperandAdd GExprMul ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandMul, GExprUnary> = (*) GExprUnary ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandMul, GExprUnary> = (*) LAExprMacro<GOperandMul, GExprUnary> GOperandMul GExprUnary ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandRel, GExprAdd> = (*) GExprAdd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandRel, GExprAdd> = (*) LAExprMacro<GOperandRel, GExprAdd> GOperandRel GExprAdd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandAnd, GExprRel> = (*) GExprRel ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandAnd, GExprRel> = (*) GExprRel GOperandAnd RAExprMacro<GOperandAnd, GExprRel> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandOr, GExprAnd> = (*) GExprAnd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandOr, GExprAnd> = (*) GExprAnd GOperandOr RAExprMacro<GOperandOr, GExprAnd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `"!"` we can reduce to a `CommaSeparatedList<GExpr>` but we can also shift

/home/prybicki/code/latte/src/latte.lalrpop:108:20: 108:44: Conflict detected

    when in this state:
  (<GExpr> ",")+ = (*) (<GExpr> ",")+ GExpr "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  (<GExpr> ",")+ = (<GExpr> ",")+ (*) GExpr "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  (<GExpr> ",")+ = (*) GExpr "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) (<GExpr> ",")+ ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (<GExpr> ",")+ (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) (<GExpr> ",")+ GExpr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (<GExpr> ",")+ (*) GExpr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) GExpr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GBoolean = (*) "false" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GBoolean = (*) "true" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExpr = (*) GExprOr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAdd = (*) LAExprMacro<GOperandAdd, GExprMul> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAnd = (*) RAExprMacro<GOperandAnd, GExprRel> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) CommaSeparatedList<GExpr> ")" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GBoolean ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GIdent ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GIdent "(" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GInteger ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GString ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) "(" GExprOr ")" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprMul = (*) LAExprMacro<GOperandMul, GExprUnary> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprOr = (*) RAExprMacro<GOperandOr, GExprAnd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprRel = (*) LAExprMacro<GOperandRel, GExprAdd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) "!" GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) "-" GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GIdent = (*) r#"[A-Z,a-z,_\']+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GInteger = (*) r#"[+-]"# r#"[0-9]+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GInteger = (*) r#"[0-9]+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GString = (*) r#"\"([^,\",\\\\]|\\\\\")*\""# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandAdd, GExprMul> = (*) GExprMul ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandAdd, GExprMul> = (*) LAExprMacro<GOperandAdd, GExprMul> GOperandAdd GExprMul ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandMul, GExprUnary> = (*) GExprUnary ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandMul, GExprUnary> = (*) LAExprMacro<GOperandMul, GExprUnary> GOperandMul GExprUnary ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandRel, GExprAdd> = (*) GExprAdd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandRel, GExprAdd> = (*) LAExprMacro<GOperandRel, GExprAdd> GOperandRel GExprAdd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandAnd, GExprRel> = (*) GExprRel ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandAnd, GExprRel> = (*) GExprRel GOperandAnd RAExprMacro<GOperandAnd, GExprRel> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandOr, GExprAnd> = (*) GExprAnd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandOr, GExprAnd> = (*) GExprAnd GOperandOr RAExprMacro<GOperandOr, GExprAnd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `"("` we can reduce to a `CommaSeparatedList<GExpr>` but we can also shift

/home/prybicki/code/latte/src/latte.lalrpop:108:20: 108:44: Conflict detected

    when in this state:
  (<GExpr> ",")+ = (*) (<GExpr> ",")+ GExpr "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  (<GExpr> ",")+ = (<GExpr> ",")+ (*) GExpr "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  (<GExpr> ",")+ = (*) GExpr "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) (<GExpr> ",")+ ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (<GExpr> ",")+ (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) (<GExpr> ",")+ GExpr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (<GExpr> ",")+ (*) GExpr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) GExpr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GBoolean = (*) "false" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GBoolean = (*) "true" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExpr = (*) GExprOr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAdd = (*) LAExprMacro<GOperandAdd, GExprMul> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAnd = (*) RAExprMacro<GOperandAnd, GExprRel> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) CommaSeparatedList<GExpr> ")" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GBoolean ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GIdent ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GIdent "(" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GInteger ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GString ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) "(" GExprOr ")" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprMul = (*) LAExprMacro<GOperandMul, GExprUnary> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprOr = (*) RAExprMacro<GOperandOr, GExprAnd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprRel = (*) LAExprMacro<GOperandRel, GExprAdd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) "!" GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) "-" GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GIdent = (*) r#"[A-Z,a-z,_\']+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GInteger = (*) r#"[+-]"# r#"[0-9]+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GInteger = (*) r#"[0-9]+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GString = (*) r#"\"([^,\",\\\\]|\\\\\")*\""# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandAdd, GExprMul> = (*) GExprMul ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandAdd, GExprMul> = (*) LAExprMacro<GOperandAdd, GExprMul> GOperandAdd GExprMul ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandMul, GExprUnary> = (*) GExprUnary ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandMul, GExprUnary> = (*) LAExprMacro<GOperandMul, GExprUnary> GOperandMul GExprUnary ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandRel, GExprAdd> = (*) GExprAdd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandRel, GExprAdd> = (*) LAExprMacro<GOperandRel, GExprAdd> GOperandRel GExprAdd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandAnd, GExprRel> = (*) GExprRel ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandAnd, GExprRel> = (*) GExprRel GOperandAnd RAExprMacro<GOperandAnd, GExprRel> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandOr, GExprAnd> = (*) GExprAnd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandOr, GExprAnd> = (*) GExprAnd GOperandOr RAExprMacro<GOperandOr, GExprAnd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `"("` we can reduce to a `CommaSeparatedList<GExpr>` but we can also shift

/home/prybicki/code/latte/src/latte.lalrpop:108:20: 108:44: Conflict detected

    when in this state:
  (<GExpr> ",")+ = (*) (<GExpr> ",")+ GExpr "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  (<GExpr> ",")+ = (<GExpr> ",")+ (*) GExpr "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  (<GExpr> ",")+ = (*) GExpr "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) (<GExpr> ",")+ ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (<GExpr> ",")+ (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) (<GExpr> ",")+ GExpr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (<GExpr> ",")+ (*) GExpr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) GExpr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GBoolean = (*) "false" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GBoolean = (*) "true" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExpr = (*) GExprOr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAdd = (*) LAExprMacro<GOperandAdd, GExprMul> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAnd = (*) RAExprMacro<GOperandAnd, GExprRel> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) CommaSeparatedList<GExpr> ")" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GBoolean ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GIdent ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GIdent "(" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GInteger ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GString ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) "(" GExprOr ")" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprMul = (*) LAExprMacro<GOperandMul, GExprUnary> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprOr = (*) RAExprMacro<GOperandOr, GExprAnd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprRel = (*) LAExprMacro<GOperandRel, GExprAdd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) "!" GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) "-" GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GIdent = (*) r#"[A-Z,a-z,_\']+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GInteger = (*) r#"[+-]"# r#"[0-9]+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GInteger = (*) r#"[0-9]+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GString = (*) r#"\"([^,\",\\\\]|\\\\\")*\""# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandAdd, GExprMul> = (*) GExprMul ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandAdd, GExprMul> = (*) LAExprMacro<GOperandAdd, GExprMul> GOperandAdd GExprMul ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandMul, GExprUnary> = (*) GExprUnary ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandMul, GExprUnary> = (*) LAExprMacro<GOperandMul, GExprUnary> GOperandMul GExprUnary ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandRel, GExprAdd> = (*) GExprAdd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandRel, GExprAdd> = (*) LAExprMacro<GOperandRel, GExprAdd> GOperandRel GExprAdd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandAnd, GExprRel> = (*) GExprRel ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandAnd, GExprRel> = (*) GExprRel GOperandAnd RAExprMacro<GOperandAnd, GExprRel> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandOr, GExprAnd> = (*) GExprAnd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandOr, GExprAnd> = (*) GExprAnd GOperandOr RAExprMacro<GOperandOr, GExprAnd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `"-"` we can reduce to a `CommaSeparatedList<GExpr>` but we can also shift

/home/prybicki/code/latte/src/latte.lalrpop:108:20: 108:44: Conflict detected

    when in this state:
  (<GExpr> ",")+ = (*) (<GExpr> ",")+ GExpr "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  (<GExpr> ",")+ = (<GExpr> ",")+ (*) GExpr "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  (<GExpr> ",")+ = (*) GExpr "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) (<GExpr> ",")+ ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (<GExpr> ",")+ (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) (<GExpr> ",")+ GExpr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (<GExpr> ",")+ (*) GExpr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) GExpr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GBoolean = (*) "false" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GBoolean = (*) "true" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExpr = (*) GExprOr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAdd = (*) LAExprMacro<GOperandAdd, GExprMul> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAnd = (*) RAExprMacro<GOperandAnd, GExprRel> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) CommaSeparatedList<GExpr> ")" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GBoolean ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GIdent ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GIdent "(" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GInteger ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GString ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) "(" GExprOr ")" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprMul = (*) LAExprMacro<GOperandMul, GExprUnary> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprOr = (*) RAExprMacro<GOperandOr, GExprAnd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprRel = (*) LAExprMacro<GOperandRel, GExprAdd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) "!" GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) "-" GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GIdent = (*) r#"[A-Z,a-z,_\']+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GInteger = (*) r#"[+-]"# r#"[0-9]+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GInteger = (*) r#"[0-9]+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GString = (*) r#"\"([^,\",\\\\]|\\\\\")*\""# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandAdd, GExprMul> = (*) GExprMul ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandAdd, GExprMul> = (*) LAExprMacro<GOperandAdd, GExprMul> GOperandAdd GExprMul ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandMul, GExprUnary> = (*) GExprUnary ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandMul, GExprUnary> = (*) LAExprMacro<GOperandMul, GExprUnary> GOperandMul GExprUnary ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandRel, GExprAdd> = (*) GExprAdd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandRel, GExprAdd> = (*) LAExprMacro<GOperandRel, GExprAdd> GOperandRel GExprAdd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandAnd, GExprRel> = (*) GExprRel ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandAnd, GExprRel> = (*) GExprRel GOperandAnd RAExprMacro<GOperandAnd, GExprRel> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandOr, GExprAnd> = (*) GExprAnd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandOr, GExprAnd> = (*) GExprAnd GOperandOr RAExprMacro<GOperandOr, GExprAnd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `"-"` we can reduce to a `CommaSeparatedList<GExpr>` but we can also shift

/home/prybicki/code/latte/src/latte.lalrpop:108:20: 108:44: Conflict detected

    when in this state:
  (<GExpr> ",")+ = (*) (<GExpr> ",")+ GExpr "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  (<GExpr> ",")+ = (<GExpr> ",")+ (*) GExpr "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  (<GExpr> ",")+ = (*) GExpr "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) (<GExpr> ",")+ ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (<GExpr> ",")+ (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) (<GExpr> ",")+ GExpr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (<GExpr> ",")+ (*) GExpr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) GExpr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GBoolean = (*) "false" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GBoolean = (*) "true" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExpr = (*) GExprOr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAdd = (*) LAExprMacro<GOperandAdd, GExprMul> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAnd = (*) RAExprMacro<GOperandAnd, GExprRel> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) CommaSeparatedList<GExpr> ")" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GBoolean ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GIdent ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GIdent "(" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GInteger ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GString ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) "(" GExprOr ")" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprMul = (*) LAExprMacro<GOperandMul, GExprUnary> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprOr = (*) RAExprMacro<GOperandOr, GExprAnd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprRel = (*) LAExprMacro<GOperandRel, GExprAdd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) "!" GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) "-" GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GIdent = (*) r#"[A-Z,a-z,_\']+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GInteger = (*) r#"[+-]"# r#"[0-9]+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GInteger = (*) r#"[0-9]+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GString = (*) r#"\"([^,\",\\\\]|\\\\\")*\""# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandAdd, GExprMul> = (*) GExprMul ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandAdd, GExprMul> = (*) LAExprMacro<GOperandAdd, GExprMul> GOperandAdd GExprMul ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandMul, GExprUnary> = (*) GExprUnary ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandMul, GExprUnary> = (*) LAExprMacro<GOperandMul, GExprUnary> GOperandMul GExprUnary ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandRel, GExprAdd> = (*) GExprAdd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandRel, GExprAdd> = (*) LAExprMacro<GOperandRel, GExprAdd> GOperandRel GExprAdd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandAnd, GExprRel> = (*) GExprRel ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandAnd, GExprRel> = (*) GExprRel GOperandAnd RAExprMacro<GOperandAnd, GExprRel> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandOr, GExprAnd> = (*) GExprAnd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandOr, GExprAnd> = (*) GExprAnd GOperandOr RAExprMacro<GOperandOr, GExprAnd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `"false"` we can reduce to a `CommaSeparatedList<GExpr>` but we can also shift

/home/prybicki/code/latte/src/latte.lalrpop:108:20: 108:44: Conflict detected

    when in this state:
  (<GExpr> ",")+ = (*) (<GExpr> ",")+ GExpr "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  (<GExpr> ",")+ = (<GExpr> ",")+ (*) GExpr "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  (<GExpr> ",")+ = (*) GExpr "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) (<GExpr> ",")+ ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (<GExpr> ",")+ (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) (<GExpr> ",")+ GExpr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (<GExpr> ",")+ (*) GExpr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) GExpr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GBoolean = (*) "false" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GBoolean = (*) "true" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExpr = (*) GExprOr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAdd = (*) LAExprMacro<GOperandAdd, GExprMul> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAnd = (*) RAExprMacro<GOperandAnd, GExprRel> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) CommaSeparatedList<GExpr> ")" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GBoolean ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GIdent ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GIdent "(" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GInteger ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GString ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) "(" GExprOr ")" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprMul = (*) LAExprMacro<GOperandMul, GExprUnary> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprOr = (*) RAExprMacro<GOperandOr, GExprAnd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprRel = (*) LAExprMacro<GOperandRel, GExprAdd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) "!" GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) "-" GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GIdent = (*) r#"[A-Z,a-z,_\']+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GInteger = (*) r#"[+-]"# r#"[0-9]+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GInteger = (*) r#"[0-9]+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GString = (*) r#"\"([^,\",\\\\]|\\\\\")*\""# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandAdd, GExprMul> = (*) GExprMul ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandAdd, GExprMul> = (*) LAExprMacro<GOperandAdd, GExprMul> GOperandAdd GExprMul ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandMul, GExprUnary> = (*) GExprUnary ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandMul, GExprUnary> = (*) LAExprMacro<GOperandMul, GExprUnary> GOperandMul GExprUnary ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandRel, GExprAdd> = (*) GExprAdd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandRel, GExprAdd> = (*) LAExprMacro<GOperandRel, GExprAdd> GOperandRel GExprAdd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandAnd, GExprRel> = (*) GExprRel ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandAnd, GExprRel> = (*) GExprRel GOperandAnd RAExprMacro<GOperandAnd, GExprRel> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandOr, GExprAnd> = (*) GExprAnd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandOr, GExprAnd> = (*) GExprAnd GOperandOr RAExprMacro<GOperandOr, GExprAnd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `"false"` we can reduce to a `CommaSeparatedList<GExpr>` but we can also shift

/home/prybicki/code/latte/src/latte.lalrpop:108:20: 108:44: Conflict detected

    when in this state:
  (<GExpr> ",")+ = (*) (<GExpr> ",")+ GExpr "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  (<GExpr> ",")+ = (<GExpr> ",")+ (*) GExpr "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  (<GExpr> ",")+ = (*) GExpr "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) (<GExpr> ",")+ ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (<GExpr> ",")+ (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) (<GExpr> ",")+ GExpr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (<GExpr> ",")+ (*) GExpr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) GExpr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GBoolean = (*) "false" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GBoolean = (*) "true" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExpr = (*) GExprOr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAdd = (*) LAExprMacro<GOperandAdd, GExprMul> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAnd = (*) RAExprMacro<GOperandAnd, GExprRel> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) CommaSeparatedList<GExpr> ")" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GBoolean ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GIdent ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GIdent "(" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GInteger ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GString ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) "(" GExprOr ")" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprMul = (*) LAExprMacro<GOperandMul, GExprUnary> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprOr = (*) RAExprMacro<GOperandOr, GExprAnd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprRel = (*) LAExprMacro<GOperandRel, GExprAdd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) "!" GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) "-" GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GIdent = (*) r#"[A-Z,a-z,_\']+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GInteger = (*) r#"[+-]"# r#"[0-9]+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GInteger = (*) r#"[0-9]+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GString = (*) r#"\"([^,\",\\\\]|\\\\\")*\""# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandAdd, GExprMul> = (*) GExprMul ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandAdd, GExprMul> = (*) LAExprMacro<GOperandAdd, GExprMul> GOperandAdd GExprMul ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandMul, GExprUnary> = (*) GExprUnary ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandMul, GExprUnary> = (*) LAExprMacro<GOperandMul, GExprUnary> GOperandMul GExprUnary ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandRel, GExprAdd> = (*) GExprAdd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandRel, GExprAdd> = (*) LAExprMacro<GOperandRel, GExprAdd> GOperandRel GExprAdd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandAnd, GExprRel> = (*) GExprRel ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandAnd, GExprRel> = (*) GExprRel GOperandAnd RAExprMacro<GOperandAnd, GExprRel> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandOr, GExprAnd> = (*) GExprAnd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandOr, GExprAnd> = (*) GExprAnd GOperandOr RAExprMacro<GOperandOr, GExprAnd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `"true"` we can reduce to a `CommaSeparatedList<GExpr>` but we can also shift

/home/prybicki/code/latte/src/latte.lalrpop:108:20: 108:44: Conflict detected

    when in this state:
  (<GExpr> ",")+ = (*) (<GExpr> ",")+ GExpr "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  (<GExpr> ",")+ = (<GExpr> ",")+ (*) GExpr "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  (<GExpr> ",")+ = (*) GExpr "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) (<GExpr> ",")+ ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (<GExpr> ",")+ (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) (<GExpr> ",")+ GExpr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (<GExpr> ",")+ (*) GExpr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) GExpr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GBoolean = (*) "false" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GBoolean = (*) "true" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExpr = (*) GExprOr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAdd = (*) LAExprMacro<GOperandAdd, GExprMul> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAnd = (*) RAExprMacro<GOperandAnd, GExprRel> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) CommaSeparatedList<GExpr> ")" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GBoolean ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GIdent ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GIdent "(" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GInteger ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GString ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) "(" GExprOr ")" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprMul = (*) LAExprMacro<GOperandMul, GExprUnary> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprOr = (*) RAExprMacro<GOperandOr, GExprAnd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprRel = (*) LAExprMacro<GOperandRel, GExprAdd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) "!" GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) "-" GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GIdent = (*) r#"[A-Z,a-z,_\']+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GInteger = (*) r#"[+-]"# r#"[0-9]+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GInteger = (*) r#"[0-9]+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GString = (*) r#"\"([^,\",\\\\]|\\\\\")*\""# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandAdd, GExprMul> = (*) GExprMul ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandAdd, GExprMul> = (*) LAExprMacro<GOperandAdd, GExprMul> GOperandAdd GExprMul ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandMul, GExprUnary> = (*) GExprUnary ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandMul, GExprUnary> = (*) LAExprMacro<GOperandMul, GExprUnary> GOperandMul GExprUnary ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandRel, GExprAdd> = (*) GExprAdd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandRel, GExprAdd> = (*) LAExprMacro<GOperandRel, GExprAdd> GOperandRel GExprAdd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandAnd, GExprRel> = (*) GExprRel ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandAnd, GExprRel> = (*) GExprRel GOperandAnd RAExprMacro<GOperandAnd, GExprRel> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandOr, GExprAnd> = (*) GExprAnd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandOr, GExprAnd> = (*) GExprAnd GOperandOr RAExprMacro<GOperandOr, GExprAnd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `"true"` we can reduce to a `CommaSeparatedList<GExpr>` but we can also shift

/home/prybicki/code/latte/src/latte.lalrpop:108:20: 108:44: Conflict detected

    when in this state:
  (<GExpr> ",")+ = (*) (<GExpr> ",")+ GExpr "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  (<GExpr> ",")+ = (<GExpr> ",")+ (*) GExpr "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  (<GExpr> ",")+ = (*) GExpr "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) (<GExpr> ",")+ ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (<GExpr> ",")+ (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) (<GExpr> ",")+ GExpr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (<GExpr> ",")+ (*) GExpr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) GExpr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GBoolean = (*) "false" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GBoolean = (*) "true" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExpr = (*) GExprOr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAdd = (*) LAExprMacro<GOperandAdd, GExprMul> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAnd = (*) RAExprMacro<GOperandAnd, GExprRel> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) CommaSeparatedList<GExpr> ")" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GBoolean ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GIdent ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GIdent "(" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GInteger ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GString ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) "(" GExprOr ")" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprMul = (*) LAExprMacro<GOperandMul, GExprUnary> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprOr = (*) RAExprMacro<GOperandOr, GExprAnd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprRel = (*) LAExprMacro<GOperandRel, GExprAdd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) "!" GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) "-" GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GIdent = (*) r#"[A-Z,a-z,_\']+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GInteger = (*) r#"[+-]"# r#"[0-9]+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GInteger = (*) r#"[0-9]+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GString = (*) r#"\"([^,\",\\\\]|\\\\\")*\""# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandAdd, GExprMul> = (*) GExprMul ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandAdd, GExprMul> = (*) LAExprMacro<GOperandAdd, GExprMul> GOperandAdd GExprMul ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandMul, GExprUnary> = (*) GExprUnary ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandMul, GExprUnary> = (*) LAExprMacro<GOperandMul, GExprUnary> GOperandMul GExprUnary ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandRel, GExprAdd> = (*) GExprAdd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandRel, GExprAdd> = (*) LAExprMacro<GOperandRel, GExprAdd> GOperandRel GExprAdd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandAnd, GExprRel> = (*) GExprRel ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandAnd, GExprRel> = (*) GExprRel GOperandAnd RAExprMacro<GOperandAnd, GExprRel> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandOr, GExprAnd> = (*) GExprAnd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandOr, GExprAnd> = (*) GExprAnd GOperandOr RAExprMacro<GOperandOr, GExprAnd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `r#"\"([^,\",\\\\]|\\\\\")*\""#` we can reduce to a `CommaSeparatedList<GExpr>` but we can also shift

/home/prybicki/code/latte/src/latte.lalrpop:108:20: 108:44: Conflict detected

    when in this state:
  (<GExpr> ",")+ = (*) (<GExpr> ",")+ GExpr "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  (<GExpr> ",")+ = (<GExpr> ",")+ (*) GExpr "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  (<GExpr> ",")+ = (*) GExpr "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) (<GExpr> ",")+ ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (<GExpr> ",")+ (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) (<GExpr> ",")+ GExpr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (<GExpr> ",")+ (*) GExpr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) GExpr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GBoolean = (*) "false" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GBoolean = (*) "true" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExpr = (*) GExprOr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAdd = (*) LAExprMacro<GOperandAdd, GExprMul> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAnd = (*) RAExprMacro<GOperandAnd, GExprRel> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) CommaSeparatedList<GExpr> ")" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GBoolean ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GIdent ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GIdent "(" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GInteger ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GString ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) "(" GExprOr ")" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprMul = (*) LAExprMacro<GOperandMul, GExprUnary> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprOr = (*) RAExprMacro<GOperandOr, GExprAnd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprRel = (*) LAExprMacro<GOperandRel, GExprAdd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) "!" GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) "-" GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GIdent = (*) r#"[A-Z,a-z,_\']+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GInteger = (*) r#"[+-]"# r#"[0-9]+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GInteger = (*) r#"[0-9]+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GString = (*) r#"\"([^,\",\\\\]|\\\\\")*\""# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandAdd, GExprMul> = (*) GExprMul ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandAdd, GExprMul> = (*) LAExprMacro<GOperandAdd, GExprMul> GOperandAdd GExprMul ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandMul, GExprUnary> = (*) GExprUnary ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandMul, GExprUnary> = (*) LAExprMacro<GOperandMul, GExprUnary> GOperandMul GExprUnary ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandRel, GExprAdd> = (*) GExprAdd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandRel, GExprAdd> = (*) LAExprMacro<GOperandRel, GExprAdd> GOperandRel GExprAdd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandAnd, GExprRel> = (*) GExprRel ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandAnd, GExprRel> = (*) GExprRel GOperandAnd RAExprMacro<GOperandAnd, GExprRel> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandOr, GExprAnd> = (*) GExprAnd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandOr, GExprAnd> = (*) GExprAnd GOperandOr RAExprMacro<GOperandOr, GExprAnd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `r#"\"([^,\",\\\\]|\\\\\")*\""#` we can reduce to a `CommaSeparatedList<GExpr>` but we can also shift

/home/prybicki/code/latte/src/latte.lalrpop:108:20: 108:44: Conflict detected

    when in this state:
  (<GExpr> ",")+ = (*) (<GExpr> ",")+ GExpr "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  (<GExpr> ",")+ = (<GExpr> ",")+ (*) GExpr "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  (<GExpr> ",")+ = (*) GExpr "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) (<GExpr> ",")+ ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (<GExpr> ",")+ (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) (<GExpr> ",")+ GExpr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (<GExpr> ",")+ (*) GExpr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) GExpr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GBoolean = (*) "false" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GBoolean = (*) "true" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExpr = (*) GExprOr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAdd = (*) LAExprMacro<GOperandAdd, GExprMul> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAnd = (*) RAExprMacro<GOperandAnd, GExprRel> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) CommaSeparatedList<GExpr> ")" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GBoolean ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GIdent ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GIdent "(" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GInteger ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GString ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) "(" GExprOr ")" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprMul = (*) LAExprMacro<GOperandMul, GExprUnary> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprOr = (*) RAExprMacro<GOperandOr, GExprAnd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprRel = (*) LAExprMacro<GOperandRel, GExprAdd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) "!" GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) "-" GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GIdent = (*) r#"[A-Z,a-z,_\']+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GInteger = (*) r#"[+-]"# r#"[0-9]+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GInteger = (*) r#"[0-9]+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GString = (*) r#"\"([^,\",\\\\]|\\\\\")*\""# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandAdd, GExprMul> = (*) GExprMul ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandAdd, GExprMul> = (*) LAExprMacro<GOperandAdd, GExprMul> GOperandAdd GExprMul ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandMul, GExprUnary> = (*) GExprUnary ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandMul, GExprUnary> = (*) LAExprMacro<GOperandMul, GExprUnary> GOperandMul GExprUnary ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandRel, GExprAdd> = (*) GExprAdd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandRel, GExprAdd> = (*) LAExprMacro<GOperandRel, GExprAdd> GOperandRel GExprAdd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandAnd, GExprRel> = (*) GExprRel ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandAnd, GExprRel> = (*) GExprRel GOperandAnd RAExprMacro<GOperandAnd, GExprRel> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandOr, GExprAnd> = (*) GExprAnd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandOr, GExprAnd> = (*) GExprAnd GOperandOr RAExprMacro<GOperandOr, GExprAnd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `r#"[+-]"#` we can reduce to a `CommaSeparatedList<GExpr>` but we can also shift

/home/prybicki/code/latte/src/latte.lalrpop:108:20: 108:44: Conflict detected

    when in this state:
  (<GExpr> ",")+ = (*) (<GExpr> ",")+ GExpr "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  (<GExpr> ",")+ = (<GExpr> ",")+ (*) GExpr "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  (<GExpr> ",")+ = (*) GExpr "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) (<GExpr> ",")+ ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (<GExpr> ",")+ (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) (<GExpr> ",")+ GExpr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (<GExpr> ",")+ (*) GExpr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) GExpr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GBoolean = (*) "false" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GBoolean = (*) "true" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExpr = (*) GExprOr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAdd = (*) LAExprMacro<GOperandAdd, GExprMul> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAnd = (*) RAExprMacro<GOperandAnd, GExprRel> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) CommaSeparatedList<GExpr> ")" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GBoolean ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GIdent ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GIdent "(" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GInteger ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GString ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) "(" GExprOr ")" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprMul = (*) LAExprMacro<GOperandMul, GExprUnary> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprOr = (*) RAExprMacro<GOperandOr, GExprAnd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprRel = (*) LAExprMacro<GOperandRel, GExprAdd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) "!" GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) "-" GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GIdent = (*) r#"[A-Z,a-z,_\']+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GInteger = (*) r#"[+-]"# r#"[0-9]+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GInteger = (*) r#"[0-9]+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GString = (*) r#"\"([^,\",\\\\]|\\\\\")*\""# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandAdd, GExprMul> = (*) GExprMul ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandAdd, GExprMul> = (*) LAExprMacro<GOperandAdd, GExprMul> GOperandAdd GExprMul ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandMul, GExprUnary> = (*) GExprUnary ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandMul, GExprUnary> = (*) LAExprMacro<GOperandMul, GExprUnary> GOperandMul GExprUnary ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandRel, GExprAdd> = (*) GExprAdd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandRel, GExprAdd> = (*) LAExprMacro<GOperandRel, GExprAdd> GOperandRel GExprAdd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandAnd, GExprRel> = (*) GExprRel ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandAnd, GExprRel> = (*) GExprRel GOperandAnd RAExprMacro<GOperandAnd, GExprRel> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandOr, GExprAnd> = (*) GExprAnd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandOr, GExprAnd> = (*) GExprAnd GOperandOr RAExprMacro<GOperandOr, GExprAnd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `r#"[+-]"#` we can reduce to a `CommaSeparatedList<GExpr>` but we can also shift

/home/prybicki/code/latte/src/latte.lalrpop:108:20: 108:44: Conflict detected

    when in this state:
  (<GExpr> ",")+ = (*) (<GExpr> ",")+ GExpr "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  (<GExpr> ",")+ = (<GExpr> ",")+ (*) GExpr "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  (<GExpr> ",")+ = (*) GExpr "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) (<GExpr> ",")+ ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (<GExpr> ",")+ (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) (<GExpr> ",")+ GExpr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (<GExpr> ",")+ (*) GExpr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) GExpr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GBoolean = (*) "false" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GBoolean = (*) "true" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExpr = (*) GExprOr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAdd = (*) LAExprMacro<GOperandAdd, GExprMul> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAnd = (*) RAExprMacro<GOperandAnd, GExprRel> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) CommaSeparatedList<GExpr> ")" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GBoolean ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GIdent ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GIdent "(" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GInteger ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GString ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) "(" GExprOr ")" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprMul = (*) LAExprMacro<GOperandMul, GExprUnary> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprOr = (*) RAExprMacro<GOperandOr, GExprAnd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprRel = (*) LAExprMacro<GOperandRel, GExprAdd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) "!" GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) "-" GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GIdent = (*) r#"[A-Z,a-z,_\']+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GInteger = (*) r#"[+-]"# r#"[0-9]+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GInteger = (*) r#"[0-9]+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GString = (*) r#"\"([^,\",\\\\]|\\\\\")*\""# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandAdd, GExprMul> = (*) GExprMul ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandAdd, GExprMul> = (*) LAExprMacro<GOperandAdd, GExprMul> GOperandAdd GExprMul ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandMul, GExprUnary> = (*) GExprUnary ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandMul, GExprUnary> = (*) LAExprMacro<GOperandMul, GExprUnary> GOperandMul GExprUnary ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandRel, GExprAdd> = (*) GExprAdd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandRel, GExprAdd> = (*) LAExprMacro<GOperandRel, GExprAdd> GOperandRel GExprAdd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandAnd, GExprRel> = (*) GExprRel ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandAnd, GExprRel> = (*) GExprRel GOperandAnd RAExprMacro<GOperandAnd, GExprRel> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandOr, GExprAnd> = (*) GExprAnd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandOr, GExprAnd> = (*) GExprAnd GOperandOr RAExprMacro<GOperandOr, GExprAnd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `r#"[0-9]+"#` we can reduce to a `CommaSeparatedList<GExpr>` but we can also shift

/home/prybicki/code/latte/src/latte.lalrpop:108:20: 108:44: Conflict detected

    when in this state:
  (<GExpr> ",")+ = (*) (<GExpr> ",")+ GExpr "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  (<GExpr> ",")+ = (<GExpr> ",")+ (*) GExpr "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  (<GExpr> ",")+ = (*) GExpr "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) (<GExpr> ",")+ ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (<GExpr> ",")+ (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) (<GExpr> ",")+ GExpr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (<GExpr> ",")+ (*) GExpr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) GExpr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GBoolean = (*) "false" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GBoolean = (*) "true" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExpr = (*) GExprOr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAdd = (*) LAExprMacro<GOperandAdd, GExprMul> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAnd = (*) RAExprMacro<GOperandAnd, GExprRel> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) CommaSeparatedList<GExpr> ")" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GBoolean ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GIdent ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GIdent "(" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GInteger ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GString ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) "(" GExprOr ")" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprMul = (*) LAExprMacro<GOperandMul, GExprUnary> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprOr = (*) RAExprMacro<GOperandOr, GExprAnd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprRel = (*) LAExprMacro<GOperandRel, GExprAdd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) "!" GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) "-" GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GIdent = (*) r#"[A-Z,a-z,_\']+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GInteger = (*) r#"[+-]"# r#"[0-9]+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GInteger = (*) r#"[0-9]+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GString = (*) r#"\"([^,\",\\\\]|\\\\\")*\""# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandAdd, GExprMul> = (*) GExprMul ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandAdd, GExprMul> = (*) LAExprMacro<GOperandAdd, GExprMul> GOperandAdd GExprMul ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandMul, GExprUnary> = (*) GExprUnary ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandMul, GExprUnary> = (*) LAExprMacro<GOperandMul, GExprUnary> GOperandMul GExprUnary ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandRel, GExprAdd> = (*) GExprAdd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandRel, GExprAdd> = (*) LAExprMacro<GOperandRel, GExprAdd> GOperandRel GExprAdd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandAnd, GExprRel> = (*) GExprRel ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandAnd, GExprRel> = (*) GExprRel GOperandAnd RAExprMacro<GOperandAnd, GExprRel> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandOr, GExprAnd> = (*) GExprAnd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandOr, GExprAnd> = (*) GExprAnd GOperandOr RAExprMacro<GOperandOr, GExprAnd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `r#"[0-9]+"#` we can reduce to a `CommaSeparatedList<GExpr>` but we can also shift

/home/prybicki/code/latte/src/latte.lalrpop:108:20: 108:44: Conflict detected

    when in this state:
  (<GExpr> ",")+ = (*) (<GExpr> ",")+ GExpr "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  (<GExpr> ",")+ = (<GExpr> ",")+ (*) GExpr "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  (<GExpr> ",")+ = (*) GExpr "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) (<GExpr> ",")+ ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (<GExpr> ",")+ (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) (<GExpr> ",")+ GExpr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (<GExpr> ",")+ (*) GExpr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) GExpr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GBoolean = (*) "false" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GBoolean = (*) "true" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExpr = (*) GExprOr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAdd = (*) LAExprMacro<GOperandAdd, GExprMul> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAnd = (*) RAExprMacro<GOperandAnd, GExprRel> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) CommaSeparatedList<GExpr> ")" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GBoolean ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GIdent ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GIdent "(" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GInteger ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GString ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) "(" GExprOr ")" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprMul = (*) LAExprMacro<GOperandMul, GExprUnary> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprOr = (*) RAExprMacro<GOperandOr, GExprAnd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprRel = (*) LAExprMacro<GOperandRel, GExprAdd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) "!" GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) "-" GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GIdent = (*) r#"[A-Z,a-z,_\']+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GInteger = (*) r#"[+-]"# r#"[0-9]+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GInteger = (*) r#"[0-9]+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GString = (*) r#"\"([^,\",\\\\]|\\\\\")*\""# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandAdd, GExprMul> = (*) GExprMul ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandAdd, GExprMul> = (*) LAExprMacro<GOperandAdd, GExprMul> GOperandAdd GExprMul ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandMul, GExprUnary> = (*) GExprUnary ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandMul, GExprUnary> = (*) LAExprMacro<GOperandMul, GExprUnary> GOperandMul GExprUnary ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandRel, GExprAdd> = (*) GExprAdd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandRel, GExprAdd> = (*) LAExprMacro<GOperandRel, GExprAdd> GOperandRel GExprAdd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandAnd, GExprRel> = (*) GExprRel ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandAnd, GExprRel> = (*) GExprRel GOperandAnd RAExprMacro<GOperandAnd, GExprRel> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandOr, GExprAnd> = (*) GExprAnd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandOr, GExprAnd> = (*) GExprAnd GOperandOr RAExprMacro<GOperandOr, GExprAnd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `r#"[A-Z,a-z,_\']+"#` we can reduce to a `CommaSeparatedList<GExpr>` but we can also shift

/home/prybicki/code/latte/src/latte.lalrpop:108:20: 108:44: Conflict detected

    when in this state:
  (<GExpr> ",")+ = (*) (<GExpr> ",")+ GExpr "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  (<GExpr> ",")+ = (<GExpr> ",")+ (*) GExpr "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  (<GExpr> ",")+ = (*) GExpr "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) (<GExpr> ",")+ ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (<GExpr> ",")+ (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) (<GExpr> ",")+ GExpr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (<GExpr> ",")+ (*) GExpr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) GExpr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GBoolean = (*) "false" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GBoolean = (*) "true" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExpr = (*) GExprOr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAdd = (*) LAExprMacro<GOperandAdd, GExprMul> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAnd = (*) RAExprMacro<GOperandAnd, GExprRel> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) CommaSeparatedList<GExpr> ")" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GBoolean ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GIdent ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GIdent "(" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GInteger ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GString ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) "(" GExprOr ")" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprMul = (*) LAExprMacro<GOperandMul, GExprUnary> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprOr = (*) RAExprMacro<GOperandOr, GExprAnd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprRel = (*) LAExprMacro<GOperandRel, GExprAdd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) "!" GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) "-" GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GIdent = (*) r#"[A-Z,a-z,_\']+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GInteger = (*) r#"[+-]"# r#"[0-9]+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GInteger = (*) r#"[0-9]+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GString = (*) r#"\"([^,\",\\\\]|\\\\\")*\""# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandAdd, GExprMul> = (*) GExprMul ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandAdd, GExprMul> = (*) LAExprMacro<GOperandAdd, GExprMul> GOperandAdd GExprMul ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandMul, GExprUnary> = (*) GExprUnary ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandMul, GExprUnary> = (*) LAExprMacro<GOperandMul, GExprUnary> GOperandMul GExprUnary ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandRel, GExprAdd> = (*) GExprAdd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandRel, GExprAdd> = (*) LAExprMacro<GOperandRel, GExprAdd> GOperandRel GExprAdd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandAnd, GExprRel> = (*) GExprRel ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandAnd, GExprRel> = (*) GExprRel GOperandAnd RAExprMacro<GOperandAnd, GExprRel> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandOr, GExprAnd> = (*) GExprAnd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandOr, GExprAnd> = (*) GExprAnd GOperandOr RAExprMacro<GOperandOr, GExprAnd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `r#"[A-Z,a-z,_\']+"#` we can reduce to a `CommaSeparatedList<GExpr>` but we can also shift

/home/prybicki/code/latte/src/latte.lalrpop:108:20: 108:44: Conflict detected

    when in this state:
  (<GExpr> ",")+ = (*) (<GExpr> ",")+ GExpr "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  (<GExpr> ",")+ = (<GExpr> ",")+ (*) GExpr "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  (<GExpr> ",")+ = (*) GExpr "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) (<GExpr> ",")+ ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (<GExpr> ",")+ (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) (<GExpr> ",")+ GExpr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (<GExpr> ",")+ (*) GExpr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) GExpr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GBoolean = (*) "false" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GBoolean = (*) "true" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExpr = (*) GExprOr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAdd = (*) LAExprMacro<GOperandAdd, GExprMul> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAnd = (*) RAExprMacro<GOperandAnd, GExprRel> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) CommaSeparatedList<GExpr> ")" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GBoolean ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GIdent ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GIdent "(" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GInteger ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GString ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) "(" GExprOr ")" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprMul = (*) LAExprMacro<GOperandMul, GExprUnary> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprOr = (*) RAExprMacro<GOperandOr, GExprAnd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprRel = (*) LAExprMacro<GOperandRel, GExprAdd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) "!" GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) "-" GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GIdent = (*) r#"[A-Z,a-z,_\']+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GInteger = (*) r#"[+-]"# r#"[0-9]+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GInteger = (*) r#"[0-9]+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GString = (*) r#"\"([^,\",\\\\]|\\\\\")*\""# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandAdd, GExprMul> = (*) GExprMul ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandAdd, GExprMul> = (*) LAExprMacro<GOperandAdd, GExprMul> GOperandAdd GExprMul ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandMul, GExprUnary> = (*) GExprUnary ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandMul, GExprUnary> = (*) LAExprMacro<GOperandMul, GExprUnary> GOperandMul GExprUnary ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandRel, GExprAdd> = (*) GExprAdd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandRel, GExprAdd> = (*) LAExprMacro<GOperandRel, GExprAdd> GOperandRel GExprAdd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandAnd, GExprRel> = (*) GExprRel ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandAnd, GExprRel> = (*) GExprRel GOperandAnd RAExprMacro<GOperandAnd, GExprRel> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandOr, GExprAnd> = (*) GExprAnd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandOr, GExprAnd> = (*) GExprAnd GOperandOr RAExprMacro<GOperandOr, GExprAnd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `"!"` we can reduce to a `CommaSeparatedList<GExpr>` but we can also reduce to a `CommaSeparatedList<GExpr>`

/home/prybicki/code/latte/src/latte.lalrpop:108:20: 108:44: Conflict detected

    when in this state:
  (<GExpr> ",")+ = (*) (<GExpr> ",")+ GExpr "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  (<GExpr> ",")+ = (<GExpr> ",")+ (*) GExpr "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  (<GExpr> ",")+ = (*) GExpr "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) (<GExpr> ",")+ ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (<GExpr> ",")+ (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) (<GExpr> ",")+ GExpr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (<GExpr> ",")+ (*) GExpr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) GExpr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GBoolean = (*) "false" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GBoolean = (*) "true" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExpr = (*) GExprOr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAdd = (*) LAExprMacro<GOperandAdd, GExprMul> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAnd = (*) RAExprMacro<GOperandAnd, GExprRel> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) CommaSeparatedList<GExpr> ")" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GBoolean ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GIdent ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GIdent "(" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GInteger ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GString ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) "(" GExprOr ")" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprMul = (*) LAExprMacro<GOperandMul, GExprUnary> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprOr = (*) RAExprMacro<GOperandOr, GExprAnd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprRel = (*) LAExprMacro<GOperandRel, GExprAdd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) "!" GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) "-" GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GIdent = (*) r#"[A-Z,a-z,_\']+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GInteger = (*) r#"[+-]"# r#"[0-9]+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GInteger = (*) r#"[0-9]+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GString = (*) r#"\"([^,\",\\\\]|\\\\\")*\""# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandAdd, GExprMul> = (*) GExprMul ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandAdd, GExprMul> = (*) LAExprMacro<GOperandAdd, GExprMul> GOperandAdd GExprMul ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandMul, GExprUnary> = (*) GExprUnary ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandMul, GExprUnary> = (*) LAExprMacro<GOperandMul, GExprUnary> GOperandMul GExprUnary ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandRel, GExprAdd> = (*) GExprAdd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandRel, GExprAdd> = (*) LAExprMacro<GOperandRel, GExprAdd> GOperandRel GExprAdd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandAnd, GExprRel> = (*) GExprRel ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandAnd, GExprRel> = (*) GExprRel GOperandAnd RAExprMacro<GOperandAnd, GExprRel> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandOr, GExprAnd> = (*) GExprAnd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandOr, GExprAnd> = (*) GExprAnd GOperandOr RAExprMacro<GOperandOr, GExprAnd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `"%"` we can reduce to a `CommaSeparatedList<GExpr>` but we can also reduce to a `CommaSeparatedList<GExpr>`

/home/prybicki/code/latte/src/latte.lalrpop:108:20: 108:44: Conflict detected

    when in this state:
  (<GExpr> ",")+ = (*) (<GExpr> ",")+ GExpr "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  (<GExpr> ",")+ = (<GExpr> ",")+ (*) GExpr "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  (<GExpr> ",")+ = (*) GExpr "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) (<GExpr> ",")+ ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (<GExpr> ",")+ (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) (<GExpr> ",")+ GExpr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (<GExpr> ",")+ (*) GExpr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) GExpr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GBoolean = (*) "false" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GBoolean = (*) "true" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExpr = (*) GExprOr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAdd = (*) LAExprMacro<GOperandAdd, GExprMul> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAnd = (*) RAExprMacro<GOperandAnd, GExprRel> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) CommaSeparatedList<GExpr> ")" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GBoolean ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GIdent ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GIdent "(" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GInteger ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GString ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) "(" GExprOr ")" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprMul = (*) LAExprMacro<GOperandMul, GExprUnary> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprOr = (*) RAExprMacro<GOperandOr, GExprAnd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprRel = (*) LAExprMacro<GOperandRel, GExprAdd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) "!" GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) "-" GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GIdent = (*) r#"[A-Z,a-z,_\']+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GInteger = (*) r#"[+-]"# r#"[0-9]+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GInteger = (*) r#"[0-9]+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GString = (*) r#"\"([^,\",\\\\]|\\\\\")*\""# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandAdd, GExprMul> = (*) GExprMul ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandAdd, GExprMul> = (*) LAExprMacro<GOperandAdd, GExprMul> GOperandAdd GExprMul ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandMul, GExprUnary> = (*) GExprUnary ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandMul, GExprUnary> = (*) LAExprMacro<GOperandMul, GExprUnary> GOperandMul GExprUnary ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandRel, GExprAdd> = (*) GExprAdd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandRel, GExprAdd> = (*) LAExprMacro<GOperandRel, GExprAdd> GOperandRel GExprAdd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandAnd, GExprRel> = (*) GExprRel ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandAnd, GExprRel> = (*) GExprRel GOperandAnd RAExprMacro<GOperandAnd, GExprRel> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandOr, GExprAnd> = (*) GExprAnd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandOr, GExprAnd> = (*) GExprAnd GOperandOr RAExprMacro<GOperandOr, GExprAnd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `"&&"` we can reduce to a `CommaSeparatedList<GExpr>` but we can also reduce to a `CommaSeparatedList<GExpr>`

/home/prybicki/code/latte/src/latte.lalrpop:108:20: 108:44: Conflict detected

    when in this state:
  (<GExpr> ",")+ = (*) (<GExpr> ",")+ GExpr "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  (<GExpr> ",")+ = (<GExpr> ",")+ (*) GExpr "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  (<GExpr> ",")+ = (*) GExpr "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) (<GExpr> ",")+ ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (<GExpr> ",")+ (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) (<GExpr> ",")+ GExpr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (<GExpr> ",")+ (*) GExpr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) GExpr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GBoolean = (*) "false" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GBoolean = (*) "true" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExpr = (*) GExprOr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAdd = (*) LAExprMacro<GOperandAdd, GExprMul> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAnd = (*) RAExprMacro<GOperandAnd, GExprRel> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) CommaSeparatedList<GExpr> ")" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GBoolean ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GIdent ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GIdent "(" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GInteger ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GString ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) "(" GExprOr ")" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprMul = (*) LAExprMacro<GOperandMul, GExprUnary> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprOr = (*) RAExprMacro<GOperandOr, GExprAnd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprRel = (*) LAExprMacro<GOperandRel, GExprAdd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) "!" GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) "-" GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GIdent = (*) r#"[A-Z,a-z,_\']+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GInteger = (*) r#"[+-]"# r#"[0-9]+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GInteger = (*) r#"[0-9]+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GString = (*) r#"\"([^,\",\\\\]|\\\\\")*\""# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandAdd, GExprMul> = (*) GExprMul ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandAdd, GExprMul> = (*) LAExprMacro<GOperandAdd, GExprMul> GOperandAdd GExprMul ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandMul, GExprUnary> = (*) GExprUnary ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandMul, GExprUnary> = (*) LAExprMacro<GOperandMul, GExprUnary> GOperandMul GExprUnary ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandRel, GExprAdd> = (*) GExprAdd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandRel, GExprAdd> = (*) LAExprMacro<GOperandRel, GExprAdd> GOperandRel GExprAdd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandAnd, GExprRel> = (*) GExprRel ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandAnd, GExprRel> = (*) GExprRel GOperandAnd RAExprMacro<GOperandAnd, GExprRel> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandOr, GExprAnd> = (*) GExprAnd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandOr, GExprAnd> = (*) GExprAnd GOperandOr RAExprMacro<GOperandOr, GExprAnd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `"("` we can reduce to a `CommaSeparatedList<GExpr>` but we can also reduce to a `CommaSeparatedList<GExpr>`

/home/prybicki/code/latte/src/latte.lalrpop:108:20: 108:44: Local ambiguity detected

  The problem arises after having observed the following symbols in the input:
    (<GExpr> ",")+
  At that point, if the next token is a `")"`, then the parser can proceed in two different ways.

  First, the parser could execute the production at /home/prybicki/code/latte/src/latte.lalrpop:108:20: 108:44, which would consume the top 0 token(s) from the stack and produce a `CommaSeparatedList<GExpr>`. This might then yield a parse tree like
    ╷                           ╷ ")"
    ├─CommaSeparatedList<GExpr>─┘   │
    └─GExprAtom─────────────────────┘

  Alternatively, the parser could execute the production at /home/prybicki/code/latte/src/latte.lalrpop:108:20: 108:44, which would consume the top 1 token(s) from the stack and produce a `CommaSeparatedList<GExpr>`. This might then yield a parse tree like
    (<GExpr> ",")+              ╷ ")"
    ├─CommaSeparatedList<GExpr>─┘   │
    └─GExprAtom─────────────────────┘

  See the LALRPOP manual for advice on making your grammar LR(1).

/home/prybicki/code/latte/src/latte.lalrpop:108:20: 108:44: Conflict detected

    when in this state:
  (<GExpr> ",")+ = (*) (<GExpr> ",")+ GExpr "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  (<GExpr> ",")+ = (<GExpr> ",")+ (*) GExpr "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  (<GExpr> ",")+ = (*) GExpr "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) (<GExpr> ",")+ ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (<GExpr> ",")+ (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) (<GExpr> ",")+ GExpr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (<GExpr> ",")+ (*) GExpr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) GExpr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GBoolean = (*) "false" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GBoolean = (*) "true" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExpr = (*) GExprOr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAdd = (*) LAExprMacro<GOperandAdd, GExprMul> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAnd = (*) RAExprMacro<GOperandAnd, GExprRel> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) CommaSeparatedList<GExpr> ")" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GBoolean ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GIdent ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GIdent "(" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GInteger ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GString ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) "(" GExprOr ")" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprMul = (*) LAExprMacro<GOperandMul, GExprUnary> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprOr = (*) RAExprMacro<GOperandOr, GExprAnd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprRel = (*) LAExprMacro<GOperandRel, GExprAdd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) "!" GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) "-" GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GIdent = (*) r#"[A-Z,a-z,_\']+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GInteger = (*) r#"[+-]"# r#"[0-9]+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GInteger = (*) r#"[0-9]+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GString = (*) r#"\"([^,\",\\\\]|\\\\\")*\""# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandAdd, GExprMul> = (*) GExprMul ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandAdd, GExprMul> = (*) LAExprMacro<GOperandAdd, GExprMul> GOperandAdd GExprMul ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandMul, GExprUnary> = (*) GExprUnary ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandMul, GExprUnary> = (*) LAExprMacro<GOperandMul, GExprUnary> GOperandMul GExprUnary ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandRel, GExprAdd> = (*) GExprAdd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandRel, GExprAdd> = (*) LAExprMacro<GOperandRel, GExprAdd> GOperandRel GExprAdd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandAnd, GExprRel> = (*) GExprRel ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandAnd, GExprRel> = (*) GExprRel GOperandAnd RAExprMacro<GOperandAnd, GExprRel> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandOr, GExprAnd> = (*) GExprAnd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandOr, GExprAnd> = (*) GExprAnd GOperandOr RAExprMacro<GOperandOr, GExprAnd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `"*"` we can reduce to a `CommaSeparatedList<GExpr>` but we can also reduce to a `CommaSeparatedList<GExpr>`

/home/prybicki/code/latte/src/latte.lalrpop:108:20: 108:44: Conflict detected

    when in this state:
  (<GExpr> ",")+ = (*) (<GExpr> ",")+ GExpr "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  (<GExpr> ",")+ = (<GExpr> ",")+ (*) GExpr "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  (<GExpr> ",")+ = (*) GExpr "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) (<GExpr> ",")+ ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (<GExpr> ",")+ (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) (<GExpr> ",")+ GExpr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (<GExpr> ",")+ (*) GExpr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) GExpr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GBoolean = (*) "false" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GBoolean = (*) "true" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExpr = (*) GExprOr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAdd = (*) LAExprMacro<GOperandAdd, GExprMul> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAnd = (*) RAExprMacro<GOperandAnd, GExprRel> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) CommaSeparatedList<GExpr> ")" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GBoolean ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GIdent ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GIdent "(" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GInteger ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GString ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) "(" GExprOr ")" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprMul = (*) LAExprMacro<GOperandMul, GExprUnary> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprOr = (*) RAExprMacro<GOperandOr, GExprAnd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprRel = (*) LAExprMacro<GOperandRel, GExprAdd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) "!" GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) "-" GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GIdent = (*) r#"[A-Z,a-z,_\']+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GInteger = (*) r#"[+-]"# r#"[0-9]+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GInteger = (*) r#"[0-9]+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GString = (*) r#"\"([^,\",\\\\]|\\\\\")*\""# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandAdd, GExprMul> = (*) GExprMul ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandAdd, GExprMul> = (*) LAExprMacro<GOperandAdd, GExprMul> GOperandAdd GExprMul ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandMul, GExprUnary> = (*) GExprUnary ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandMul, GExprUnary> = (*) LAExprMacro<GOperandMul, GExprUnary> GOperandMul GExprUnary ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandRel, GExprAdd> = (*) GExprAdd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandRel, GExprAdd> = (*) LAExprMacro<GOperandRel, GExprAdd> GOperandRel GExprAdd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandAnd, GExprRel> = (*) GExprRel ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandAnd, GExprRel> = (*) GExprRel GOperandAnd RAExprMacro<GOperandAnd, GExprRel> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandOr, GExprAnd> = (*) GExprAnd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandOr, GExprAnd> = (*) GExprAnd GOperandOr RAExprMacro<GOperandOr, GExprAnd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `"+"` we can reduce to a `CommaSeparatedList<GExpr>` but we can also reduce to a `CommaSeparatedList<GExpr>`

/home/prybicki/code/latte/src/latte.lalrpop:108:20: 108:44: Conflict detected

    when in this state:
  (<GExpr> ",")+ = (*) (<GExpr> ",")+ GExpr "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  (<GExpr> ",")+ = (<GExpr> ",")+ (*) GExpr "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  (<GExpr> ",")+ = (*) GExpr "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) (<GExpr> ",")+ ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (<GExpr> ",")+ (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) (<GExpr> ",")+ GExpr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (<GExpr> ",")+ (*) GExpr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) GExpr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GBoolean = (*) "false" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GBoolean = (*) "true" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExpr = (*) GExprOr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAdd = (*) LAExprMacro<GOperandAdd, GExprMul> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAnd = (*) RAExprMacro<GOperandAnd, GExprRel> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) CommaSeparatedList<GExpr> ")" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GBoolean ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GIdent ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GIdent "(" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GInteger ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GString ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) "(" GExprOr ")" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprMul = (*) LAExprMacro<GOperandMul, GExprUnary> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprOr = (*) RAExprMacro<GOperandOr, GExprAnd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprRel = (*) LAExprMacro<GOperandRel, GExprAdd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) "!" GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) "-" GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GIdent = (*) r#"[A-Z,a-z,_\']+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GInteger = (*) r#"[+-]"# r#"[0-9]+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GInteger = (*) r#"[0-9]+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GString = (*) r#"\"([^,\",\\\\]|\\\\\")*\""# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandAdd, GExprMul> = (*) GExprMul ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandAdd, GExprMul> = (*) LAExprMacro<GOperandAdd, GExprMul> GOperandAdd GExprMul ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandMul, GExprUnary> = (*) GExprUnary ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandMul, GExprUnary> = (*) LAExprMacro<GOperandMul, GExprUnary> GOperandMul GExprUnary ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandRel, GExprAdd> = (*) GExprAdd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandRel, GExprAdd> = (*) LAExprMacro<GOperandRel, GExprAdd> GOperandRel GExprAdd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandAnd, GExprRel> = (*) GExprRel ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandAnd, GExprRel> = (*) GExprRel GOperandAnd RAExprMacro<GOperandAnd, GExprRel> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandOr, GExprAnd> = (*) GExprAnd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandOr, GExprAnd> = (*) GExprAnd GOperandOr RAExprMacro<GOperandOr, GExprAnd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `","` we can reduce to a `CommaSeparatedList<GExpr>` but we can also reduce to a `CommaSeparatedList<GExpr>`

/home/prybicki/code/latte/src/latte.lalrpop:108:20: 108:44: Conflict detected

    when in this state:
  (<GExpr> ",")+ = (*) (<GExpr> ",")+ GExpr "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  (<GExpr> ",")+ = (<GExpr> ",")+ (*) GExpr "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  (<GExpr> ",")+ = (*) GExpr "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) (<GExpr> ",")+ ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (<GExpr> ",")+ (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) (<GExpr> ",")+ GExpr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (<GExpr> ",")+ (*) GExpr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) GExpr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GBoolean = (*) "false" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GBoolean = (*) "true" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExpr = (*) GExprOr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAdd = (*) LAExprMacro<GOperandAdd, GExprMul> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAnd = (*) RAExprMacro<GOperandAnd, GExprRel> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) CommaSeparatedList<GExpr> ")" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GBoolean ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GIdent ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GIdent "(" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GInteger ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GString ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) "(" GExprOr ")" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprMul = (*) LAExprMacro<GOperandMul, GExprUnary> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprOr = (*) RAExprMacro<GOperandOr, GExprAnd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprRel = (*) LAExprMacro<GOperandRel, GExprAdd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) "!" GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) "-" GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GIdent = (*) r#"[A-Z,a-z,_\']+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GInteger = (*) r#"[+-]"# r#"[0-9]+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GInteger = (*) r#"[0-9]+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GString = (*) r#"\"([^,\",\\\\]|\\\\\")*\""# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandAdd, GExprMul> = (*) GExprMul ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandAdd, GExprMul> = (*) LAExprMacro<GOperandAdd, GExprMul> GOperandAdd GExprMul ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandMul, GExprUnary> = (*) GExprUnary ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandMul, GExprUnary> = (*) LAExprMacro<GOperandMul, GExprUnary> GOperandMul GExprUnary ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandRel, GExprAdd> = (*) GExprAdd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandRel, GExprAdd> = (*) LAExprMacro<GOperandRel, GExprAdd> GOperandRel GExprAdd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandAnd, GExprRel> = (*) GExprRel ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandAnd, GExprRel> = (*) GExprRel GOperandAnd RAExprMacro<GOperandAnd, GExprRel> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandOr, GExprAnd> = (*) GExprAnd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandOr, GExprAnd> = (*) GExprAnd GOperandOr RAExprMacro<GOperandOr, GExprAnd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `"-"` we can reduce to a `CommaSeparatedList<GExpr>` but we can also reduce to a `CommaSeparatedList<GExpr>`

/home/prybicki/code/latte/src/latte.lalrpop:108:20: 108:44: Conflict detected

    when in this state:
  (<GExpr> ",")+ = (*) (<GExpr> ",")+ GExpr "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  (<GExpr> ",")+ = (<GExpr> ",")+ (*) GExpr "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  (<GExpr> ",")+ = (*) GExpr "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) (<GExpr> ",")+ ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (<GExpr> ",")+ (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) (<GExpr> ",")+ GExpr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (<GExpr> ",")+ (*) GExpr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) GExpr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GBoolean = (*) "false" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GBoolean = (*) "true" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExpr = (*) GExprOr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAdd = (*) LAExprMacro<GOperandAdd, GExprMul> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAnd = (*) RAExprMacro<GOperandAnd, GExprRel> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) CommaSeparatedList<GExpr> ")" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GBoolean ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GIdent ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GIdent "(" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GInteger ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GString ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) "(" GExprOr ")" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprMul = (*) LAExprMacro<GOperandMul, GExprUnary> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprOr = (*) RAExprMacro<GOperandOr, GExprAnd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprRel = (*) LAExprMacro<GOperandRel, GExprAdd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) "!" GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) "-" GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GIdent = (*) r#"[A-Z,a-z,_\']+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GInteger = (*) r#"[+-]"# r#"[0-9]+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GInteger = (*) r#"[0-9]+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GString = (*) r#"\"([^,\",\\\\]|\\\\\")*\""# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandAdd, GExprMul> = (*) GExprMul ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandAdd, GExprMul> = (*) LAExprMacro<GOperandAdd, GExprMul> GOperandAdd GExprMul ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandMul, GExprUnary> = (*) GExprUnary ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandMul, GExprUnary> = (*) LAExprMacro<GOperandMul, GExprUnary> GOperandMul GExprUnary ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandRel, GExprAdd> = (*) GExprAdd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandRel, GExprAdd> = (*) LAExprMacro<GOperandRel, GExprAdd> GOperandRel GExprAdd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandAnd, GExprRel> = (*) GExprRel ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandAnd, GExprRel> = (*) GExprRel GOperandAnd RAExprMacro<GOperandAnd, GExprRel> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandOr, GExprAnd> = (*) GExprAnd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandOr, GExprAnd> = (*) GExprAnd GOperandOr RAExprMacro<GOperandOr, GExprAnd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `"/"` we can reduce to a `CommaSeparatedList<GExpr>` but we can also reduce to a `CommaSeparatedList<GExpr>`

/home/prybicki/code/latte/src/latte.lalrpop:108:20: 108:44: Conflict detected

    when in this state:
  (<GExpr> ",")+ = (*) (<GExpr> ",")+ GExpr "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  (<GExpr> ",")+ = (<GExpr> ",")+ (*) GExpr "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  (<GExpr> ",")+ = (*) GExpr "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) (<GExpr> ",")+ ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (<GExpr> ",")+ (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) (<GExpr> ",")+ GExpr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (<GExpr> ",")+ (*) GExpr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) GExpr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GBoolean = (*) "false" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GBoolean = (*) "true" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExpr = (*) GExprOr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAdd = (*) LAExprMacro<GOperandAdd, GExprMul> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAnd = (*) RAExprMacro<GOperandAnd, GExprRel> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) CommaSeparatedList<GExpr> ")" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GBoolean ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GIdent ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GIdent "(" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GInteger ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GString ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) "(" GExprOr ")" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprMul = (*) LAExprMacro<GOperandMul, GExprUnary> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprOr = (*) RAExprMacro<GOperandOr, GExprAnd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprRel = (*) LAExprMacro<GOperandRel, GExprAdd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) "!" GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) "-" GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GIdent = (*) r#"[A-Z,a-z,_\']+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GInteger = (*) r#"[+-]"# r#"[0-9]+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GInteger = (*) r#"[0-9]+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GString = (*) r#"\"([^,\",\\\\]|\\\\\")*\""# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandAdd, GExprMul> = (*) GExprMul ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandAdd, GExprMul> = (*) LAExprMacro<GOperandAdd, GExprMul> GOperandAdd GExprMul ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandMul, GExprUnary> = (*) GExprUnary ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandMul, GExprUnary> = (*) LAExprMacro<GOperandMul, GExprUnary> GOperandMul GExprUnary ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandRel, GExprAdd> = (*) GExprAdd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandRel, GExprAdd> = (*) LAExprMacro<GOperandRel, GExprAdd> GOperandRel GExprAdd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandAnd, GExprRel> = (*) GExprRel ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandAnd, GExprRel> = (*) GExprRel GOperandAnd RAExprMacro<GOperandAnd, GExprRel> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandOr, GExprAnd> = (*) GExprAnd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandOr, GExprAnd> = (*) GExprAnd GOperandOr RAExprMacro<GOperandOr, GExprAnd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `"<"` we can reduce to a `CommaSeparatedList<GExpr>` but we can also reduce to a `CommaSeparatedList<GExpr>`

/home/prybicki/code/latte/src/latte.lalrpop:108:20: 108:44: Conflict detected

    when in this state:
  (<GExpr> ",")+ = (*) (<GExpr> ",")+ GExpr "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  (<GExpr> ",")+ = (<GExpr> ",")+ (*) GExpr "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  (<GExpr> ",")+ = (*) GExpr "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) (<GExpr> ",")+ ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (<GExpr> ",")+ (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) (<GExpr> ",")+ GExpr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (<GExpr> ",")+ (*) GExpr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) GExpr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GBoolean = (*) "false" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GBoolean = (*) "true" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExpr = (*) GExprOr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAdd = (*) LAExprMacro<GOperandAdd, GExprMul> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAnd = (*) RAExprMacro<GOperandAnd, GExprRel> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) CommaSeparatedList<GExpr> ")" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GBoolean ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GIdent ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GIdent "(" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GInteger ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GString ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) "(" GExprOr ")" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprMul = (*) LAExprMacro<GOperandMul, GExprUnary> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprOr = (*) RAExprMacro<GOperandOr, GExprAnd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprRel = (*) LAExprMacro<GOperandRel, GExprAdd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) "!" GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) "-" GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GIdent = (*) r#"[A-Z,a-z,_\']+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GInteger = (*) r#"[+-]"# r#"[0-9]+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GInteger = (*) r#"[0-9]+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GString = (*) r#"\"([^,\",\\\\]|\\\\\")*\""# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandAdd, GExprMul> = (*) GExprMul ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandAdd, GExprMul> = (*) LAExprMacro<GOperandAdd, GExprMul> GOperandAdd GExprMul ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandMul, GExprUnary> = (*) GExprUnary ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandMul, GExprUnary> = (*) LAExprMacro<GOperandMul, GExprUnary> GOperandMul GExprUnary ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandRel, GExprAdd> = (*) GExprAdd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandRel, GExprAdd> = (*) LAExprMacro<GOperandRel, GExprAdd> GOperandRel GExprAdd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandAnd, GExprRel> = (*) GExprRel ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandAnd, GExprRel> = (*) GExprRel GOperandAnd RAExprMacro<GOperandAnd, GExprRel> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandOr, GExprAnd> = (*) GExprAnd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandOr, GExprAnd> = (*) GExprAnd GOperandOr RAExprMacro<GOperandOr, GExprAnd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `"<="` we can reduce to a `CommaSeparatedList<GExpr>` but we can also reduce to a `CommaSeparatedList<GExpr>`

/home/prybicki/code/latte/src/latte.lalrpop:108:20: 108:44: Conflict detected

    when in this state:
  (<GExpr> ",")+ = (*) (<GExpr> ",")+ GExpr "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  (<GExpr> ",")+ = (<GExpr> ",")+ (*) GExpr "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  (<GExpr> ",")+ = (*) GExpr "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) (<GExpr> ",")+ ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (<GExpr> ",")+ (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) (<GExpr> ",")+ GExpr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (<GExpr> ",")+ (*) GExpr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) GExpr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GBoolean = (*) "false" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GBoolean = (*) "true" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExpr = (*) GExprOr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAdd = (*) LAExprMacro<GOperandAdd, GExprMul> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAnd = (*) RAExprMacro<GOperandAnd, GExprRel> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) CommaSeparatedList<GExpr> ")" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GBoolean ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GIdent ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GIdent "(" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GInteger ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GString ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) "(" GExprOr ")" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprMul = (*) LAExprMacro<GOperandMul, GExprUnary> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprOr = (*) RAExprMacro<GOperandOr, GExprAnd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprRel = (*) LAExprMacro<GOperandRel, GExprAdd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) "!" GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) "-" GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GIdent = (*) r#"[A-Z,a-z,_\']+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GInteger = (*) r#"[+-]"# r#"[0-9]+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GInteger = (*) r#"[0-9]+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GString = (*) r#"\"([^,\",\\\\]|\\\\\")*\""# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandAdd, GExprMul> = (*) GExprMul ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandAdd, GExprMul> = (*) LAExprMacro<GOperandAdd, GExprMul> GOperandAdd GExprMul ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandMul, GExprUnary> = (*) GExprUnary ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandMul, GExprUnary> = (*) LAExprMacro<GOperandMul, GExprUnary> GOperandMul GExprUnary ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandRel, GExprAdd> = (*) GExprAdd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandRel, GExprAdd> = (*) LAExprMacro<GOperandRel, GExprAdd> GOperandRel GExprAdd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandAnd, GExprRel> = (*) GExprRel ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandAnd, GExprRel> = (*) GExprRel GOperandAnd RAExprMacro<GOperandAnd, GExprRel> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandOr, GExprAnd> = (*) GExprAnd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandOr, GExprAnd> = (*) GExprAnd GOperandOr RAExprMacro<GOperandOr, GExprAnd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `">"` we can reduce to a `CommaSeparatedList<GExpr>` but we can also reduce to a `CommaSeparatedList<GExpr>`

/home/prybicki/code/latte/src/latte.lalrpop:108:20: 108:44: Conflict detected

    when in this state:
  (<GExpr> ",")+ = (*) (<GExpr> ",")+ GExpr "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  (<GExpr> ",")+ = (<GExpr> ",")+ (*) GExpr "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  (<GExpr> ",")+ = (*) GExpr "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) (<GExpr> ",")+ ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (<GExpr> ",")+ (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) (<GExpr> ",")+ GExpr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (<GExpr> ",")+ (*) GExpr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) GExpr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GBoolean = (*) "false" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GBoolean = (*) "true" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExpr = (*) GExprOr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAdd = (*) LAExprMacro<GOperandAdd, GExprMul> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAnd = (*) RAExprMacro<GOperandAnd, GExprRel> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) CommaSeparatedList<GExpr> ")" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GBoolean ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GIdent ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GIdent "(" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GInteger ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GString ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) "(" GExprOr ")" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprMul = (*) LAExprMacro<GOperandMul, GExprUnary> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprOr = (*) RAExprMacro<GOperandOr, GExprAnd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprRel = (*) LAExprMacro<GOperandRel, GExprAdd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) "!" GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) "-" GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GIdent = (*) r#"[A-Z,a-z,_\']+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GInteger = (*) r#"[+-]"# r#"[0-9]+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GInteger = (*) r#"[0-9]+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GString = (*) r#"\"([^,\",\\\\]|\\\\\")*\""# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandAdd, GExprMul> = (*) GExprMul ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandAdd, GExprMul> = (*) LAExprMacro<GOperandAdd, GExprMul> GOperandAdd GExprMul ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandMul, GExprUnary> = (*) GExprUnary ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandMul, GExprUnary> = (*) LAExprMacro<GOperandMul, GExprUnary> GOperandMul GExprUnary ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandRel, GExprAdd> = (*) GExprAdd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandRel, GExprAdd> = (*) LAExprMacro<GOperandRel, GExprAdd> GOperandRel GExprAdd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandAnd, GExprRel> = (*) GExprRel ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandAnd, GExprRel> = (*) GExprRel GOperandAnd RAExprMacro<GOperandAnd, GExprRel> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandOr, GExprAnd> = (*) GExprAnd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandOr, GExprAnd> = (*) GExprAnd GOperandOr RAExprMacro<GOperandOr, GExprAnd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `">="` we can reduce to a `CommaSeparatedList<GExpr>` but we can also reduce to a `CommaSeparatedList<GExpr>`

/home/prybicki/code/latte/src/latte.lalrpop:108:20: 108:44: Conflict detected

    when in this state:
  (<GExpr> ",")+ = (*) (<GExpr> ",")+ GExpr "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  (<GExpr> ",")+ = (<GExpr> ",")+ (*) GExpr "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  (<GExpr> ",")+ = (*) GExpr "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) (<GExpr> ",")+ ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (<GExpr> ",")+ (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) (<GExpr> ",")+ GExpr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (<GExpr> ",")+ (*) GExpr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) GExpr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GBoolean = (*) "false" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GBoolean = (*) "true" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExpr = (*) GExprOr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAdd = (*) LAExprMacro<GOperandAdd, GExprMul> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAnd = (*) RAExprMacro<GOperandAnd, GExprRel> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) CommaSeparatedList<GExpr> ")" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GBoolean ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GIdent ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GIdent "(" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GInteger ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GString ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) "(" GExprOr ")" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprMul = (*) LAExprMacro<GOperandMul, GExprUnary> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprOr = (*) RAExprMacro<GOperandOr, GExprAnd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprRel = (*) LAExprMacro<GOperandRel, GExprAdd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) "!" GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) "-" GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GIdent = (*) r#"[A-Z,a-z,_\']+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GInteger = (*) r#"[+-]"# r#"[0-9]+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GInteger = (*) r#"[0-9]+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GString = (*) r#"\"([^,\",\\\\]|\\\\\")*\""# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandAdd, GExprMul> = (*) GExprMul ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandAdd, GExprMul> = (*) LAExprMacro<GOperandAdd, GExprMul> GOperandAdd GExprMul ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandMul, GExprUnary> = (*) GExprUnary ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandMul, GExprUnary> = (*) LAExprMacro<GOperandMul, GExprUnary> GOperandMul GExprUnary ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandRel, GExprAdd> = (*) GExprAdd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandRel, GExprAdd> = (*) LAExprMacro<GOperandRel, GExprAdd> GOperandRel GExprAdd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandAnd, GExprRel> = (*) GExprRel ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandAnd, GExprRel> = (*) GExprRel GOperandAnd RAExprMacro<GOperandAnd, GExprRel> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandOr, GExprAnd> = (*) GExprAnd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandOr, GExprAnd> = (*) GExprAnd GOperandOr RAExprMacro<GOperandOr, GExprAnd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `"false"` we can reduce to a `CommaSeparatedList<GExpr>` but we can also reduce to a `CommaSeparatedList<GExpr>`

/home/prybicki/code/latte/src/latte.lalrpop:108:20: 108:44: Conflict detected

    when in this state:
  (<GExpr> ",")+ = (*) (<GExpr> ",")+ GExpr "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  (<GExpr> ",")+ = (<GExpr> ",")+ (*) GExpr "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  (<GExpr> ",")+ = (*) GExpr "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) (<GExpr> ",")+ ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (<GExpr> ",")+ (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) (<GExpr> ",")+ GExpr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (<GExpr> ",")+ (*) GExpr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) GExpr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GBoolean = (*) "false" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GBoolean = (*) "true" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExpr = (*) GExprOr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAdd = (*) LAExprMacro<GOperandAdd, GExprMul> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAnd = (*) RAExprMacro<GOperandAnd, GExprRel> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) CommaSeparatedList<GExpr> ")" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GBoolean ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GIdent ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GIdent "(" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GInteger ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GString ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) "(" GExprOr ")" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprMul = (*) LAExprMacro<GOperandMul, GExprUnary> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprOr = (*) RAExprMacro<GOperandOr, GExprAnd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprRel = (*) LAExprMacro<GOperandRel, GExprAdd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) "!" GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) "-" GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GIdent = (*) r#"[A-Z,a-z,_\']+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GInteger = (*) r#"[+-]"# r#"[0-9]+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GInteger = (*) r#"[0-9]+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GString = (*) r#"\"([^,\",\\\\]|\\\\\")*\""# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandAdd, GExprMul> = (*) GExprMul ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandAdd, GExprMul> = (*) LAExprMacro<GOperandAdd, GExprMul> GOperandAdd GExprMul ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandMul, GExprUnary> = (*) GExprUnary ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandMul, GExprUnary> = (*) LAExprMacro<GOperandMul, GExprUnary> GOperandMul GExprUnary ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandRel, GExprAdd> = (*) GExprAdd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandRel, GExprAdd> = (*) LAExprMacro<GOperandRel, GExprAdd> GOperandRel GExprAdd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandAnd, GExprRel> = (*) GExprRel ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandAnd, GExprRel> = (*) GExprRel GOperandAnd RAExprMacro<GOperandAnd, GExprRel> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandOr, GExprAnd> = (*) GExprAnd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandOr, GExprAnd> = (*) GExprAnd GOperandOr RAExprMacro<GOperandOr, GExprAnd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `"true"` we can reduce to a `CommaSeparatedList<GExpr>` but we can also reduce to a `CommaSeparatedList<GExpr>`

/home/prybicki/code/latte/src/latte.lalrpop:108:20: 108:44: Conflict detected

    when in this state:
  (<GExpr> ",")+ = (*) (<GExpr> ",")+ GExpr "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  (<GExpr> ",")+ = (<GExpr> ",")+ (*) GExpr "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  (<GExpr> ",")+ = (*) GExpr "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) (<GExpr> ",")+ ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (<GExpr> ",")+ (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) (<GExpr> ",")+ GExpr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (<GExpr> ",")+ (*) GExpr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) GExpr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GBoolean = (*) "false" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GBoolean = (*) "true" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExpr = (*) GExprOr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAdd = (*) LAExprMacro<GOperandAdd, GExprMul> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAnd = (*) RAExprMacro<GOperandAnd, GExprRel> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) CommaSeparatedList<GExpr> ")" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GBoolean ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GIdent ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GIdent "(" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GInteger ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GString ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) "(" GExprOr ")" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprMul = (*) LAExprMacro<GOperandMul, GExprUnary> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprOr = (*) RAExprMacro<GOperandOr, GExprAnd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprRel = (*) LAExprMacro<GOperandRel, GExprAdd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) "!" GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) "-" GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GIdent = (*) r#"[A-Z,a-z,_\']+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GInteger = (*) r#"[+-]"# r#"[0-9]+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GInteger = (*) r#"[0-9]+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GString = (*) r#"\"([^,\",\\\\]|\\\\\")*\""# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandAdd, GExprMul> = (*) GExprMul ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandAdd, GExprMul> = (*) LAExprMacro<GOperandAdd, GExprMul> GOperandAdd GExprMul ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandMul, GExprUnary> = (*) GExprUnary ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandMul, GExprUnary> = (*) LAExprMacro<GOperandMul, GExprUnary> GOperandMul GExprUnary ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandRel, GExprAdd> = (*) GExprAdd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandRel, GExprAdd> = (*) LAExprMacro<GOperandRel, GExprAdd> GOperandRel GExprAdd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandAnd, GExprRel> = (*) GExprRel ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandAnd, GExprRel> = (*) GExprRel GOperandAnd RAExprMacro<GOperandAnd, GExprRel> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandOr, GExprAnd> = (*) GExprAnd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandOr, GExprAnd> = (*) GExprAnd GOperandOr RAExprMacro<GOperandOr, GExprAnd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `"||"` we can reduce to a `CommaSeparatedList<GExpr>` but we can also reduce to a `CommaSeparatedList<GExpr>`

/home/prybicki/code/latte/src/latte.lalrpop:108:20: 108:44: Conflict detected

    when in this state:
  (<GExpr> ",")+ = (*) (<GExpr> ",")+ GExpr "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  (<GExpr> ",")+ = (<GExpr> ",")+ (*) GExpr "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  (<GExpr> ",")+ = (*) GExpr "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) (<GExpr> ",")+ ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (<GExpr> ",")+ (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) (<GExpr> ",")+ GExpr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (<GExpr> ",")+ (*) GExpr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) GExpr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GBoolean = (*) "false" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GBoolean = (*) "true" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExpr = (*) GExprOr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAdd = (*) LAExprMacro<GOperandAdd, GExprMul> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAnd = (*) RAExprMacro<GOperandAnd, GExprRel> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) CommaSeparatedList<GExpr> ")" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GBoolean ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GIdent ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GIdent "(" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GInteger ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GString ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) "(" GExprOr ")" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprMul = (*) LAExprMacro<GOperandMul, GExprUnary> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprOr = (*) RAExprMacro<GOperandOr, GExprAnd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprRel = (*) LAExprMacro<GOperandRel, GExprAdd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) "!" GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) "-" GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GIdent = (*) r#"[A-Z,a-z,_\']+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GInteger = (*) r#"[+-]"# r#"[0-9]+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GInteger = (*) r#"[0-9]+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GString = (*) r#"\"([^,\",\\\\]|\\\\\")*\""# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandAdd, GExprMul> = (*) GExprMul ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandAdd, GExprMul> = (*) LAExprMacro<GOperandAdd, GExprMul> GOperandAdd GExprMul ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandMul, GExprUnary> = (*) GExprUnary ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandMul, GExprUnary> = (*) LAExprMacro<GOperandMul, GExprUnary> GOperandMul GExprUnary ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandRel, GExprAdd> = (*) GExprAdd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandRel, GExprAdd> = (*) LAExprMacro<GOperandRel, GExprAdd> GOperandRel GExprAdd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandAnd, GExprRel> = (*) GExprRel ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandAnd, GExprRel> = (*) GExprRel GOperandAnd RAExprMacro<GOperandAnd, GExprRel> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandOr, GExprAnd> = (*) GExprAnd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandOr, GExprAnd> = (*) GExprAnd GOperandOr RAExprMacro<GOperandOr, GExprAnd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `r#"\"([^,\",\\\\]|\\\\\")*\""#` we can reduce to a `CommaSeparatedList<GExpr>` but we can also reduce to a `CommaSeparatedList<GExpr>`

/home/prybicki/code/latte/src/latte.lalrpop:108:20: 108:44: Conflict detected

    when in this state:
  (<GExpr> ",")+ = (*) (<GExpr> ",")+ GExpr "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  (<GExpr> ",")+ = (<GExpr> ",")+ (*) GExpr "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  (<GExpr> ",")+ = (*) GExpr "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) (<GExpr> ",")+ ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (<GExpr> ",")+ (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) (<GExpr> ",")+ GExpr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (<GExpr> ",")+ (*) GExpr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) GExpr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GBoolean = (*) "false" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GBoolean = (*) "true" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExpr = (*) GExprOr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAdd = (*) LAExprMacro<GOperandAdd, GExprMul> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAnd = (*) RAExprMacro<GOperandAnd, GExprRel> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) CommaSeparatedList<GExpr> ")" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GBoolean ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GIdent ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GIdent "(" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GInteger ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GString ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) "(" GExprOr ")" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprMul = (*) LAExprMacro<GOperandMul, GExprUnary> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprOr = (*) RAExprMacro<GOperandOr, GExprAnd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprRel = (*) LAExprMacro<GOperandRel, GExprAdd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) "!" GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) "-" GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GIdent = (*) r#"[A-Z,a-z,_\']+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GInteger = (*) r#"[+-]"# r#"[0-9]+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GInteger = (*) r#"[0-9]+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GString = (*) r#"\"([^,\",\\\\]|\\\\\")*\""# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandAdd, GExprMul> = (*) GExprMul ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandAdd, GExprMul> = (*) LAExprMacro<GOperandAdd, GExprMul> GOperandAdd GExprMul ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandMul, GExprUnary> = (*) GExprUnary ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandMul, GExprUnary> = (*) LAExprMacro<GOperandMul, GExprUnary> GOperandMul GExprUnary ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandRel, GExprAdd> = (*) GExprAdd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandRel, GExprAdd> = (*) LAExprMacro<GOperandRel, GExprAdd> GOperandRel GExprAdd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandAnd, GExprRel> = (*) GExprRel ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandAnd, GExprRel> = (*) GExprRel GOperandAnd RAExprMacro<GOperandAnd, GExprRel> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandOr, GExprAnd> = (*) GExprAnd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandOr, GExprAnd> = (*) GExprAnd GOperandOr RAExprMacro<GOperandOr, GExprAnd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `r#"[+-]"#` we can reduce to a `CommaSeparatedList<GExpr>` but we can also reduce to a `CommaSeparatedList<GExpr>`

/home/prybicki/code/latte/src/latte.lalrpop:108:20: 108:44: Conflict detected

    when in this state:
  (<GExpr> ",")+ = (*) (<GExpr> ",")+ GExpr "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  (<GExpr> ",")+ = (<GExpr> ",")+ (*) GExpr "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  (<GExpr> ",")+ = (*) GExpr "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) (<GExpr> ",")+ ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (<GExpr> ",")+ (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) (<GExpr> ",")+ GExpr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (<GExpr> ",")+ (*) GExpr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) GExpr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GBoolean = (*) "false" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GBoolean = (*) "true" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExpr = (*) GExprOr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAdd = (*) LAExprMacro<GOperandAdd, GExprMul> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAnd = (*) RAExprMacro<GOperandAnd, GExprRel> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) CommaSeparatedList<GExpr> ")" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GBoolean ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GIdent ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GIdent "(" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GInteger ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GString ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) "(" GExprOr ")" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprMul = (*) LAExprMacro<GOperandMul, GExprUnary> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprOr = (*) RAExprMacro<GOperandOr, GExprAnd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprRel = (*) LAExprMacro<GOperandRel, GExprAdd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) "!" GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) "-" GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GIdent = (*) r#"[A-Z,a-z,_\']+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GInteger = (*) r#"[+-]"# r#"[0-9]+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GInteger = (*) r#"[0-9]+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GString = (*) r#"\"([^,\",\\\\]|\\\\\")*\""# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandAdd, GExprMul> = (*) GExprMul ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandAdd, GExprMul> = (*) LAExprMacro<GOperandAdd, GExprMul> GOperandAdd GExprMul ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandMul, GExprUnary> = (*) GExprUnary ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandMul, GExprUnary> = (*) LAExprMacro<GOperandMul, GExprUnary> GOperandMul GExprUnary ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandRel, GExprAdd> = (*) GExprAdd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandRel, GExprAdd> = (*) LAExprMacro<GOperandRel, GExprAdd> GOperandRel GExprAdd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandAnd, GExprRel> = (*) GExprRel ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandAnd, GExprRel> = (*) GExprRel GOperandAnd RAExprMacro<GOperandAnd, GExprRel> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandOr, GExprAnd> = (*) GExprAnd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandOr, GExprAnd> = (*) GExprAnd GOperandOr RAExprMacro<GOperandOr, GExprAnd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `r#"[0-9]+"#` we can reduce to a `CommaSeparatedList<GExpr>` but we can also reduce to a `CommaSeparatedList<GExpr>`

/home/prybicki/code/latte/src/latte.lalrpop:108:20: 108:44: Conflict detected

    when in this state:
  (<GExpr> ",")+ = (*) (<GExpr> ",")+ GExpr "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  (<GExpr> ",")+ = (<GExpr> ",")+ (*) GExpr "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  (<GExpr> ",")+ = (*) GExpr "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) (<GExpr> ",")+ ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (<GExpr> ",")+ (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) (<GExpr> ",")+ GExpr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (<GExpr> ",")+ (*) GExpr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) GExpr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GBoolean = (*) "false" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GBoolean = (*) "true" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExpr = (*) GExprOr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAdd = (*) LAExprMacro<GOperandAdd, GExprMul> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAnd = (*) RAExprMacro<GOperandAnd, GExprRel> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) CommaSeparatedList<GExpr> ")" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GBoolean ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GIdent ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GIdent "(" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GInteger ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GString ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) "(" GExprOr ")" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprMul = (*) LAExprMacro<GOperandMul, GExprUnary> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprOr = (*) RAExprMacro<GOperandOr, GExprAnd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprRel = (*) LAExprMacro<GOperandRel, GExprAdd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) "!" GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) "-" GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GIdent = (*) r#"[A-Z,a-z,_\']+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GInteger = (*) r#"[+-]"# r#"[0-9]+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GInteger = (*) r#"[0-9]+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GString = (*) r#"\"([^,\",\\\\]|\\\\\")*\""# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandAdd, GExprMul> = (*) GExprMul ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandAdd, GExprMul> = (*) LAExprMacro<GOperandAdd, GExprMul> GOperandAdd GExprMul ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandMul, GExprUnary> = (*) GExprUnary ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandMul, GExprUnary> = (*) LAExprMacro<GOperandMul, GExprUnary> GOperandMul GExprUnary ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandRel, GExprAdd> = (*) GExprAdd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandRel, GExprAdd> = (*) LAExprMacro<GOperandRel, GExprAdd> GOperandRel GExprAdd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandAnd, GExprRel> = (*) GExprRel ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandAnd, GExprRel> = (*) GExprRel GOperandAnd RAExprMacro<GOperandAnd, GExprRel> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandOr, GExprAnd> = (*) GExprAnd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandOr, GExprAnd> = (*) GExprAnd GOperandOr RAExprMacro<GOperandOr, GExprAnd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `r#"[A-Z,a-z,_\']+"#` we can reduce to a `CommaSeparatedList<GExpr>` but we can also reduce to a `CommaSeparatedList<GExpr>`

/home/prybicki/code/latte/src/latte.lalrpop:108:20: 108:44: Conflict detected

    when in this state:
  (<GExpr> ",")+ = (*) (<GExpr> ",")+ GExpr "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  (<GExpr> ",")+ = (<GExpr> ",")+ (*) GExpr "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  (<GExpr> ",")+ = (*) GExpr "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) (<GExpr> ",")+ ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (<GExpr> ",")+ (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) (<GExpr> ",")+ GExpr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (<GExpr> ",")+ (*) GExpr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) GExpr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GBoolean = (*) "false" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GBoolean = (*) "true" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExpr = (*) GExprOr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAdd = (*) LAExprMacro<GOperandAdd, GExprMul> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAnd = (*) RAExprMacro<GOperandAnd, GExprRel> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) CommaSeparatedList<GExpr> ")" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GBoolean ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GIdent ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GIdent "(" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GInteger ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GString ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) "(" GExprOr ")" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprMul = (*) LAExprMacro<GOperandMul, GExprUnary> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprOr = (*) RAExprMacro<GOperandOr, GExprAnd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprRel = (*) LAExprMacro<GOperandRel, GExprAdd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) "!" GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) "-" GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GIdent = (*) r#"[A-Z,a-z,_\']+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GInteger = (*) r#"[+-]"# r#"[0-9]+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GInteger = (*) r#"[0-9]+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GString = (*) r#"\"([^,\",\\\\]|\\\\\")*\""# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandAdd, GExprMul> = (*) GExprMul ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandAdd, GExprMul> = (*) LAExprMacro<GOperandAdd, GExprMul> GOperandAdd GExprMul ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandMul, GExprUnary> = (*) GExprUnary ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandMul, GExprUnary> = (*) LAExprMacro<GOperandMul, GExprUnary> GOperandMul GExprUnary ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandRel, GExprAdd> = (*) GExprAdd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandRel, GExprAdd> = (*) LAExprMacro<GOperandRel, GExprAdd> GOperandRel GExprAdd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandAnd, GExprRel> = (*) GExprRel ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandAnd, GExprRel> = (*) GExprRel GOperandAnd RAExprMacro<GOperandAnd, GExprRel> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandOr, GExprAnd> = (*) GExprAnd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandOr, GExprAnd> = (*) GExprAnd GOperandOr RAExprMacro<GOperandOr, GExprAnd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `EOF` we can reduce to a `CommaSeparatedList<GExpr>` but we can also reduce to a `CommaSeparatedList<GExpr>`

/home/prybicki/code/latte/src/latte.lalrpop:108:20: 108:44: Conflict detected

    when in this state:
  (<GExpr> ",")+ = GExpr (*) "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = GExpr (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  __GExpr = GExpr (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `","` we can reduce to a `CommaSeparatedList<GExpr>` but we can also shift

/home/prybicki/code/latte/src/latte.lalrpop:90:5: 90:9: Conflict detected

    when in this state:
  (<GExpr> ",")+ = GExpr (*) "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = GExpr (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  __GExpr = GExpr (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `","` we can reduce to a `__GExpr` but we can also shift

/home/prybicki/code/latte/src/latte.lalrpop:108:20: 108:44: Conflict detected

    when in this state:
  (<GExpr> ",")+ = GExpr (*) "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = GExpr (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  __GExpr = GExpr (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `"!"` we can reduce to a `CommaSeparatedList<GExpr>` but we can also reduce to a `__GExpr`

/home/prybicki/code/latte/src/latte.lalrpop:108:20: 108:44: Conflict detected

    when in this state:
  (<GExpr> ",")+ = GExpr (*) "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = GExpr (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  __GExpr = GExpr (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `"%"` we can reduce to a `CommaSeparatedList<GExpr>` but we can also reduce to a `__GExpr`

/home/prybicki/code/latte/src/latte.lalrpop:108:20: 108:44: Conflict detected

    when in this state:
  (<GExpr> ",")+ = GExpr (*) "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = GExpr (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  __GExpr = GExpr (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `"&&"` we can reduce to a `CommaSeparatedList<GExpr>` but we can also reduce to a `__GExpr`

/home/prybicki/code/latte/src/latte.lalrpop:108:20: 108:44: Conflict detected

    when in this state:
  (<GExpr> ",")+ = GExpr (*) "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = GExpr (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  __GExpr = GExpr (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `"("` we can reduce to a `CommaSeparatedList<GExpr>` but we can also reduce to a `__GExpr`

/home/prybicki/code/latte/src/latte.lalrpop:108:20: 108:44: Conflict detected

    when in this state:
  (<GExpr> ",")+ = GExpr (*) "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = GExpr (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  __GExpr = GExpr (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `")"` we can reduce to a `CommaSeparatedList<GExpr>` but we can also reduce to a `__GExpr`

/home/prybicki/code/latte/src/latte.lalrpop:108:20: 108:44: Conflict detected

    when in this state:
  (<GExpr> ",")+ = GExpr (*) "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = GExpr (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  __GExpr = GExpr (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `"*"` we can reduce to a `CommaSeparatedList<GExpr>` but we can also reduce to a `__GExpr`

/home/prybicki/code/latte/src/latte.lalrpop:108:20: 108:44: Conflict detected

    when in this state:
  (<GExpr> ",")+ = GExpr (*) "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = GExpr (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  __GExpr = GExpr (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `"+"` we can reduce to a `CommaSeparatedList<GExpr>` but we can also reduce to a `__GExpr`

/home/prybicki/code/latte/src/latte.lalrpop:108:20: 108:44: Conflict detected

    when in this state:
  (<GExpr> ",")+ = GExpr (*) "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = GExpr (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  __GExpr = GExpr (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `","` we can reduce to a `CommaSeparatedList<GExpr>` but we can also reduce to a `__GExpr`

/home/prybicki/code/latte/src/latte.lalrpop:108:20: 108:44: Conflict detected

    when in this state:
  (<GExpr> ",")+ = GExpr (*) "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = GExpr (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  __GExpr = GExpr (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `"-"` we can reduce to a `CommaSeparatedList<GExpr>` but we can also reduce to a `__GExpr`

/home/prybicki/code/latte/src/latte.lalrpop:108:20: 108:44: Conflict detected

    when in this state:
  (<GExpr> ",")+ = GExpr (*) "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = GExpr (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  __GExpr = GExpr (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `"/"` we can reduce to a `CommaSeparatedList<GExpr>` but we can also reduce to a `__GExpr`

/home/prybicki/code/latte/src/latte.lalrpop:108:20: 108:44: Conflict detected

    when in this state:
  (<GExpr> ",")+ = GExpr (*) "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = GExpr (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  __GExpr = GExpr (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `"<"` we can reduce to a `CommaSeparatedList<GExpr>` but we can also reduce to a `__GExpr`

/home/prybicki/code/latte/src/latte.lalrpop:108:20: 108:44: Conflict detected

    when in this state:
  (<GExpr> ",")+ = GExpr (*) "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = GExpr (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  __GExpr = GExpr (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `"<="` we can reduce to a `CommaSeparatedList<GExpr>` but we can also reduce to a `__GExpr`

/home/prybicki/code/latte/src/latte.lalrpop:108:20: 108:44: Conflict detected

    when in this state:
  (<GExpr> ",")+ = GExpr (*) "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = GExpr (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  __GExpr = GExpr (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `">"` we can reduce to a `CommaSeparatedList<GExpr>` but we can also reduce to a `__GExpr`

/home/prybicki/code/latte/src/latte.lalrpop:108:20: 108:44: Conflict detected

    when in this state:
  (<GExpr> ",")+ = GExpr (*) "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = GExpr (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  __GExpr = GExpr (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `">="` we can reduce to a `CommaSeparatedList<GExpr>` but we can also reduce to a `__GExpr`

/home/prybicki/code/latte/src/latte.lalrpop:108:20: 108:44: Conflict detected

    when in this state:
  (<GExpr> ",")+ = GExpr (*) "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = GExpr (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  __GExpr = GExpr (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `"false"` we can reduce to a `CommaSeparatedList<GExpr>` but we can also reduce to a `__GExpr`

/home/prybicki/code/latte/src/latte.lalrpop:108:20: 108:44: Conflict detected

    when in this state:
  (<GExpr> ",")+ = GExpr (*) "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = GExpr (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  __GExpr = GExpr (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `"true"` we can reduce to a `CommaSeparatedList<GExpr>` but we can also reduce to a `__GExpr`

/home/prybicki/code/latte/src/latte.lalrpop:108:20: 108:44: Conflict detected

    when in this state:
  (<GExpr> ",")+ = GExpr (*) "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = GExpr (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  __GExpr = GExpr (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `"||"` we can reduce to a `CommaSeparatedList<GExpr>` but we can also reduce to a `__GExpr`

/home/prybicki/code/latte/src/latte.lalrpop:108:20: 108:44: Conflict detected

    when in this state:
  (<GExpr> ",")+ = GExpr (*) "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = GExpr (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  __GExpr = GExpr (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `r#"\"([^,\",\\\\]|\\\\\")*\""#` we can reduce to a `CommaSeparatedList<GExpr>` but we can also reduce to a `__GExpr`

/home/prybicki/code/latte/src/latte.lalrpop:108:20: 108:44: Conflict detected

    when in this state:
  (<GExpr> ",")+ = GExpr (*) "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = GExpr (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  __GExpr = GExpr (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `r#"[+-]"#` we can reduce to a `CommaSeparatedList<GExpr>` but we can also reduce to a `__GExpr`

/home/prybicki/code/latte/src/latte.lalrpop:108:20: 108:44: Conflict detected

    when in this state:
  (<GExpr> ",")+ = GExpr (*) "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = GExpr (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  __GExpr = GExpr (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `r#"[0-9]+"#` we can reduce to a `CommaSeparatedList<GExpr>` but we can also reduce to a `__GExpr`

/home/prybicki/code/latte/src/latte.lalrpop:108:20: 108:44: Conflict detected

    when in this state:
  (<GExpr> ",")+ = GExpr (*) "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = GExpr (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  __GExpr = GExpr (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `r#"[A-Z,a-z,_\']+"#` we can reduce to a `CommaSeparatedList<GExpr>` but we can also reduce to a `__GExpr`

/home/prybicki/code/latte/src/latte.lalrpop:108:20: 108:44: Conflict detected

    when in this state:
  (<GExpr> ",")+ = GExpr (*) "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = GExpr (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  __GExpr = GExpr (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `EOF` we can reduce to a `CommaSeparatedList<GExpr>` but we can also reduce to a `__GExpr`

/home/prybicki/code/latte/src/latte.lalrpop:92:12: 92:44: Conflict detected

    when in this state:
  GOperandOr = (*) "||" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandOr, GExprAnd> = GExprAnd (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandOr, GExprAnd> = GExprAnd (*) GOperandOr RAExprMacro<GOperandOr, GExprAnd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `"||"` we can reduce to a `RAExprMacro<GOperandOr, GExprAnd>` but we can also shift

/home/prybicki/code/latte/src/latte.lalrpop:93:12: 93:45: Conflict detected

    when in this state:
  GOperandAnd = (*) "&&" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandAnd, GExprRel> = GExprRel (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandAnd, GExprRel> = GExprRel (*) GOperandAnd RAExprMacro<GOperandAnd, GExprRel> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `"&&"` we can reduce to a `RAExprMacro<GOperandAnd, GExprRel>` but we can also shift

/home/prybicki/code/latte/src/latte.lalrpop:109:5: 109:37: Conflict detected

    when in this state:
  GExprAtom = GIdent (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = GIdent (*) "(" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `"("` we can reduce to a `GExprAtom` but we can also shift

/home/prybicki/code/latte/src/latte.lalrpop:95:12: 95:45: Conflict detected

    when in this state:
  GExprAdd = LAExprMacro<GOperandAdd, GExprMul> (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GOperandAdd = (*) "+" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GOperandAdd = (*) "-" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandAdd, GExprMul> = LAExprMacro<GOperandAdd, GExprMul> (*) GOperandAdd GExprMul ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `"+"` we can reduce to a `GExprAdd` but we can also shift

/home/prybicki/code/latte/src/latte.lalrpop:95:12: 95:45: Conflict detected

    when in this state:
  GExprAdd = LAExprMacro<GOperandAdd, GExprMul> (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GOperandAdd = (*) "+" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GOperandAdd = (*) "-" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandAdd, GExprMul> = LAExprMacro<GOperandAdd, GExprMul> (*) GOperandAdd GExprMul ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `"-"` we can reduce to a `GExprAdd` but we can also shift

/home/prybicki/code/latte/src/latte.lalrpop:96:12: 96:47: Conflict detected

    when in this state:
  GExprMul = LAExprMacro<GOperandMul, GExprUnary> (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GOperandMul = (*) "%" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GOperandMul = (*) "*" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GOperandMul = (*) "/" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandMul, GExprUnary> = LAExprMacro<GOperandMul, GExprUnary> (*) GOperandMul GExprUnary ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `"%"` we can reduce to a `GExprMul` but we can also shift

/home/prybicki/code/latte/src/latte.lalrpop:96:12: 96:47: Conflict detected

    when in this state:
  GExprMul = LAExprMacro<GOperandMul, GExprUnary> (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GOperandMul = (*) "%" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GOperandMul = (*) "*" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GOperandMul = (*) "/" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandMul, GExprUnary> = LAExprMacro<GOperandMul, GExprUnary> (*) GOperandMul GExprUnary ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `"*"` we can reduce to a `GExprMul` but we can also shift

/home/prybicki/code/latte/src/latte.lalrpop:96:12: 96:47: Conflict detected

    when in this state:
  GExprMul = LAExprMacro<GOperandMul, GExprUnary> (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GOperandMul = (*) "%" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GOperandMul = (*) "*" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GOperandMul = (*) "/" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandMul, GExprUnary> = LAExprMacro<GOperandMul, GExprUnary> (*) GOperandMul GExprUnary ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `"/"` we can reduce to a `GExprMul` but we can also shift

/home/prybicki/code/latte/src/latte.lalrpop:94:12: 94:45: Conflict detected

    when in this state:
  GExprRel = LAExprMacro<GOperandRel, GExprAdd> (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GOperandRel = (*) "<" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GOperandRel = (*) "<=" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GOperandRel = (*) ">" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GOperandRel = (*) ">=" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandRel, GExprAdd> = LAExprMacro<GOperandRel, GExprAdd> (*) GOperandRel GExprAdd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `"<"` we can reduce to a `GExprRel` but we can also shift

/home/prybicki/code/latte/src/latte.lalrpop:94:12: 94:45: Conflict detected

    when in this state:
  GExprRel = LAExprMacro<GOperandRel, GExprAdd> (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GOperandRel = (*) "<" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GOperandRel = (*) "<=" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GOperandRel = (*) ">" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GOperandRel = (*) ">=" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandRel, GExprAdd> = LAExprMacro<GOperandRel, GExprAdd> (*) GOperandRel GExprAdd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `"<="` we can reduce to a `GExprRel` but we can also shift

/home/prybicki/code/latte/src/latte.lalrpop:94:12: 94:45: Conflict detected

    when in this state:
  GExprRel = LAExprMacro<GOperandRel, GExprAdd> (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GOperandRel = (*) "<" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GOperandRel = (*) "<=" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GOperandRel = (*) ">" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GOperandRel = (*) ">=" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandRel, GExprAdd> = LAExprMacro<GOperandRel, GExprAdd> (*) GOperandRel GExprAdd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `">"` we can reduce to a `GExprRel` but we can also shift

/home/prybicki/code/latte/src/latte.lalrpop:94:12: 94:45: Conflict detected

    when in this state:
  GExprRel = LAExprMacro<GOperandRel, GExprAdd> (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GOperandRel = (*) "<" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GOperandRel = (*) "<=" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GOperandRel = (*) ">" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GOperandRel = (*) ">=" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandRel, GExprAdd> = LAExprMacro<GOperandRel, GExprAdd> (*) GOperandRel GExprAdd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `">="` we can reduce to a `GExprRel` but we can also shift

/home/prybicki/code/latte/src/latte.lalrpop:108:20: 108:44: Conflict detected

    when in this state:
  (<GExpr> ",")+ = (*) (<GExpr> ",")+ GExpr "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  (<GExpr> ",")+ = (*) GExpr "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) (<GExpr> ",")+ ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) (<GExpr> ",")+ GExpr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) GExpr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GBoolean = (*) "false" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GBoolean = (*) "true" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExpr = (*) GExprOr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAdd = (*) LAExprMacro<GOperandAdd, GExprMul> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAnd = (*) RAExprMacro<GOperandAnd, GExprRel> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) CommaSeparatedList<GExpr> ")" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GBoolean ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GIdent ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GIdent "(" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GInteger ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GString ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) "(" GExprOr ")" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprMul = (*) LAExprMacro<GOperandMul, GExprUnary> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprOr = (*) RAExprMacro<GOperandOr, GExprAnd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprRel = (*) LAExprMacro<GOperandRel, GExprAdd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) "!" GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = "!" (*) GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) "-" GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GIdent = (*) r#"[A-Z,a-z,_\']+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GInteger = (*) r#"[+-]"# r#"[0-9]+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GInteger = (*) r#"[0-9]+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GString = (*) r#"\"([^,\",\\\\]|\\\\\")*\""# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandAdd, GExprMul> = (*) GExprMul ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandAdd, GExprMul> = (*) LAExprMacro<GOperandAdd, GExprMul> GOperandAdd GExprMul ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandMul, GExprUnary> = (*) GExprUnary ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandMul, GExprUnary> = (*) LAExprMacro<GOperandMul, GExprUnary> GOperandMul GExprUnary ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandRel, GExprAdd> = (*) GExprAdd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandRel, GExprAdd> = (*) LAExprMacro<GOperandRel, GExprAdd> GOperandRel GExprAdd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandAnd, GExprRel> = (*) GExprRel ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandAnd, GExprRel> = (*) GExprRel GOperandAnd RAExprMacro<GOperandAnd, GExprRel> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandOr, GExprAnd> = (*) GExprAnd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandOr, GExprAnd> = (*) GExprAnd GOperandOr RAExprMacro<GOperandOr, GExprAnd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `"!"` we can reduce to a `CommaSeparatedList<GExpr>` but we can also shift

/home/prybicki/code/latte/src/latte.lalrpop:108:20: 108:44: Conflict detected

    when in this state:
  (<GExpr> ",")+ = (*) (<GExpr> ",")+ GExpr "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  (<GExpr> ",")+ = (*) GExpr "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) (<GExpr> ",")+ ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) (<GExpr> ",")+ GExpr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) GExpr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GBoolean = (*) "false" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GBoolean = (*) "true" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExpr = (*) GExprOr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAdd = (*) LAExprMacro<GOperandAdd, GExprMul> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAnd = (*) RAExprMacro<GOperandAnd, GExprRel> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) CommaSeparatedList<GExpr> ")" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GBoolean ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GIdent ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GIdent "(" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GInteger ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GString ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) "(" GExprOr ")" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprMul = (*) LAExprMacro<GOperandMul, GExprUnary> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprOr = (*) RAExprMacro<GOperandOr, GExprAnd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprRel = (*) LAExprMacro<GOperandRel, GExprAdd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) "!" GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = "!" (*) GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) "-" GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GIdent = (*) r#"[A-Z,a-z,_\']+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GInteger = (*) r#"[+-]"# r#"[0-9]+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GInteger = (*) r#"[0-9]+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GString = (*) r#"\"([^,\",\\\\]|\\\\\")*\""# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandAdd, GExprMul> = (*) GExprMul ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandAdd, GExprMul> = (*) LAExprMacro<GOperandAdd, GExprMul> GOperandAdd GExprMul ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandMul, GExprUnary> = (*) GExprUnary ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandMul, GExprUnary> = (*) LAExprMacro<GOperandMul, GExprUnary> GOperandMul GExprUnary ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandRel, GExprAdd> = (*) GExprAdd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandRel, GExprAdd> = (*) LAExprMacro<GOperandRel, GExprAdd> GOperandRel GExprAdd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandAnd, GExprRel> = (*) GExprRel ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandAnd, GExprRel> = (*) GExprRel GOperandAnd RAExprMacro<GOperandAnd, GExprRel> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandOr, GExprAnd> = (*) GExprAnd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandOr, GExprAnd> = (*) GExprAnd GOperandOr RAExprMacro<GOperandOr, GExprAnd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `"("` we can reduce to a `CommaSeparatedList<GExpr>` but we can also shift

/home/prybicki/code/latte/src/latte.lalrpop:108:20: 108:44: Conflict detected

    when in this state:
  (<GExpr> ",")+ = (*) (<GExpr> ",")+ GExpr "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  (<GExpr> ",")+ = (*) GExpr "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) (<GExpr> ",")+ ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) (<GExpr> ",")+ GExpr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) GExpr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GBoolean = (*) "false" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GBoolean = (*) "true" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExpr = (*) GExprOr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAdd = (*) LAExprMacro<GOperandAdd, GExprMul> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAnd = (*) RAExprMacro<GOperandAnd, GExprRel> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) CommaSeparatedList<GExpr> ")" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GBoolean ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GIdent ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GIdent "(" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GInteger ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GString ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) "(" GExprOr ")" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprMul = (*) LAExprMacro<GOperandMul, GExprUnary> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprOr = (*) RAExprMacro<GOperandOr, GExprAnd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprRel = (*) LAExprMacro<GOperandRel, GExprAdd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) "!" GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = "!" (*) GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) "-" GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GIdent = (*) r#"[A-Z,a-z,_\']+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GInteger = (*) r#"[+-]"# r#"[0-9]+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GInteger = (*) r#"[0-9]+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GString = (*) r#"\"([^,\",\\\\]|\\\\\")*\""# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandAdd, GExprMul> = (*) GExprMul ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandAdd, GExprMul> = (*) LAExprMacro<GOperandAdd, GExprMul> GOperandAdd GExprMul ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandMul, GExprUnary> = (*) GExprUnary ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandMul, GExprUnary> = (*) LAExprMacro<GOperandMul, GExprUnary> GOperandMul GExprUnary ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandRel, GExprAdd> = (*) GExprAdd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandRel, GExprAdd> = (*) LAExprMacro<GOperandRel, GExprAdd> GOperandRel GExprAdd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandAnd, GExprRel> = (*) GExprRel ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandAnd, GExprRel> = (*) GExprRel GOperandAnd RAExprMacro<GOperandAnd, GExprRel> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandOr, GExprAnd> = (*) GExprAnd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandOr, GExprAnd> = (*) GExprAnd GOperandOr RAExprMacro<GOperandOr, GExprAnd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `"-"` we can reduce to a `CommaSeparatedList<GExpr>` but we can also shift

/home/prybicki/code/latte/src/latte.lalrpop:108:20: 108:44: Conflict detected

    when in this state:
  (<GExpr> ",")+ = (*) (<GExpr> ",")+ GExpr "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  (<GExpr> ",")+ = (*) GExpr "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) (<GExpr> ",")+ ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) (<GExpr> ",")+ GExpr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) GExpr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GBoolean = (*) "false" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GBoolean = (*) "true" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExpr = (*) GExprOr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAdd = (*) LAExprMacro<GOperandAdd, GExprMul> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAnd = (*) RAExprMacro<GOperandAnd, GExprRel> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) CommaSeparatedList<GExpr> ")" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GBoolean ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GIdent ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GIdent "(" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GInteger ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GString ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) "(" GExprOr ")" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprMul = (*) LAExprMacro<GOperandMul, GExprUnary> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprOr = (*) RAExprMacro<GOperandOr, GExprAnd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprRel = (*) LAExprMacro<GOperandRel, GExprAdd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) "!" GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = "!" (*) GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) "-" GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GIdent = (*) r#"[A-Z,a-z,_\']+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GInteger = (*) r#"[+-]"# r#"[0-9]+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GInteger = (*) r#"[0-9]+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GString = (*) r#"\"([^,\",\\\\]|\\\\\")*\""# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandAdd, GExprMul> = (*) GExprMul ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandAdd, GExprMul> = (*) LAExprMacro<GOperandAdd, GExprMul> GOperandAdd GExprMul ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandMul, GExprUnary> = (*) GExprUnary ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandMul, GExprUnary> = (*) LAExprMacro<GOperandMul, GExprUnary> GOperandMul GExprUnary ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandRel, GExprAdd> = (*) GExprAdd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandRel, GExprAdd> = (*) LAExprMacro<GOperandRel, GExprAdd> GOperandRel GExprAdd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandAnd, GExprRel> = (*) GExprRel ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandAnd, GExprRel> = (*) GExprRel GOperandAnd RAExprMacro<GOperandAnd, GExprRel> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandOr, GExprAnd> = (*) GExprAnd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandOr, GExprAnd> = (*) GExprAnd GOperandOr RAExprMacro<GOperandOr, GExprAnd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `"false"` we can reduce to a `CommaSeparatedList<GExpr>` but we can also shift

/home/prybicki/code/latte/src/latte.lalrpop:108:20: 108:44: Conflict detected

    when in this state:
  (<GExpr> ",")+ = (*) (<GExpr> ",")+ GExpr "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  (<GExpr> ",")+ = (*) GExpr "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) (<GExpr> ",")+ ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) (<GExpr> ",")+ GExpr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) GExpr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GBoolean = (*) "false" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GBoolean = (*) "true" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExpr = (*) GExprOr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAdd = (*) LAExprMacro<GOperandAdd, GExprMul> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAnd = (*) RAExprMacro<GOperandAnd, GExprRel> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) CommaSeparatedList<GExpr> ")" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GBoolean ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GIdent ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GIdent "(" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GInteger ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GString ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) "(" GExprOr ")" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprMul = (*) LAExprMacro<GOperandMul, GExprUnary> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprOr = (*) RAExprMacro<GOperandOr, GExprAnd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprRel = (*) LAExprMacro<GOperandRel, GExprAdd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) "!" GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = "!" (*) GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) "-" GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GIdent = (*) r#"[A-Z,a-z,_\']+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GInteger = (*) r#"[+-]"# r#"[0-9]+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GInteger = (*) r#"[0-9]+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GString = (*) r#"\"([^,\",\\\\]|\\\\\")*\""# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandAdd, GExprMul> = (*) GExprMul ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandAdd, GExprMul> = (*) LAExprMacro<GOperandAdd, GExprMul> GOperandAdd GExprMul ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandMul, GExprUnary> = (*) GExprUnary ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandMul, GExprUnary> = (*) LAExprMacro<GOperandMul, GExprUnary> GOperandMul GExprUnary ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandRel, GExprAdd> = (*) GExprAdd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandRel, GExprAdd> = (*) LAExprMacro<GOperandRel, GExprAdd> GOperandRel GExprAdd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandAnd, GExprRel> = (*) GExprRel ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandAnd, GExprRel> = (*) GExprRel GOperandAnd RAExprMacro<GOperandAnd, GExprRel> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandOr, GExprAnd> = (*) GExprAnd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandOr, GExprAnd> = (*) GExprAnd GOperandOr RAExprMacro<GOperandOr, GExprAnd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `"true"` we can reduce to a `CommaSeparatedList<GExpr>` but we can also shift

/home/prybicki/code/latte/src/latte.lalrpop:108:20: 108:44: Conflict detected

    when in this state:
  (<GExpr> ",")+ = (*) (<GExpr> ",")+ GExpr "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  (<GExpr> ",")+ = (*) GExpr "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) (<GExpr> ",")+ ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) (<GExpr> ",")+ GExpr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) GExpr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GBoolean = (*) "false" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GBoolean = (*) "true" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExpr = (*) GExprOr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAdd = (*) LAExprMacro<GOperandAdd, GExprMul> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAnd = (*) RAExprMacro<GOperandAnd, GExprRel> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) CommaSeparatedList<GExpr> ")" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GBoolean ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GIdent ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GIdent "(" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GInteger ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GString ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) "(" GExprOr ")" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprMul = (*) LAExprMacro<GOperandMul, GExprUnary> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprOr = (*) RAExprMacro<GOperandOr, GExprAnd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprRel = (*) LAExprMacro<GOperandRel, GExprAdd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) "!" GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = "!" (*) GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) "-" GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GIdent = (*) r#"[A-Z,a-z,_\']+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GInteger = (*) r#"[+-]"# r#"[0-9]+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GInteger = (*) r#"[0-9]+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GString = (*) r#"\"([^,\",\\\\]|\\\\\")*\""# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandAdd, GExprMul> = (*) GExprMul ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandAdd, GExprMul> = (*) LAExprMacro<GOperandAdd, GExprMul> GOperandAdd GExprMul ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandMul, GExprUnary> = (*) GExprUnary ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandMul, GExprUnary> = (*) LAExprMacro<GOperandMul, GExprUnary> GOperandMul GExprUnary ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandRel, GExprAdd> = (*) GExprAdd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandRel, GExprAdd> = (*) LAExprMacro<GOperandRel, GExprAdd> GOperandRel GExprAdd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandAnd, GExprRel> = (*) GExprRel ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandAnd, GExprRel> = (*) GExprRel GOperandAnd RAExprMacro<GOperandAnd, GExprRel> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandOr, GExprAnd> = (*) GExprAnd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandOr, GExprAnd> = (*) GExprAnd GOperandOr RAExprMacro<GOperandOr, GExprAnd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `r#"\"([^,\",\\\\]|\\\\\")*\""#` we can reduce to a `CommaSeparatedList<GExpr>` but we can also shift

/home/prybicki/code/latte/src/latte.lalrpop:108:20: 108:44: Conflict detected

    when in this state:
  (<GExpr> ",")+ = (*) (<GExpr> ",")+ GExpr "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  (<GExpr> ",")+ = (*) GExpr "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) (<GExpr> ",")+ ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) (<GExpr> ",")+ GExpr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) GExpr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GBoolean = (*) "false" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GBoolean = (*) "true" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExpr = (*) GExprOr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAdd = (*) LAExprMacro<GOperandAdd, GExprMul> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAnd = (*) RAExprMacro<GOperandAnd, GExprRel> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) CommaSeparatedList<GExpr> ")" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GBoolean ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GIdent ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GIdent "(" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GInteger ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GString ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) "(" GExprOr ")" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprMul = (*) LAExprMacro<GOperandMul, GExprUnary> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprOr = (*) RAExprMacro<GOperandOr, GExprAnd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprRel = (*) LAExprMacro<GOperandRel, GExprAdd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) "!" GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = "!" (*) GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) "-" GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GIdent = (*) r#"[A-Z,a-z,_\']+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GInteger = (*) r#"[+-]"# r#"[0-9]+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GInteger = (*) r#"[0-9]+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GString = (*) r#"\"([^,\",\\\\]|\\\\\")*\""# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandAdd, GExprMul> = (*) GExprMul ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandAdd, GExprMul> = (*) LAExprMacro<GOperandAdd, GExprMul> GOperandAdd GExprMul ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandMul, GExprUnary> = (*) GExprUnary ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandMul, GExprUnary> = (*) LAExprMacro<GOperandMul, GExprUnary> GOperandMul GExprUnary ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandRel, GExprAdd> = (*) GExprAdd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandRel, GExprAdd> = (*) LAExprMacro<GOperandRel, GExprAdd> GOperandRel GExprAdd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandAnd, GExprRel> = (*) GExprRel ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandAnd, GExprRel> = (*) GExprRel GOperandAnd RAExprMacro<GOperandAnd, GExprRel> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandOr, GExprAnd> = (*) GExprAnd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandOr, GExprAnd> = (*) GExprAnd GOperandOr RAExprMacro<GOperandOr, GExprAnd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `r#"[+-]"#` we can reduce to a `CommaSeparatedList<GExpr>` but we can also shift

/home/prybicki/code/latte/src/latte.lalrpop:108:20: 108:44: Conflict detected

    when in this state:
  (<GExpr> ",")+ = (*) (<GExpr> ",")+ GExpr "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  (<GExpr> ",")+ = (*) GExpr "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) (<GExpr> ",")+ ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) (<GExpr> ",")+ GExpr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) GExpr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GBoolean = (*) "false" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GBoolean = (*) "true" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExpr = (*) GExprOr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAdd = (*) LAExprMacro<GOperandAdd, GExprMul> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAnd = (*) RAExprMacro<GOperandAnd, GExprRel> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) CommaSeparatedList<GExpr> ")" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GBoolean ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GIdent ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GIdent "(" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GInteger ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GString ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) "(" GExprOr ")" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprMul = (*) LAExprMacro<GOperandMul, GExprUnary> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprOr = (*) RAExprMacro<GOperandOr, GExprAnd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprRel = (*) LAExprMacro<GOperandRel, GExprAdd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) "!" GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = "!" (*) GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) "-" GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GIdent = (*) r#"[A-Z,a-z,_\']+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GInteger = (*) r#"[+-]"# r#"[0-9]+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GInteger = (*) r#"[0-9]+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GString = (*) r#"\"([^,\",\\\\]|\\\\\")*\""# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandAdd, GExprMul> = (*) GExprMul ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandAdd, GExprMul> = (*) LAExprMacro<GOperandAdd, GExprMul> GOperandAdd GExprMul ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandMul, GExprUnary> = (*) GExprUnary ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandMul, GExprUnary> = (*) LAExprMacro<GOperandMul, GExprUnary> GOperandMul GExprUnary ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandRel, GExprAdd> = (*) GExprAdd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandRel, GExprAdd> = (*) LAExprMacro<GOperandRel, GExprAdd> GOperandRel GExprAdd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandAnd, GExprRel> = (*) GExprRel ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandAnd, GExprRel> = (*) GExprRel GOperandAnd RAExprMacro<GOperandAnd, GExprRel> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandOr, GExprAnd> = (*) GExprAnd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandOr, GExprAnd> = (*) GExprAnd GOperandOr RAExprMacro<GOperandOr, GExprAnd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `r#"[0-9]+"#` we can reduce to a `CommaSeparatedList<GExpr>` but we can also shift

/home/prybicki/code/latte/src/latte.lalrpop:108:20: 108:44: Conflict detected

    when in this state:
  (<GExpr> ",")+ = (*) (<GExpr> ",")+ GExpr "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  (<GExpr> ",")+ = (*) GExpr "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) (<GExpr> ",")+ ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) (<GExpr> ",")+ GExpr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) GExpr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GBoolean = (*) "false" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GBoolean = (*) "true" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExpr = (*) GExprOr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAdd = (*) LAExprMacro<GOperandAdd, GExprMul> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAnd = (*) RAExprMacro<GOperandAnd, GExprRel> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) CommaSeparatedList<GExpr> ")" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GBoolean ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GIdent ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GIdent "(" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GInteger ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GString ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) "(" GExprOr ")" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprMul = (*) LAExprMacro<GOperandMul, GExprUnary> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprOr = (*) RAExprMacro<GOperandOr, GExprAnd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprRel = (*) LAExprMacro<GOperandRel, GExprAdd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) "!" GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = "!" (*) GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) "-" GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GIdent = (*) r#"[A-Z,a-z,_\']+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GInteger = (*) r#"[+-]"# r#"[0-9]+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GInteger = (*) r#"[0-9]+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GString = (*) r#"\"([^,\",\\\\]|\\\\\")*\""# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandAdd, GExprMul> = (*) GExprMul ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandAdd, GExprMul> = (*) LAExprMacro<GOperandAdd, GExprMul> GOperandAdd GExprMul ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandMul, GExprUnary> = (*) GExprUnary ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandMul, GExprUnary> = (*) LAExprMacro<GOperandMul, GExprUnary> GOperandMul GExprUnary ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandRel, GExprAdd> = (*) GExprAdd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandRel, GExprAdd> = (*) LAExprMacro<GOperandRel, GExprAdd> GOperandRel GExprAdd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandAnd, GExprRel> = (*) GExprRel ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandAnd, GExprRel> = (*) GExprRel GOperandAnd RAExprMacro<GOperandAnd, GExprRel> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandOr, GExprAnd> = (*) GExprAnd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandOr, GExprAnd> = (*) GExprAnd GOperandOr RAExprMacro<GOperandOr, GExprAnd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `r#"[A-Z,a-z,_\']+"#` we can reduce to a `CommaSeparatedList<GExpr>` but we can also shift

/home/prybicki/code/latte/src/latte.lalrpop:108:20: 108:44: Conflict detected

    when in this state:
  (<GExpr> ",")+ = (*) (<GExpr> ",")+ GExpr "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  (<GExpr> ",")+ = (*) GExpr "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) (<GExpr> ",")+ ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) (<GExpr> ",")+ GExpr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) GExpr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GBoolean = (*) "false" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GBoolean = (*) "true" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExpr = (*) GExprOr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAdd = (*) LAExprMacro<GOperandAdd, GExprMul> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAnd = (*) RAExprMacro<GOperandAnd, GExprRel> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) CommaSeparatedList<GExpr> ")" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GBoolean ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GIdent ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GIdent "(" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GInteger ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GString ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) "(" GExprOr ")" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = "(" (*) GExprOr ")" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprMul = (*) LAExprMacro<GOperandMul, GExprUnary> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprOr = (*) RAExprMacro<GOperandOr, GExprAnd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprRel = (*) LAExprMacro<GOperandRel, GExprAdd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) "!" GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) "-" GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GIdent = (*) r#"[A-Z,a-z,_\']+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GInteger = (*) r#"[+-]"# r#"[0-9]+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GInteger = (*) r#"[0-9]+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GString = (*) r#"\"([^,\",\\\\]|\\\\\")*\""# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandAdd, GExprMul> = (*) GExprMul ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandAdd, GExprMul> = (*) LAExprMacro<GOperandAdd, GExprMul> GOperandAdd GExprMul ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandMul, GExprUnary> = (*) GExprUnary ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandMul, GExprUnary> = (*) LAExprMacro<GOperandMul, GExprUnary> GOperandMul GExprUnary ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandRel, GExprAdd> = (*) GExprAdd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandRel, GExprAdd> = (*) LAExprMacro<GOperandRel, GExprAdd> GOperandRel GExprAdd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandAnd, GExprRel> = (*) GExprRel ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandAnd, GExprRel> = (*) GExprRel GOperandAnd RAExprMacro<GOperandAnd, GExprRel> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandOr, GExprAnd> = (*) GExprAnd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandOr, GExprAnd> = (*) GExprAnd GOperandOr RAExprMacro<GOperandOr, GExprAnd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `"!"` we can reduce to a `CommaSeparatedList<GExpr>` but we can also shift

/home/prybicki/code/latte/src/latte.lalrpop:108:20: 108:44: Conflict detected

    when in this state:
  (<GExpr> ",")+ = (*) (<GExpr> ",")+ GExpr "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  (<GExpr> ",")+ = (*) GExpr "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) (<GExpr> ",")+ ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) (<GExpr> ",")+ GExpr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) GExpr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GBoolean = (*) "false" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GBoolean = (*) "true" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExpr = (*) GExprOr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAdd = (*) LAExprMacro<GOperandAdd, GExprMul> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAnd = (*) RAExprMacro<GOperandAnd, GExprRel> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) CommaSeparatedList<GExpr> ")" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GBoolean ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GIdent ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GIdent "(" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GInteger ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GString ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) "(" GExprOr ")" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = "(" (*) GExprOr ")" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprMul = (*) LAExprMacro<GOperandMul, GExprUnary> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprOr = (*) RAExprMacro<GOperandOr, GExprAnd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprRel = (*) LAExprMacro<GOperandRel, GExprAdd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) "!" GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) "-" GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GIdent = (*) r#"[A-Z,a-z,_\']+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GInteger = (*) r#"[+-]"# r#"[0-9]+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GInteger = (*) r#"[0-9]+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GString = (*) r#"\"([^,\",\\\\]|\\\\\")*\""# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandAdd, GExprMul> = (*) GExprMul ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandAdd, GExprMul> = (*) LAExprMacro<GOperandAdd, GExprMul> GOperandAdd GExprMul ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandMul, GExprUnary> = (*) GExprUnary ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandMul, GExprUnary> = (*) LAExprMacro<GOperandMul, GExprUnary> GOperandMul GExprUnary ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandRel, GExprAdd> = (*) GExprAdd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandRel, GExprAdd> = (*) LAExprMacro<GOperandRel, GExprAdd> GOperandRel GExprAdd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandAnd, GExprRel> = (*) GExprRel ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandAnd, GExprRel> = (*) GExprRel GOperandAnd RAExprMacro<GOperandAnd, GExprRel> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandOr, GExprAnd> = (*) GExprAnd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandOr, GExprAnd> = (*) GExprAnd GOperandOr RAExprMacro<GOperandOr, GExprAnd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `"("` we can reduce to a `CommaSeparatedList<GExpr>` but we can also shift

/home/prybicki/code/latte/src/latte.lalrpop:108:20: 108:44: Conflict detected

    when in this state:
  (<GExpr> ",")+ = (*) (<GExpr> ",")+ GExpr "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  (<GExpr> ",")+ = (*) GExpr "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) (<GExpr> ",")+ ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) (<GExpr> ",")+ GExpr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) GExpr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GBoolean = (*) "false" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GBoolean = (*) "true" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExpr = (*) GExprOr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAdd = (*) LAExprMacro<GOperandAdd, GExprMul> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAnd = (*) RAExprMacro<GOperandAnd, GExprRel> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) CommaSeparatedList<GExpr> ")" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GBoolean ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GIdent ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GIdent "(" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GInteger ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GString ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) "(" GExprOr ")" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = "(" (*) GExprOr ")" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprMul = (*) LAExprMacro<GOperandMul, GExprUnary> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprOr = (*) RAExprMacro<GOperandOr, GExprAnd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprRel = (*) LAExprMacro<GOperandRel, GExprAdd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) "!" GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) "-" GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GIdent = (*) r#"[A-Z,a-z,_\']+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GInteger = (*) r#"[+-]"# r#"[0-9]+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GInteger = (*) r#"[0-9]+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GString = (*) r#"\"([^,\",\\\\]|\\\\\")*\""# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandAdd, GExprMul> = (*) GExprMul ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandAdd, GExprMul> = (*) LAExprMacro<GOperandAdd, GExprMul> GOperandAdd GExprMul ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandMul, GExprUnary> = (*) GExprUnary ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandMul, GExprUnary> = (*) LAExprMacro<GOperandMul, GExprUnary> GOperandMul GExprUnary ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandRel, GExprAdd> = (*) GExprAdd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandRel, GExprAdd> = (*) LAExprMacro<GOperandRel, GExprAdd> GOperandRel GExprAdd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandAnd, GExprRel> = (*) GExprRel ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandAnd, GExprRel> = (*) GExprRel GOperandAnd RAExprMacro<GOperandAnd, GExprRel> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandOr, GExprAnd> = (*) GExprAnd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandOr, GExprAnd> = (*) GExprAnd GOperandOr RAExprMacro<GOperandOr, GExprAnd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `"-"` we can reduce to a `CommaSeparatedList<GExpr>` but we can also shift

/home/prybicki/code/latte/src/latte.lalrpop:108:20: 108:44: Conflict detected

    when in this state:
  (<GExpr> ",")+ = (*) (<GExpr> ",")+ GExpr "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  (<GExpr> ",")+ = (*) GExpr "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) (<GExpr> ",")+ ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) (<GExpr> ",")+ GExpr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) GExpr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GBoolean = (*) "false" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GBoolean = (*) "true" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExpr = (*) GExprOr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAdd = (*) LAExprMacro<GOperandAdd, GExprMul> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAnd = (*) RAExprMacro<GOperandAnd, GExprRel> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) CommaSeparatedList<GExpr> ")" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GBoolean ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GIdent ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GIdent "(" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GInteger ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GString ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) "(" GExprOr ")" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = "(" (*) GExprOr ")" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprMul = (*) LAExprMacro<GOperandMul, GExprUnary> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprOr = (*) RAExprMacro<GOperandOr, GExprAnd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprRel = (*) LAExprMacro<GOperandRel, GExprAdd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) "!" GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) "-" GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GIdent = (*) r#"[A-Z,a-z,_\']+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GInteger = (*) r#"[+-]"# r#"[0-9]+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GInteger = (*) r#"[0-9]+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GString = (*) r#"\"([^,\",\\\\]|\\\\\")*\""# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandAdd, GExprMul> = (*) GExprMul ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandAdd, GExprMul> = (*) LAExprMacro<GOperandAdd, GExprMul> GOperandAdd GExprMul ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandMul, GExprUnary> = (*) GExprUnary ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandMul, GExprUnary> = (*) LAExprMacro<GOperandMul, GExprUnary> GOperandMul GExprUnary ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandRel, GExprAdd> = (*) GExprAdd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandRel, GExprAdd> = (*) LAExprMacro<GOperandRel, GExprAdd> GOperandRel GExprAdd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandAnd, GExprRel> = (*) GExprRel ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandAnd, GExprRel> = (*) GExprRel GOperandAnd RAExprMacro<GOperandAnd, GExprRel> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandOr, GExprAnd> = (*) GExprAnd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandOr, GExprAnd> = (*) GExprAnd GOperandOr RAExprMacro<GOperandOr, GExprAnd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `"false"` we can reduce to a `CommaSeparatedList<GExpr>` but we can also shift

/home/prybicki/code/latte/src/latte.lalrpop:108:20: 108:44: Conflict detected

    when in this state:
  (<GExpr> ",")+ = (*) (<GExpr> ",")+ GExpr "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  (<GExpr> ",")+ = (*) GExpr "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) (<GExpr> ",")+ ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) (<GExpr> ",")+ GExpr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) GExpr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GBoolean = (*) "false" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GBoolean = (*) "true" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExpr = (*) GExprOr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAdd = (*) LAExprMacro<GOperandAdd, GExprMul> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAnd = (*) RAExprMacro<GOperandAnd, GExprRel> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) CommaSeparatedList<GExpr> ")" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GBoolean ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GIdent ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GIdent "(" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GInteger ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GString ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) "(" GExprOr ")" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = "(" (*) GExprOr ")" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprMul = (*) LAExprMacro<GOperandMul, GExprUnary> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprOr = (*) RAExprMacro<GOperandOr, GExprAnd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprRel = (*) LAExprMacro<GOperandRel, GExprAdd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) "!" GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) "-" GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GIdent = (*) r#"[A-Z,a-z,_\']+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GInteger = (*) r#"[+-]"# r#"[0-9]+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GInteger = (*) r#"[0-9]+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GString = (*) r#"\"([^,\",\\\\]|\\\\\")*\""# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandAdd, GExprMul> = (*) GExprMul ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandAdd, GExprMul> = (*) LAExprMacro<GOperandAdd, GExprMul> GOperandAdd GExprMul ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandMul, GExprUnary> = (*) GExprUnary ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandMul, GExprUnary> = (*) LAExprMacro<GOperandMul, GExprUnary> GOperandMul GExprUnary ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandRel, GExprAdd> = (*) GExprAdd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandRel, GExprAdd> = (*) LAExprMacro<GOperandRel, GExprAdd> GOperandRel GExprAdd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandAnd, GExprRel> = (*) GExprRel ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandAnd, GExprRel> = (*) GExprRel GOperandAnd RAExprMacro<GOperandAnd, GExprRel> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandOr, GExprAnd> = (*) GExprAnd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandOr, GExprAnd> = (*) GExprAnd GOperandOr RAExprMacro<GOperandOr, GExprAnd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `"true"` we can reduce to a `CommaSeparatedList<GExpr>` but we can also shift

/home/prybicki/code/latte/src/latte.lalrpop:108:20: 108:44: Conflict detected

    when in this state:
  (<GExpr> ",")+ = (*) (<GExpr> ",")+ GExpr "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  (<GExpr> ",")+ = (*) GExpr "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) (<GExpr> ",")+ ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) (<GExpr> ",")+ GExpr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) GExpr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GBoolean = (*) "false" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GBoolean = (*) "true" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExpr = (*) GExprOr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAdd = (*) LAExprMacro<GOperandAdd, GExprMul> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAnd = (*) RAExprMacro<GOperandAnd, GExprRel> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) CommaSeparatedList<GExpr> ")" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GBoolean ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GIdent ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GIdent "(" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GInteger ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GString ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) "(" GExprOr ")" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = "(" (*) GExprOr ")" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprMul = (*) LAExprMacro<GOperandMul, GExprUnary> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprOr = (*) RAExprMacro<GOperandOr, GExprAnd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprRel = (*) LAExprMacro<GOperandRel, GExprAdd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) "!" GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) "-" GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GIdent = (*) r#"[A-Z,a-z,_\']+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GInteger = (*) r#"[+-]"# r#"[0-9]+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GInteger = (*) r#"[0-9]+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GString = (*) r#"\"([^,\",\\\\]|\\\\\")*\""# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandAdd, GExprMul> = (*) GExprMul ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandAdd, GExprMul> = (*) LAExprMacro<GOperandAdd, GExprMul> GOperandAdd GExprMul ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandMul, GExprUnary> = (*) GExprUnary ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandMul, GExprUnary> = (*) LAExprMacro<GOperandMul, GExprUnary> GOperandMul GExprUnary ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandRel, GExprAdd> = (*) GExprAdd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandRel, GExprAdd> = (*) LAExprMacro<GOperandRel, GExprAdd> GOperandRel GExprAdd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandAnd, GExprRel> = (*) GExprRel ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandAnd, GExprRel> = (*) GExprRel GOperandAnd RAExprMacro<GOperandAnd, GExprRel> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandOr, GExprAnd> = (*) GExprAnd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandOr, GExprAnd> = (*) GExprAnd GOperandOr RAExprMacro<GOperandOr, GExprAnd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `r#"\"([^,\",\\\\]|\\\\\")*\""#` we can reduce to a `CommaSeparatedList<GExpr>` but we can also shift

/home/prybicki/code/latte/src/latte.lalrpop:108:20: 108:44: Conflict detected

    when in this state:
  (<GExpr> ",")+ = (*) (<GExpr> ",")+ GExpr "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  (<GExpr> ",")+ = (*) GExpr "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) (<GExpr> ",")+ ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) (<GExpr> ",")+ GExpr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) GExpr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GBoolean = (*) "false" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GBoolean = (*) "true" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExpr = (*) GExprOr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAdd = (*) LAExprMacro<GOperandAdd, GExprMul> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAnd = (*) RAExprMacro<GOperandAnd, GExprRel> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) CommaSeparatedList<GExpr> ")" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GBoolean ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GIdent ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GIdent "(" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GInteger ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GString ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) "(" GExprOr ")" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = "(" (*) GExprOr ")" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprMul = (*) LAExprMacro<GOperandMul, GExprUnary> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprOr = (*) RAExprMacro<GOperandOr, GExprAnd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprRel = (*) LAExprMacro<GOperandRel, GExprAdd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) "!" GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) "-" GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GIdent = (*) r#"[A-Z,a-z,_\']+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GInteger = (*) r#"[+-]"# r#"[0-9]+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GInteger = (*) r#"[0-9]+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GString = (*) r#"\"([^,\",\\\\]|\\\\\")*\""# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandAdd, GExprMul> = (*) GExprMul ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandAdd, GExprMul> = (*) LAExprMacro<GOperandAdd, GExprMul> GOperandAdd GExprMul ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandMul, GExprUnary> = (*) GExprUnary ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandMul, GExprUnary> = (*) LAExprMacro<GOperandMul, GExprUnary> GOperandMul GExprUnary ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandRel, GExprAdd> = (*) GExprAdd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandRel, GExprAdd> = (*) LAExprMacro<GOperandRel, GExprAdd> GOperandRel GExprAdd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandAnd, GExprRel> = (*) GExprRel ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandAnd, GExprRel> = (*) GExprRel GOperandAnd RAExprMacro<GOperandAnd, GExprRel> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandOr, GExprAnd> = (*) GExprAnd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandOr, GExprAnd> = (*) GExprAnd GOperandOr RAExprMacro<GOperandOr, GExprAnd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `r#"[+-]"#` we can reduce to a `CommaSeparatedList<GExpr>` but we can also shift

/home/prybicki/code/latte/src/latte.lalrpop:108:20: 108:44: Conflict detected

    when in this state:
  (<GExpr> ",")+ = (*) (<GExpr> ",")+ GExpr "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  (<GExpr> ",")+ = (*) GExpr "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) (<GExpr> ",")+ ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) (<GExpr> ",")+ GExpr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) GExpr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GBoolean = (*) "false" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GBoolean = (*) "true" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExpr = (*) GExprOr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAdd = (*) LAExprMacro<GOperandAdd, GExprMul> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAnd = (*) RAExprMacro<GOperandAnd, GExprRel> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) CommaSeparatedList<GExpr> ")" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GBoolean ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GIdent ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GIdent "(" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GInteger ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GString ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) "(" GExprOr ")" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = "(" (*) GExprOr ")" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprMul = (*) LAExprMacro<GOperandMul, GExprUnary> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprOr = (*) RAExprMacro<GOperandOr, GExprAnd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprRel = (*) LAExprMacro<GOperandRel, GExprAdd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) "!" GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) "-" GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GIdent = (*) r#"[A-Z,a-z,_\']+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GInteger = (*) r#"[+-]"# r#"[0-9]+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GInteger = (*) r#"[0-9]+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GString = (*) r#"\"([^,\",\\\\]|\\\\\")*\""# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandAdd, GExprMul> = (*) GExprMul ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandAdd, GExprMul> = (*) LAExprMacro<GOperandAdd, GExprMul> GOperandAdd GExprMul ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandMul, GExprUnary> = (*) GExprUnary ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandMul, GExprUnary> = (*) LAExprMacro<GOperandMul, GExprUnary> GOperandMul GExprUnary ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandRel, GExprAdd> = (*) GExprAdd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandRel, GExprAdd> = (*) LAExprMacro<GOperandRel, GExprAdd> GOperandRel GExprAdd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandAnd, GExprRel> = (*) GExprRel ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandAnd, GExprRel> = (*) GExprRel GOperandAnd RAExprMacro<GOperandAnd, GExprRel> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandOr, GExprAnd> = (*) GExprAnd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandOr, GExprAnd> = (*) GExprAnd GOperandOr RAExprMacro<GOperandOr, GExprAnd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `r#"[0-9]+"#` we can reduce to a `CommaSeparatedList<GExpr>` but we can also shift

/home/prybicki/code/latte/src/latte.lalrpop:108:20: 108:44: Conflict detected

    when in this state:
  (<GExpr> ",")+ = (*) (<GExpr> ",")+ GExpr "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  (<GExpr> ",")+ = (*) GExpr "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) (<GExpr> ",")+ ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) (<GExpr> ",")+ GExpr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) GExpr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GBoolean = (*) "false" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GBoolean = (*) "true" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExpr = (*) GExprOr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAdd = (*) LAExprMacro<GOperandAdd, GExprMul> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAnd = (*) RAExprMacro<GOperandAnd, GExprRel> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) CommaSeparatedList<GExpr> ")" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GBoolean ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GIdent ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GIdent "(" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GInteger ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GString ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) "(" GExprOr ")" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = "(" (*) GExprOr ")" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprMul = (*) LAExprMacro<GOperandMul, GExprUnary> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprOr = (*) RAExprMacro<GOperandOr, GExprAnd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprRel = (*) LAExprMacro<GOperandRel, GExprAdd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) "!" GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) "-" GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GIdent = (*) r#"[A-Z,a-z,_\']+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GInteger = (*) r#"[+-]"# r#"[0-9]+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GInteger = (*) r#"[0-9]+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GString = (*) r#"\"([^,\",\\\\]|\\\\\")*\""# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandAdd, GExprMul> = (*) GExprMul ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandAdd, GExprMul> = (*) LAExprMacro<GOperandAdd, GExprMul> GOperandAdd GExprMul ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandMul, GExprUnary> = (*) GExprUnary ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandMul, GExprUnary> = (*) LAExprMacro<GOperandMul, GExprUnary> GOperandMul GExprUnary ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandRel, GExprAdd> = (*) GExprAdd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandRel, GExprAdd> = (*) LAExprMacro<GOperandRel, GExprAdd> GOperandRel GExprAdd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandAnd, GExprRel> = (*) GExprRel ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandAnd, GExprRel> = (*) GExprRel GOperandAnd RAExprMacro<GOperandAnd, GExprRel> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandOr, GExprAnd> = (*) GExprAnd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandOr, GExprAnd> = (*) GExprAnd GOperandOr RAExprMacro<GOperandOr, GExprAnd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `r#"[A-Z,a-z,_\']+"#` we can reduce to a `CommaSeparatedList<GExpr>` but we can also shift

/home/prybicki/code/latte/src/latte.lalrpop:108:20: 108:44: Conflict detected

    when in this state:
  (<GExpr> ",")+ = (*) (<GExpr> ",")+ GExpr "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  (<GExpr> ",")+ = (*) GExpr "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) (<GExpr> ",")+ ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) (<GExpr> ",")+ GExpr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) GExpr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GBoolean = (*) "false" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GBoolean = (*) "true" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExpr = (*) GExprOr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAdd = (*) LAExprMacro<GOperandAdd, GExprMul> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAnd = (*) RAExprMacro<GOperandAnd, GExprRel> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) CommaSeparatedList<GExpr> ")" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GBoolean ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GIdent ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GIdent "(" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GInteger ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GString ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) "(" GExprOr ")" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprMul = (*) LAExprMacro<GOperandMul, GExprUnary> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprOr = (*) RAExprMacro<GOperandOr, GExprAnd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprRel = (*) LAExprMacro<GOperandRel, GExprAdd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) "!" GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) "-" GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = "-" (*) GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GIdent = (*) r#"[A-Z,a-z,_\']+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GInteger = (*) r#"[+-]"# r#"[0-9]+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GInteger = (*) r#"[0-9]+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GString = (*) r#"\"([^,\",\\\\]|\\\\\")*\""# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandAdd, GExprMul> = (*) GExprMul ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandAdd, GExprMul> = (*) LAExprMacro<GOperandAdd, GExprMul> GOperandAdd GExprMul ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandMul, GExprUnary> = (*) GExprUnary ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandMul, GExprUnary> = (*) LAExprMacro<GOperandMul, GExprUnary> GOperandMul GExprUnary ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandRel, GExprAdd> = (*) GExprAdd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandRel, GExprAdd> = (*) LAExprMacro<GOperandRel, GExprAdd> GOperandRel GExprAdd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandAnd, GExprRel> = (*) GExprRel ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandAnd, GExprRel> = (*) GExprRel GOperandAnd RAExprMacro<GOperandAnd, GExprRel> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandOr, GExprAnd> = (*) GExprAnd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandOr, GExprAnd> = (*) GExprAnd GOperandOr RAExprMacro<GOperandOr, GExprAnd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `"!"` we can reduce to a `CommaSeparatedList<GExpr>` but we can also shift

/home/prybicki/code/latte/src/latte.lalrpop:108:20: 108:44: Conflict detected

    when in this state:
  (<GExpr> ",")+ = (*) (<GExpr> ",")+ GExpr "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  (<GExpr> ",")+ = (*) GExpr "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) (<GExpr> ",")+ ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) (<GExpr> ",")+ GExpr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) GExpr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GBoolean = (*) "false" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GBoolean = (*) "true" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExpr = (*) GExprOr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAdd = (*) LAExprMacro<GOperandAdd, GExprMul> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAnd = (*) RAExprMacro<GOperandAnd, GExprRel> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) CommaSeparatedList<GExpr> ")" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GBoolean ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GIdent ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GIdent "(" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GInteger ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GString ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) "(" GExprOr ")" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprMul = (*) LAExprMacro<GOperandMul, GExprUnary> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprOr = (*) RAExprMacro<GOperandOr, GExprAnd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprRel = (*) LAExprMacro<GOperandRel, GExprAdd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) "!" GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) "-" GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = "-" (*) GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GIdent = (*) r#"[A-Z,a-z,_\']+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GInteger = (*) r#"[+-]"# r#"[0-9]+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GInteger = (*) r#"[0-9]+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GString = (*) r#"\"([^,\",\\\\]|\\\\\")*\""# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandAdd, GExprMul> = (*) GExprMul ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandAdd, GExprMul> = (*) LAExprMacro<GOperandAdd, GExprMul> GOperandAdd GExprMul ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandMul, GExprUnary> = (*) GExprUnary ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandMul, GExprUnary> = (*) LAExprMacro<GOperandMul, GExprUnary> GOperandMul GExprUnary ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandRel, GExprAdd> = (*) GExprAdd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandRel, GExprAdd> = (*) LAExprMacro<GOperandRel, GExprAdd> GOperandRel GExprAdd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandAnd, GExprRel> = (*) GExprRel ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandAnd, GExprRel> = (*) GExprRel GOperandAnd RAExprMacro<GOperandAnd, GExprRel> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandOr, GExprAnd> = (*) GExprAnd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandOr, GExprAnd> = (*) GExprAnd GOperandOr RAExprMacro<GOperandOr, GExprAnd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `"("` we can reduce to a `CommaSeparatedList<GExpr>` but we can also shift

/home/prybicki/code/latte/src/latte.lalrpop:108:20: 108:44: Conflict detected

    when in this state:
  (<GExpr> ",")+ = (*) (<GExpr> ",")+ GExpr "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  (<GExpr> ",")+ = (*) GExpr "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) (<GExpr> ",")+ ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) (<GExpr> ",")+ GExpr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) GExpr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GBoolean = (*) "false" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GBoolean = (*) "true" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExpr = (*) GExprOr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAdd = (*) LAExprMacro<GOperandAdd, GExprMul> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAnd = (*) RAExprMacro<GOperandAnd, GExprRel> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) CommaSeparatedList<GExpr> ")" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GBoolean ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GIdent ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GIdent "(" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GInteger ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GString ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) "(" GExprOr ")" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprMul = (*) LAExprMacro<GOperandMul, GExprUnary> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprOr = (*) RAExprMacro<GOperandOr, GExprAnd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprRel = (*) LAExprMacro<GOperandRel, GExprAdd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) "!" GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) "-" GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = "-" (*) GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GIdent = (*) r#"[A-Z,a-z,_\']+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GInteger = (*) r#"[+-]"# r#"[0-9]+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GInteger = (*) r#"[0-9]+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GString = (*) r#"\"([^,\",\\\\]|\\\\\")*\""# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandAdd, GExprMul> = (*) GExprMul ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandAdd, GExprMul> = (*) LAExprMacro<GOperandAdd, GExprMul> GOperandAdd GExprMul ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandMul, GExprUnary> = (*) GExprUnary ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandMul, GExprUnary> = (*) LAExprMacro<GOperandMul, GExprUnary> GOperandMul GExprUnary ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandRel, GExprAdd> = (*) GExprAdd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandRel, GExprAdd> = (*) LAExprMacro<GOperandRel, GExprAdd> GOperandRel GExprAdd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandAnd, GExprRel> = (*) GExprRel ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandAnd, GExprRel> = (*) GExprRel GOperandAnd RAExprMacro<GOperandAnd, GExprRel> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandOr, GExprAnd> = (*) GExprAnd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandOr, GExprAnd> = (*) GExprAnd GOperandOr RAExprMacro<GOperandOr, GExprAnd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `"-"` we can reduce to a `CommaSeparatedList<GExpr>` but we can also shift

/home/prybicki/code/latte/src/latte.lalrpop:108:20: 108:44: Conflict detected

    when in this state:
  (<GExpr> ",")+ = (*) (<GExpr> ",")+ GExpr "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  (<GExpr> ",")+ = (*) GExpr "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) (<GExpr> ",")+ ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) (<GExpr> ",")+ GExpr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) GExpr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GBoolean = (*) "false" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GBoolean = (*) "true" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExpr = (*) GExprOr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAdd = (*) LAExprMacro<GOperandAdd, GExprMul> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAnd = (*) RAExprMacro<GOperandAnd, GExprRel> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) CommaSeparatedList<GExpr> ")" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GBoolean ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GIdent ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GIdent "(" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GInteger ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GString ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) "(" GExprOr ")" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprMul = (*) LAExprMacro<GOperandMul, GExprUnary> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprOr = (*) RAExprMacro<GOperandOr, GExprAnd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprRel = (*) LAExprMacro<GOperandRel, GExprAdd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) "!" GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) "-" GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = "-" (*) GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GIdent = (*) r#"[A-Z,a-z,_\']+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GInteger = (*) r#"[+-]"# r#"[0-9]+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GInteger = (*) r#"[0-9]+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GString = (*) r#"\"([^,\",\\\\]|\\\\\")*\""# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandAdd, GExprMul> = (*) GExprMul ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandAdd, GExprMul> = (*) LAExprMacro<GOperandAdd, GExprMul> GOperandAdd GExprMul ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandMul, GExprUnary> = (*) GExprUnary ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandMul, GExprUnary> = (*) LAExprMacro<GOperandMul, GExprUnary> GOperandMul GExprUnary ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandRel, GExprAdd> = (*) GExprAdd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandRel, GExprAdd> = (*) LAExprMacro<GOperandRel, GExprAdd> GOperandRel GExprAdd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandAnd, GExprRel> = (*) GExprRel ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandAnd, GExprRel> = (*) GExprRel GOperandAnd RAExprMacro<GOperandAnd, GExprRel> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandOr, GExprAnd> = (*) GExprAnd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandOr, GExprAnd> = (*) GExprAnd GOperandOr RAExprMacro<GOperandOr, GExprAnd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `"false"` we can reduce to a `CommaSeparatedList<GExpr>` but we can also shift

/home/prybicki/code/latte/src/latte.lalrpop:108:20: 108:44: Conflict detected

    when in this state:
  (<GExpr> ",")+ = (*) (<GExpr> ",")+ GExpr "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  (<GExpr> ",")+ = (*) GExpr "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) (<GExpr> ",")+ ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) (<GExpr> ",")+ GExpr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) GExpr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GBoolean = (*) "false" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GBoolean = (*) "true" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExpr = (*) GExprOr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAdd = (*) LAExprMacro<GOperandAdd, GExprMul> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAnd = (*) RAExprMacro<GOperandAnd, GExprRel> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) CommaSeparatedList<GExpr> ")" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GBoolean ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GIdent ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GIdent "(" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GInteger ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GString ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) "(" GExprOr ")" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprMul = (*) LAExprMacro<GOperandMul, GExprUnary> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprOr = (*) RAExprMacro<GOperandOr, GExprAnd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprRel = (*) LAExprMacro<GOperandRel, GExprAdd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) "!" GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) "-" GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = "-" (*) GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GIdent = (*) r#"[A-Z,a-z,_\']+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GInteger = (*) r#"[+-]"# r#"[0-9]+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GInteger = (*) r#"[0-9]+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GString = (*) r#"\"([^,\",\\\\]|\\\\\")*\""# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandAdd, GExprMul> = (*) GExprMul ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandAdd, GExprMul> = (*) LAExprMacro<GOperandAdd, GExprMul> GOperandAdd GExprMul ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandMul, GExprUnary> = (*) GExprUnary ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandMul, GExprUnary> = (*) LAExprMacro<GOperandMul, GExprUnary> GOperandMul GExprUnary ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandRel, GExprAdd> = (*) GExprAdd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandRel, GExprAdd> = (*) LAExprMacro<GOperandRel, GExprAdd> GOperandRel GExprAdd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandAnd, GExprRel> = (*) GExprRel ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandAnd, GExprRel> = (*) GExprRel GOperandAnd RAExprMacro<GOperandAnd, GExprRel> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandOr, GExprAnd> = (*) GExprAnd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandOr, GExprAnd> = (*) GExprAnd GOperandOr RAExprMacro<GOperandOr, GExprAnd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `"true"` we can reduce to a `CommaSeparatedList<GExpr>` but we can also shift

/home/prybicki/code/latte/src/latte.lalrpop:108:20: 108:44: Conflict detected

    when in this state:
  (<GExpr> ",")+ = (*) (<GExpr> ",")+ GExpr "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  (<GExpr> ",")+ = (*) GExpr "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) (<GExpr> ",")+ ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) (<GExpr> ",")+ GExpr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) GExpr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GBoolean = (*) "false" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GBoolean = (*) "true" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExpr = (*) GExprOr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAdd = (*) LAExprMacro<GOperandAdd, GExprMul> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAnd = (*) RAExprMacro<GOperandAnd, GExprRel> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) CommaSeparatedList<GExpr> ")" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GBoolean ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GIdent ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GIdent "(" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GInteger ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GString ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) "(" GExprOr ")" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprMul = (*) LAExprMacro<GOperandMul, GExprUnary> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprOr = (*) RAExprMacro<GOperandOr, GExprAnd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprRel = (*) LAExprMacro<GOperandRel, GExprAdd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) "!" GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) "-" GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = "-" (*) GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GIdent = (*) r#"[A-Z,a-z,_\']+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GInteger = (*) r#"[+-]"# r#"[0-9]+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GInteger = (*) r#"[0-9]+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GString = (*) r#"\"([^,\",\\\\]|\\\\\")*\""# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandAdd, GExprMul> = (*) GExprMul ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandAdd, GExprMul> = (*) LAExprMacro<GOperandAdd, GExprMul> GOperandAdd GExprMul ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandMul, GExprUnary> = (*) GExprUnary ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandMul, GExprUnary> = (*) LAExprMacro<GOperandMul, GExprUnary> GOperandMul GExprUnary ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandRel, GExprAdd> = (*) GExprAdd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandRel, GExprAdd> = (*) LAExprMacro<GOperandRel, GExprAdd> GOperandRel GExprAdd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandAnd, GExprRel> = (*) GExprRel ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandAnd, GExprRel> = (*) GExprRel GOperandAnd RAExprMacro<GOperandAnd, GExprRel> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandOr, GExprAnd> = (*) GExprAnd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandOr, GExprAnd> = (*) GExprAnd GOperandOr RAExprMacro<GOperandOr, GExprAnd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `r#"\"([^,\",\\\\]|\\\\\")*\""#` we can reduce to a `CommaSeparatedList<GExpr>` but we can also shift

/home/prybicki/code/latte/src/latte.lalrpop:108:20: 108:44: Conflict detected

    when in this state:
  (<GExpr> ",")+ = (*) (<GExpr> ",")+ GExpr "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  (<GExpr> ",")+ = (*) GExpr "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) (<GExpr> ",")+ ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) (<GExpr> ",")+ GExpr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) GExpr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GBoolean = (*) "false" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GBoolean = (*) "true" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExpr = (*) GExprOr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAdd = (*) LAExprMacro<GOperandAdd, GExprMul> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAnd = (*) RAExprMacro<GOperandAnd, GExprRel> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) CommaSeparatedList<GExpr> ")" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GBoolean ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GIdent ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GIdent "(" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GInteger ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GString ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) "(" GExprOr ")" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprMul = (*) LAExprMacro<GOperandMul, GExprUnary> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprOr = (*) RAExprMacro<GOperandOr, GExprAnd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprRel = (*) LAExprMacro<GOperandRel, GExprAdd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) "!" GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) "-" GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = "-" (*) GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GIdent = (*) r#"[A-Z,a-z,_\']+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GInteger = (*) r#"[+-]"# r#"[0-9]+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GInteger = (*) r#"[0-9]+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GString = (*) r#"\"([^,\",\\\\]|\\\\\")*\""# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandAdd, GExprMul> = (*) GExprMul ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandAdd, GExprMul> = (*) LAExprMacro<GOperandAdd, GExprMul> GOperandAdd GExprMul ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandMul, GExprUnary> = (*) GExprUnary ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandMul, GExprUnary> = (*) LAExprMacro<GOperandMul, GExprUnary> GOperandMul GExprUnary ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandRel, GExprAdd> = (*) GExprAdd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandRel, GExprAdd> = (*) LAExprMacro<GOperandRel, GExprAdd> GOperandRel GExprAdd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandAnd, GExprRel> = (*) GExprRel ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandAnd, GExprRel> = (*) GExprRel GOperandAnd RAExprMacro<GOperandAnd, GExprRel> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandOr, GExprAnd> = (*) GExprAnd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandOr, GExprAnd> = (*) GExprAnd GOperandOr RAExprMacro<GOperandOr, GExprAnd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `r#"[+-]"#` we can reduce to a `CommaSeparatedList<GExpr>` but we can also shift

/home/prybicki/code/latte/src/latte.lalrpop:108:20: 108:44: Conflict detected

    when in this state:
  (<GExpr> ",")+ = (*) (<GExpr> ",")+ GExpr "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  (<GExpr> ",")+ = (*) GExpr "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) (<GExpr> ",")+ ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) (<GExpr> ",")+ GExpr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) GExpr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GBoolean = (*) "false" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GBoolean = (*) "true" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExpr = (*) GExprOr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAdd = (*) LAExprMacro<GOperandAdd, GExprMul> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAnd = (*) RAExprMacro<GOperandAnd, GExprRel> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) CommaSeparatedList<GExpr> ")" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GBoolean ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GIdent ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GIdent "(" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GInteger ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GString ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) "(" GExprOr ")" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprMul = (*) LAExprMacro<GOperandMul, GExprUnary> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprOr = (*) RAExprMacro<GOperandOr, GExprAnd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprRel = (*) LAExprMacro<GOperandRel, GExprAdd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) "!" GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) "-" GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = "-" (*) GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GIdent = (*) r#"[A-Z,a-z,_\']+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GInteger = (*) r#"[+-]"# r#"[0-9]+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GInteger = (*) r#"[0-9]+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GString = (*) r#"\"([^,\",\\\\]|\\\\\")*\""# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandAdd, GExprMul> = (*) GExprMul ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandAdd, GExprMul> = (*) LAExprMacro<GOperandAdd, GExprMul> GOperandAdd GExprMul ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandMul, GExprUnary> = (*) GExprUnary ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandMul, GExprUnary> = (*) LAExprMacro<GOperandMul, GExprUnary> GOperandMul GExprUnary ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandRel, GExprAdd> = (*) GExprAdd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandRel, GExprAdd> = (*) LAExprMacro<GOperandRel, GExprAdd> GOperandRel GExprAdd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandAnd, GExprRel> = (*) GExprRel ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandAnd, GExprRel> = (*) GExprRel GOperandAnd RAExprMacro<GOperandAnd, GExprRel> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandOr, GExprAnd> = (*) GExprAnd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandOr, GExprAnd> = (*) GExprAnd GOperandOr RAExprMacro<GOperandOr, GExprAnd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `r#"[0-9]+"#` we can reduce to a `CommaSeparatedList<GExpr>` but we can also shift

/home/prybicki/code/latte/src/latte.lalrpop:108:20: 108:44: Conflict detected

    when in this state:
  (<GExpr> ",")+ = (*) (<GExpr> ",")+ GExpr "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  (<GExpr> ",")+ = (*) GExpr "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) (<GExpr> ",")+ ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) (<GExpr> ",")+ GExpr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) GExpr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GBoolean = (*) "false" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GBoolean = (*) "true" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExpr = (*) GExprOr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAdd = (*) LAExprMacro<GOperandAdd, GExprMul> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAnd = (*) RAExprMacro<GOperandAnd, GExprRel> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) CommaSeparatedList<GExpr> ")" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GBoolean ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GIdent ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GIdent "(" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GInteger ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GString ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) "(" GExprOr ")" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprMul = (*) LAExprMacro<GOperandMul, GExprUnary> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprOr = (*) RAExprMacro<GOperandOr, GExprAnd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprRel = (*) LAExprMacro<GOperandRel, GExprAdd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) "!" GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) "-" GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = "-" (*) GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GIdent = (*) r#"[A-Z,a-z,_\']+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GInteger = (*) r#"[+-]"# r#"[0-9]+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GInteger = (*) r#"[0-9]+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GString = (*) r#"\"([^,\",\\\\]|\\\\\")*\""# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandAdd, GExprMul> = (*) GExprMul ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandAdd, GExprMul> = (*) LAExprMacro<GOperandAdd, GExprMul> GOperandAdd GExprMul ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandMul, GExprUnary> = (*) GExprUnary ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandMul, GExprUnary> = (*) LAExprMacro<GOperandMul, GExprUnary> GOperandMul GExprUnary ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandRel, GExprAdd> = (*) GExprAdd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandRel, GExprAdd> = (*) LAExprMacro<GOperandRel, GExprAdd> GOperandRel GExprAdd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandAnd, GExprRel> = (*) GExprRel ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandAnd, GExprRel> = (*) GExprRel GOperandAnd RAExprMacro<GOperandAnd, GExprRel> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandOr, GExprAnd> = (*) GExprAnd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandOr, GExprAnd> = (*) GExprAnd GOperandOr RAExprMacro<GOperandOr, GExprAnd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `r#"[A-Z,a-z,_\']+"#` we can reduce to a `CommaSeparatedList<GExpr>` but we can also shift

/home/prybicki/code/latte/src/latte.lalrpop:108:20: 108:44: Conflict detected

    when in this state:
  (<GExpr> ",")+ = (<GExpr> ",")+ GExpr (*) "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  (<GExpr> ",")+ = GExpr (*) "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (<GExpr> ",")+ GExpr (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = GExpr (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `","` we can reduce to a `CommaSeparatedList<GExpr>` but we can also shift

/home/prybicki/code/latte/src/latte.lalrpop:108:20: 108:44: Conflict detected

    when in this state:
  (<GExpr> ",")+ = (<GExpr> ",")+ GExpr (*) "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  (<GExpr> ",")+ = GExpr (*) "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (<GExpr> ",")+ GExpr (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = GExpr (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `","` we can reduce to a `CommaSeparatedList<GExpr>` but we can also shift

/home/prybicki/code/latte/src/latte.lalrpop:108:20: 108:44: Conflict detected

    when in this state:
  (<GExpr> ",")+ = (<GExpr> ",")+ GExpr (*) "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  (<GExpr> ",")+ = GExpr (*) "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (<GExpr> ",")+ GExpr (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = GExpr (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `"!"` we can reduce to a `CommaSeparatedList<GExpr>` but we can also reduce to a `CommaSeparatedList<GExpr>`

/home/prybicki/code/latte/src/latte.lalrpop:108:20: 108:44: Conflict detected

    when in this state:
  (<GExpr> ",")+ = (<GExpr> ",")+ GExpr (*) "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  (<GExpr> ",")+ = GExpr (*) "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (<GExpr> ",")+ GExpr (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = GExpr (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `"%"` we can reduce to a `CommaSeparatedList<GExpr>` but we can also reduce to a `CommaSeparatedList<GExpr>`

/home/prybicki/code/latte/src/latte.lalrpop:108:20: 108:44: Conflict detected

    when in this state:
  (<GExpr> ",")+ = (<GExpr> ",")+ GExpr (*) "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  (<GExpr> ",")+ = GExpr (*) "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (<GExpr> ",")+ GExpr (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = GExpr (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `"&&"` we can reduce to a `CommaSeparatedList<GExpr>` but we can also reduce to a `CommaSeparatedList<GExpr>`

/home/prybicki/code/latte/src/latte.lalrpop:108:20: 108:44: Conflict detected

    when in this state:
  (<GExpr> ",")+ = (<GExpr> ",")+ GExpr (*) "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  (<GExpr> ",")+ = GExpr (*) "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (<GExpr> ",")+ GExpr (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = GExpr (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `"("` we can reduce to a `CommaSeparatedList<GExpr>` but we can also reduce to a `CommaSeparatedList<GExpr>`

/home/prybicki/code/latte/src/latte.lalrpop:108:20: 108:44: Local ambiguity detected

  The problem arises after having observed the following symbols in the input:
    (<GExpr> ",")+ GExpr
  At that point, if the next token is a `")"`, then the parser can proceed in two different ways.

  First, the parser could execute the production at /home/prybicki/code/latte/src/latte.lalrpop:108:20: 108:44, which would consume the top 2 token(s) from the stack and produce a `CommaSeparatedList<GExpr>`. This might then yield a parse tree like
    (<GExpr> ",")+          GExpr ")"
    ├─CommaSeparatedList<GExpr>─┘   │
    └─GExprAtom─────────────────────┘

  Alternatively, the parser could execute the production at /home/prybicki/code/latte/src/latte.lalrpop:108:20: 108:44, which would consume the top 1 token(s) from the stack and produce a `CommaSeparatedList<GExpr>`. This might then yield a parse tree like
    GExpr                       ╷ ")"
    ├─CommaSeparatedList<GExpr>─┘   │
    └─GExprAtom─────────────────────┘

  See the LALRPOP manual for advice on making your grammar LR(1).

/home/prybicki/code/latte/src/latte.lalrpop:108:20: 108:44: Conflict detected

    when in this state:
  (<GExpr> ",")+ = (<GExpr> ",")+ GExpr (*) "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  (<GExpr> ",")+ = GExpr (*) "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (<GExpr> ",")+ GExpr (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = GExpr (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `"*"` we can reduce to a `CommaSeparatedList<GExpr>` but we can also reduce to a `CommaSeparatedList<GExpr>`

/home/prybicki/code/latte/src/latte.lalrpop:108:20: 108:44: Conflict detected

    when in this state:
  (<GExpr> ",")+ = (<GExpr> ",")+ GExpr (*) "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  (<GExpr> ",")+ = GExpr (*) "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (<GExpr> ",")+ GExpr (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = GExpr (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `"+"` we can reduce to a `CommaSeparatedList<GExpr>` but we can also reduce to a `CommaSeparatedList<GExpr>`

/home/prybicki/code/latte/src/latte.lalrpop:108:20: 108:44: Conflict detected

    when in this state:
  (<GExpr> ",")+ = (<GExpr> ",")+ GExpr (*) "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  (<GExpr> ",")+ = GExpr (*) "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (<GExpr> ",")+ GExpr (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = GExpr (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `","` we can reduce to a `CommaSeparatedList<GExpr>` but we can also reduce to a `CommaSeparatedList<GExpr>`

/home/prybicki/code/latte/src/latte.lalrpop:108:20: 108:44: Conflict detected

    when in this state:
  (<GExpr> ",")+ = (<GExpr> ",")+ GExpr (*) "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  (<GExpr> ",")+ = GExpr (*) "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (<GExpr> ",")+ GExpr (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = GExpr (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `"-"` we can reduce to a `CommaSeparatedList<GExpr>` but we can also reduce to a `CommaSeparatedList<GExpr>`

/home/prybicki/code/latte/src/latte.lalrpop:108:20: 108:44: Conflict detected

    when in this state:
  (<GExpr> ",")+ = (<GExpr> ",")+ GExpr (*) "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  (<GExpr> ",")+ = GExpr (*) "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (<GExpr> ",")+ GExpr (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = GExpr (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `"/"` we can reduce to a `CommaSeparatedList<GExpr>` but we can also reduce to a `CommaSeparatedList<GExpr>`

/home/prybicki/code/latte/src/latte.lalrpop:108:20: 108:44: Conflict detected

    when in this state:
  (<GExpr> ",")+ = (<GExpr> ",")+ GExpr (*) "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  (<GExpr> ",")+ = GExpr (*) "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (<GExpr> ",")+ GExpr (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = GExpr (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `"<"` we can reduce to a `CommaSeparatedList<GExpr>` but we can also reduce to a `CommaSeparatedList<GExpr>`

/home/prybicki/code/latte/src/latte.lalrpop:108:20: 108:44: Conflict detected

    when in this state:
  (<GExpr> ",")+ = (<GExpr> ",")+ GExpr (*) "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  (<GExpr> ",")+ = GExpr (*) "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (<GExpr> ",")+ GExpr (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = GExpr (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `"<="` we can reduce to a `CommaSeparatedList<GExpr>` but we can also reduce to a `CommaSeparatedList<GExpr>`

/home/prybicki/code/latte/src/latte.lalrpop:108:20: 108:44: Conflict detected

    when in this state:
  (<GExpr> ",")+ = (<GExpr> ",")+ GExpr (*) "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  (<GExpr> ",")+ = GExpr (*) "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (<GExpr> ",")+ GExpr (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = GExpr (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `">"` we can reduce to a `CommaSeparatedList<GExpr>` but we can also reduce to a `CommaSeparatedList<GExpr>`

/home/prybicki/code/latte/src/latte.lalrpop:108:20: 108:44: Conflict detected

    when in this state:
  (<GExpr> ",")+ = (<GExpr> ",")+ GExpr (*) "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  (<GExpr> ",")+ = GExpr (*) "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (<GExpr> ",")+ GExpr (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = GExpr (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `">="` we can reduce to a `CommaSeparatedList<GExpr>` but we can also reduce to a `CommaSeparatedList<GExpr>`

/home/prybicki/code/latte/src/latte.lalrpop:108:20: 108:44: Conflict detected

    when in this state:
  (<GExpr> ",")+ = (<GExpr> ",")+ GExpr (*) "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  (<GExpr> ",")+ = GExpr (*) "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (<GExpr> ",")+ GExpr (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = GExpr (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `"false"` we can reduce to a `CommaSeparatedList<GExpr>` but we can also reduce to a `CommaSeparatedList<GExpr>`

/home/prybicki/code/latte/src/latte.lalrpop:108:20: 108:44: Conflict detected

    when in this state:
  (<GExpr> ",")+ = (<GExpr> ",")+ GExpr (*) "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  (<GExpr> ",")+ = GExpr (*) "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (<GExpr> ",")+ GExpr (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = GExpr (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `"true"` we can reduce to a `CommaSeparatedList<GExpr>` but we can also reduce to a `CommaSeparatedList<GExpr>`

/home/prybicki/code/latte/src/latte.lalrpop:108:20: 108:44: Conflict detected

    when in this state:
  (<GExpr> ",")+ = (<GExpr> ",")+ GExpr (*) "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  (<GExpr> ",")+ = GExpr (*) "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (<GExpr> ",")+ GExpr (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = GExpr (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `"||"` we can reduce to a `CommaSeparatedList<GExpr>` but we can also reduce to a `CommaSeparatedList<GExpr>`

/home/prybicki/code/latte/src/latte.lalrpop:108:20: 108:44: Conflict detected

    when in this state:
  (<GExpr> ",")+ = (<GExpr> ",")+ GExpr (*) "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  (<GExpr> ",")+ = GExpr (*) "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (<GExpr> ",")+ GExpr (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = GExpr (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `r#"\"([^,\",\\\\]|\\\\\")*\""#` we can reduce to a `CommaSeparatedList<GExpr>` but we can also reduce to a `CommaSeparatedList<GExpr>`

/home/prybicki/code/latte/src/latte.lalrpop:108:20: 108:44: Conflict detected

    when in this state:
  (<GExpr> ",")+ = (<GExpr> ",")+ GExpr (*) "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  (<GExpr> ",")+ = GExpr (*) "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (<GExpr> ",")+ GExpr (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = GExpr (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `r#"[+-]"#` we can reduce to a `CommaSeparatedList<GExpr>` but we can also reduce to a `CommaSeparatedList<GExpr>`

/home/prybicki/code/latte/src/latte.lalrpop:108:20: 108:44: Conflict detected

    when in this state:
  (<GExpr> ",")+ = (<GExpr> ",")+ GExpr (*) "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  (<GExpr> ",")+ = GExpr (*) "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (<GExpr> ",")+ GExpr (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = GExpr (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `r#"[0-9]+"#` we can reduce to a `CommaSeparatedList<GExpr>` but we can also reduce to a `CommaSeparatedList<GExpr>`

/home/prybicki/code/latte/src/latte.lalrpop:108:20: 108:44: Conflict detected

    when in this state:
  (<GExpr> ",")+ = (<GExpr> ",")+ GExpr (*) "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  (<GExpr> ",")+ = GExpr (*) "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (<GExpr> ",")+ GExpr (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = GExpr (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `r#"[A-Z,a-z,_\']+"#` we can reduce to a `CommaSeparatedList<GExpr>` but we can also reduce to a `CommaSeparatedList<GExpr>`

/home/prybicki/code/latte/src/latte.lalrpop:108:20: 108:44: Conflict detected

    when in this state:
  (<GExpr> ",")+ = (<GExpr> ",")+ GExpr (*) "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  (<GExpr> ",")+ = GExpr (*) "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (<GExpr> ",")+ GExpr (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = GExpr (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `EOF` we can reduce to a `CommaSeparatedList<GExpr>` but we can also reduce to a `CommaSeparatedList<GExpr>`

/home/prybicki/code/latte/src/latte.lalrpop:108:20: 108:44: Conflict detected

    when in this state:
  (<GExpr> ",")+ = (*) (<GExpr> ",")+ GExpr "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  (<GExpr> ",")+ = (*) GExpr "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) (<GExpr> ",")+ ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) (<GExpr> ",")+ GExpr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) GExpr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GBoolean = (*) "false" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GBoolean = (*) "true" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExpr = (*) GExprOr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAdd = (*) LAExprMacro<GOperandAdd, GExprMul> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAnd = (*) RAExprMacro<GOperandAnd, GExprRel> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) CommaSeparatedList<GExpr> ")" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GBoolean ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GIdent ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GIdent "(" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GInteger ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GString ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) "(" GExprOr ")" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprMul = (*) LAExprMacro<GOperandMul, GExprUnary> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprOr = (*) RAExprMacro<GOperandOr, GExprAnd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprRel = (*) LAExprMacro<GOperandRel, GExprAdd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) "!" GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) "-" GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GIdent = (*) r#"[A-Z,a-z,_\']+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GInteger = (*) r#"[+-]"# r#"[0-9]+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GInteger = (*) r#"[0-9]+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GString = (*) r#"\"([^,\",\\\\]|\\\\\")*\""# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandAdd, GExprMul> = (*) GExprMul ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandAdd, GExprMul> = (*) LAExprMacro<GOperandAdd, GExprMul> GOperandAdd GExprMul ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandMul, GExprUnary> = (*) GExprUnary ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandMul, GExprUnary> = (*) LAExprMacro<GOperandMul, GExprUnary> GOperandMul GExprUnary ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandRel, GExprAdd> = (*) GExprAdd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandRel, GExprAdd> = (*) LAExprMacro<GOperandRel, GExprAdd> GOperandRel GExprAdd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandAnd, GExprRel> = (*) GExprRel ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandAnd, GExprRel> = (*) GExprRel GOperandAnd RAExprMacro<GOperandAnd, GExprRel> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandOr, GExprAnd> = (*) GExprAnd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandOr, GExprAnd> = (*) GExprAnd GOperandOr RAExprMacro<GOperandOr, GExprAnd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandOr, GExprAnd> = GExprAnd GOperandOr (*) RAExprMacro<GOperandOr, GExprAnd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `"!"` we can reduce to a `CommaSeparatedList<GExpr>` but we can also shift

/home/prybicki/code/latte/src/latte.lalrpop:108:20: 108:44: Conflict detected

    when in this state:
  (<GExpr> ",")+ = (*) (<GExpr> ",")+ GExpr "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  (<GExpr> ",")+ = (*) GExpr "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) (<GExpr> ",")+ ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) (<GExpr> ",")+ GExpr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) GExpr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GBoolean = (*) "false" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GBoolean = (*) "true" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExpr = (*) GExprOr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAdd = (*) LAExprMacro<GOperandAdd, GExprMul> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAnd = (*) RAExprMacro<GOperandAnd, GExprRel> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) CommaSeparatedList<GExpr> ")" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GBoolean ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GIdent ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GIdent "(" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GInteger ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GString ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) "(" GExprOr ")" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprMul = (*) LAExprMacro<GOperandMul, GExprUnary> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprOr = (*) RAExprMacro<GOperandOr, GExprAnd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprRel = (*) LAExprMacro<GOperandRel, GExprAdd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) "!" GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) "-" GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GIdent = (*) r#"[A-Z,a-z,_\']+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GInteger = (*) r#"[+-]"# r#"[0-9]+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GInteger = (*) r#"[0-9]+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GString = (*) r#"\"([^,\",\\\\]|\\\\\")*\""# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandAdd, GExprMul> = (*) GExprMul ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandAdd, GExprMul> = (*) LAExprMacro<GOperandAdd, GExprMul> GOperandAdd GExprMul ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandMul, GExprUnary> = (*) GExprUnary ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandMul, GExprUnary> = (*) LAExprMacro<GOperandMul, GExprUnary> GOperandMul GExprUnary ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandRel, GExprAdd> = (*) GExprAdd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandRel, GExprAdd> = (*) LAExprMacro<GOperandRel, GExprAdd> GOperandRel GExprAdd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandAnd, GExprRel> = (*) GExprRel ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandAnd, GExprRel> = (*) GExprRel GOperandAnd RAExprMacro<GOperandAnd, GExprRel> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandOr, GExprAnd> = (*) GExprAnd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandOr, GExprAnd> = (*) GExprAnd GOperandOr RAExprMacro<GOperandOr, GExprAnd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandOr, GExprAnd> = GExprAnd GOperandOr (*) RAExprMacro<GOperandOr, GExprAnd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `"("` we can reduce to a `CommaSeparatedList<GExpr>` but we can also shift

/home/prybicki/code/latte/src/latte.lalrpop:108:20: 108:44: Conflict detected

    when in this state:
  (<GExpr> ",")+ = (*) (<GExpr> ",")+ GExpr "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  (<GExpr> ",")+ = (*) GExpr "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) (<GExpr> ",")+ ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) (<GExpr> ",")+ GExpr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) GExpr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GBoolean = (*) "false" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GBoolean = (*) "true" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExpr = (*) GExprOr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAdd = (*) LAExprMacro<GOperandAdd, GExprMul> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAnd = (*) RAExprMacro<GOperandAnd, GExprRel> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) CommaSeparatedList<GExpr> ")" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GBoolean ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GIdent ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GIdent "(" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GInteger ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GString ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) "(" GExprOr ")" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprMul = (*) LAExprMacro<GOperandMul, GExprUnary> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprOr = (*) RAExprMacro<GOperandOr, GExprAnd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprRel = (*) LAExprMacro<GOperandRel, GExprAdd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) "!" GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) "-" GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GIdent = (*) r#"[A-Z,a-z,_\']+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GInteger = (*) r#"[+-]"# r#"[0-9]+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GInteger = (*) r#"[0-9]+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GString = (*) r#"\"([^,\",\\\\]|\\\\\")*\""# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandAdd, GExprMul> = (*) GExprMul ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandAdd, GExprMul> = (*) LAExprMacro<GOperandAdd, GExprMul> GOperandAdd GExprMul ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandMul, GExprUnary> = (*) GExprUnary ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandMul, GExprUnary> = (*) LAExprMacro<GOperandMul, GExprUnary> GOperandMul GExprUnary ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandRel, GExprAdd> = (*) GExprAdd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandRel, GExprAdd> = (*) LAExprMacro<GOperandRel, GExprAdd> GOperandRel GExprAdd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandAnd, GExprRel> = (*) GExprRel ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandAnd, GExprRel> = (*) GExprRel GOperandAnd RAExprMacro<GOperandAnd, GExprRel> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandOr, GExprAnd> = (*) GExprAnd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandOr, GExprAnd> = (*) GExprAnd GOperandOr RAExprMacro<GOperandOr, GExprAnd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandOr, GExprAnd> = GExprAnd GOperandOr (*) RAExprMacro<GOperandOr, GExprAnd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `"-"` we can reduce to a `CommaSeparatedList<GExpr>` but we can also shift

/home/prybicki/code/latte/src/latte.lalrpop:108:20: 108:44: Conflict detected

    when in this state:
  (<GExpr> ",")+ = (*) (<GExpr> ",")+ GExpr "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  (<GExpr> ",")+ = (*) GExpr "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) (<GExpr> ",")+ ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) (<GExpr> ",")+ GExpr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) GExpr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GBoolean = (*) "false" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GBoolean = (*) "true" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExpr = (*) GExprOr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAdd = (*) LAExprMacro<GOperandAdd, GExprMul> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAnd = (*) RAExprMacro<GOperandAnd, GExprRel> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) CommaSeparatedList<GExpr> ")" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GBoolean ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GIdent ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GIdent "(" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GInteger ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GString ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) "(" GExprOr ")" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprMul = (*) LAExprMacro<GOperandMul, GExprUnary> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprOr = (*) RAExprMacro<GOperandOr, GExprAnd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprRel = (*) LAExprMacro<GOperandRel, GExprAdd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) "!" GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) "-" GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GIdent = (*) r#"[A-Z,a-z,_\']+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GInteger = (*) r#"[+-]"# r#"[0-9]+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GInteger = (*) r#"[0-9]+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GString = (*) r#"\"([^,\",\\\\]|\\\\\")*\""# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandAdd, GExprMul> = (*) GExprMul ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandAdd, GExprMul> = (*) LAExprMacro<GOperandAdd, GExprMul> GOperandAdd GExprMul ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandMul, GExprUnary> = (*) GExprUnary ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandMul, GExprUnary> = (*) LAExprMacro<GOperandMul, GExprUnary> GOperandMul GExprUnary ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandRel, GExprAdd> = (*) GExprAdd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandRel, GExprAdd> = (*) LAExprMacro<GOperandRel, GExprAdd> GOperandRel GExprAdd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandAnd, GExprRel> = (*) GExprRel ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandAnd, GExprRel> = (*) GExprRel GOperandAnd RAExprMacro<GOperandAnd, GExprRel> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandOr, GExprAnd> = (*) GExprAnd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandOr, GExprAnd> = (*) GExprAnd GOperandOr RAExprMacro<GOperandOr, GExprAnd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandOr, GExprAnd> = GExprAnd GOperandOr (*) RAExprMacro<GOperandOr, GExprAnd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `"false"` we can reduce to a `CommaSeparatedList<GExpr>` but we can also shift

/home/prybicki/code/latte/src/latte.lalrpop:108:20: 108:44: Conflict detected

    when in this state:
  (<GExpr> ",")+ = (*) (<GExpr> ",")+ GExpr "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  (<GExpr> ",")+ = (*) GExpr "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) (<GExpr> ",")+ ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) (<GExpr> ",")+ GExpr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) GExpr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GBoolean = (*) "false" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GBoolean = (*) "true" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExpr = (*) GExprOr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAdd = (*) LAExprMacro<GOperandAdd, GExprMul> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAnd = (*) RAExprMacro<GOperandAnd, GExprRel> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) CommaSeparatedList<GExpr> ")" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GBoolean ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GIdent ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GIdent "(" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GInteger ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GString ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) "(" GExprOr ")" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprMul = (*) LAExprMacro<GOperandMul, GExprUnary> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprOr = (*) RAExprMacro<GOperandOr, GExprAnd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprRel = (*) LAExprMacro<GOperandRel, GExprAdd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) "!" GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) "-" GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GIdent = (*) r#"[A-Z,a-z,_\']+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GInteger = (*) r#"[+-]"# r#"[0-9]+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GInteger = (*) r#"[0-9]+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GString = (*) r#"\"([^,\",\\\\]|\\\\\")*\""# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandAdd, GExprMul> = (*) GExprMul ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandAdd, GExprMul> = (*) LAExprMacro<GOperandAdd, GExprMul> GOperandAdd GExprMul ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandMul, GExprUnary> = (*) GExprUnary ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandMul, GExprUnary> = (*) LAExprMacro<GOperandMul, GExprUnary> GOperandMul GExprUnary ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandRel, GExprAdd> = (*) GExprAdd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandRel, GExprAdd> = (*) LAExprMacro<GOperandRel, GExprAdd> GOperandRel GExprAdd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandAnd, GExprRel> = (*) GExprRel ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandAnd, GExprRel> = (*) GExprRel GOperandAnd RAExprMacro<GOperandAnd, GExprRel> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandOr, GExprAnd> = (*) GExprAnd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandOr, GExprAnd> = (*) GExprAnd GOperandOr RAExprMacro<GOperandOr, GExprAnd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandOr, GExprAnd> = GExprAnd GOperandOr (*) RAExprMacro<GOperandOr, GExprAnd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `"true"` we can reduce to a `CommaSeparatedList<GExpr>` but we can also shift

/home/prybicki/code/latte/src/latte.lalrpop:108:20: 108:44: Conflict detected

    when in this state:
  (<GExpr> ",")+ = (*) (<GExpr> ",")+ GExpr "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  (<GExpr> ",")+ = (*) GExpr "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) (<GExpr> ",")+ ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) (<GExpr> ",")+ GExpr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) GExpr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GBoolean = (*) "false" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GBoolean = (*) "true" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExpr = (*) GExprOr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAdd = (*) LAExprMacro<GOperandAdd, GExprMul> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAnd = (*) RAExprMacro<GOperandAnd, GExprRel> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) CommaSeparatedList<GExpr> ")" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GBoolean ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GIdent ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GIdent "(" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GInteger ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GString ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) "(" GExprOr ")" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprMul = (*) LAExprMacro<GOperandMul, GExprUnary> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprOr = (*) RAExprMacro<GOperandOr, GExprAnd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprRel = (*) LAExprMacro<GOperandRel, GExprAdd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) "!" GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) "-" GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GIdent = (*) r#"[A-Z,a-z,_\']+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GInteger = (*) r#"[+-]"# r#"[0-9]+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GInteger = (*) r#"[0-9]+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GString = (*) r#"\"([^,\",\\\\]|\\\\\")*\""# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandAdd, GExprMul> = (*) GExprMul ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandAdd, GExprMul> = (*) LAExprMacro<GOperandAdd, GExprMul> GOperandAdd GExprMul ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandMul, GExprUnary> = (*) GExprUnary ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandMul, GExprUnary> = (*) LAExprMacro<GOperandMul, GExprUnary> GOperandMul GExprUnary ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandRel, GExprAdd> = (*) GExprAdd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandRel, GExprAdd> = (*) LAExprMacro<GOperandRel, GExprAdd> GOperandRel GExprAdd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandAnd, GExprRel> = (*) GExprRel ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandAnd, GExprRel> = (*) GExprRel GOperandAnd RAExprMacro<GOperandAnd, GExprRel> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandOr, GExprAnd> = (*) GExprAnd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandOr, GExprAnd> = (*) GExprAnd GOperandOr RAExprMacro<GOperandOr, GExprAnd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandOr, GExprAnd> = GExprAnd GOperandOr (*) RAExprMacro<GOperandOr, GExprAnd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `r#"\"([^,\",\\\\]|\\\\\")*\""#` we can reduce to a `CommaSeparatedList<GExpr>` but we can also shift

/home/prybicki/code/latte/src/latte.lalrpop:108:20: 108:44: Conflict detected

    when in this state:
  (<GExpr> ",")+ = (*) (<GExpr> ",")+ GExpr "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  (<GExpr> ",")+ = (*) GExpr "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) (<GExpr> ",")+ ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) (<GExpr> ",")+ GExpr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) GExpr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GBoolean = (*) "false" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GBoolean = (*) "true" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExpr = (*) GExprOr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAdd = (*) LAExprMacro<GOperandAdd, GExprMul> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAnd = (*) RAExprMacro<GOperandAnd, GExprRel> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) CommaSeparatedList<GExpr> ")" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GBoolean ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GIdent ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GIdent "(" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GInteger ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GString ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) "(" GExprOr ")" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprMul = (*) LAExprMacro<GOperandMul, GExprUnary> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprOr = (*) RAExprMacro<GOperandOr, GExprAnd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprRel = (*) LAExprMacro<GOperandRel, GExprAdd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) "!" GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) "-" GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GIdent = (*) r#"[A-Z,a-z,_\']+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GInteger = (*) r#"[+-]"# r#"[0-9]+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GInteger = (*) r#"[0-9]+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GString = (*) r#"\"([^,\",\\\\]|\\\\\")*\""# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandAdd, GExprMul> = (*) GExprMul ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandAdd, GExprMul> = (*) LAExprMacro<GOperandAdd, GExprMul> GOperandAdd GExprMul ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandMul, GExprUnary> = (*) GExprUnary ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandMul, GExprUnary> = (*) LAExprMacro<GOperandMul, GExprUnary> GOperandMul GExprUnary ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandRel, GExprAdd> = (*) GExprAdd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandRel, GExprAdd> = (*) LAExprMacro<GOperandRel, GExprAdd> GOperandRel GExprAdd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandAnd, GExprRel> = (*) GExprRel ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandAnd, GExprRel> = (*) GExprRel GOperandAnd RAExprMacro<GOperandAnd, GExprRel> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandOr, GExprAnd> = (*) GExprAnd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandOr, GExprAnd> = (*) GExprAnd GOperandOr RAExprMacro<GOperandOr, GExprAnd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandOr, GExprAnd> = GExprAnd GOperandOr (*) RAExprMacro<GOperandOr, GExprAnd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `r#"[+-]"#` we can reduce to a `CommaSeparatedList<GExpr>` but we can also shift

/home/prybicki/code/latte/src/latte.lalrpop:108:20: 108:44: Conflict detected

    when in this state:
  (<GExpr> ",")+ = (*) (<GExpr> ",")+ GExpr "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  (<GExpr> ",")+ = (*) GExpr "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) (<GExpr> ",")+ ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) (<GExpr> ",")+ GExpr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) GExpr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GBoolean = (*) "false" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GBoolean = (*) "true" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExpr = (*) GExprOr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAdd = (*) LAExprMacro<GOperandAdd, GExprMul> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAnd = (*) RAExprMacro<GOperandAnd, GExprRel> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) CommaSeparatedList<GExpr> ")" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GBoolean ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GIdent ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GIdent "(" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GInteger ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GString ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) "(" GExprOr ")" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprMul = (*) LAExprMacro<GOperandMul, GExprUnary> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprOr = (*) RAExprMacro<GOperandOr, GExprAnd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprRel = (*) LAExprMacro<GOperandRel, GExprAdd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) "!" GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) "-" GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GIdent = (*) r#"[A-Z,a-z,_\']+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GInteger = (*) r#"[+-]"# r#"[0-9]+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GInteger = (*) r#"[0-9]+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GString = (*) r#"\"([^,\",\\\\]|\\\\\")*\""# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandAdd, GExprMul> = (*) GExprMul ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandAdd, GExprMul> = (*) LAExprMacro<GOperandAdd, GExprMul> GOperandAdd GExprMul ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandMul, GExprUnary> = (*) GExprUnary ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandMul, GExprUnary> = (*) LAExprMacro<GOperandMul, GExprUnary> GOperandMul GExprUnary ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandRel, GExprAdd> = (*) GExprAdd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandRel, GExprAdd> = (*) LAExprMacro<GOperandRel, GExprAdd> GOperandRel GExprAdd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandAnd, GExprRel> = (*) GExprRel ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandAnd, GExprRel> = (*) GExprRel GOperandAnd RAExprMacro<GOperandAnd, GExprRel> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandOr, GExprAnd> = (*) GExprAnd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandOr, GExprAnd> = (*) GExprAnd GOperandOr RAExprMacro<GOperandOr, GExprAnd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandOr, GExprAnd> = GExprAnd GOperandOr (*) RAExprMacro<GOperandOr, GExprAnd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `r#"[0-9]+"#` we can reduce to a `CommaSeparatedList<GExpr>` but we can also shift

/home/prybicki/code/latte/src/latte.lalrpop:108:20: 108:44: Conflict detected

    when in this state:
  (<GExpr> ",")+ = (*) (<GExpr> ",")+ GExpr "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  (<GExpr> ",")+ = (*) GExpr "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) (<GExpr> ",")+ ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) (<GExpr> ",")+ GExpr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) GExpr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GBoolean = (*) "false" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GBoolean = (*) "true" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExpr = (*) GExprOr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAdd = (*) LAExprMacro<GOperandAdd, GExprMul> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAnd = (*) RAExprMacro<GOperandAnd, GExprRel> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) CommaSeparatedList<GExpr> ")" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GBoolean ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GIdent ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GIdent "(" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GInteger ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GString ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) "(" GExprOr ")" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprMul = (*) LAExprMacro<GOperandMul, GExprUnary> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprOr = (*) RAExprMacro<GOperandOr, GExprAnd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprRel = (*) LAExprMacro<GOperandRel, GExprAdd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) "!" GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) "-" GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GIdent = (*) r#"[A-Z,a-z,_\']+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GInteger = (*) r#"[+-]"# r#"[0-9]+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GInteger = (*) r#"[0-9]+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GString = (*) r#"\"([^,\",\\\\]|\\\\\")*\""# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandAdd, GExprMul> = (*) GExprMul ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandAdd, GExprMul> = (*) LAExprMacro<GOperandAdd, GExprMul> GOperandAdd GExprMul ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandMul, GExprUnary> = (*) GExprUnary ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandMul, GExprUnary> = (*) LAExprMacro<GOperandMul, GExprUnary> GOperandMul GExprUnary ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandRel, GExprAdd> = (*) GExprAdd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandRel, GExprAdd> = (*) LAExprMacro<GOperandRel, GExprAdd> GOperandRel GExprAdd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandAnd, GExprRel> = (*) GExprRel ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandAnd, GExprRel> = (*) GExprRel GOperandAnd RAExprMacro<GOperandAnd, GExprRel> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandOr, GExprAnd> = (*) GExprAnd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandOr, GExprAnd> = (*) GExprAnd GOperandOr RAExprMacro<GOperandOr, GExprAnd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandOr, GExprAnd> = GExprAnd GOperandOr (*) RAExprMacro<GOperandOr, GExprAnd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `r#"[A-Z,a-z,_\']+"#` we can reduce to a `CommaSeparatedList<GExpr>` but we can also shift

/home/prybicki/code/latte/src/latte.lalrpop:108:20: 108:44: Conflict detected

    when in this state:
  (<GExpr> ",")+ = (*) (<GExpr> ",")+ GExpr "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  (<GExpr> ",")+ = (*) GExpr "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) (<GExpr> ",")+ ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) (<GExpr> ",")+ GExpr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) GExpr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GBoolean = (*) "false" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GBoolean = (*) "true" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExpr = (*) GExprOr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAdd = (*) LAExprMacro<GOperandAdd, GExprMul> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAnd = (*) RAExprMacro<GOperandAnd, GExprRel> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) CommaSeparatedList<GExpr> ")" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GBoolean ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GIdent ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GIdent "(" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GInteger ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GString ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) "(" GExprOr ")" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprMul = (*) LAExprMacro<GOperandMul, GExprUnary> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprOr = (*) RAExprMacro<GOperandOr, GExprAnd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprRel = (*) LAExprMacro<GOperandRel, GExprAdd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) "!" GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) "-" GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GIdent = (*) r#"[A-Z,a-z,_\']+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GInteger = (*) r#"[+-]"# r#"[0-9]+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GInteger = (*) r#"[0-9]+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GString = (*) r#"\"([^,\",\\\\]|\\\\\")*\""# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandAdd, GExprMul> = (*) GExprMul ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandAdd, GExprMul> = (*) LAExprMacro<GOperandAdd, GExprMul> GOperandAdd GExprMul ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandMul, GExprUnary> = (*) GExprUnary ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandMul, GExprUnary> = (*) LAExprMacro<GOperandMul, GExprUnary> GOperandMul GExprUnary ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandRel, GExprAdd> = (*) GExprAdd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandRel, GExprAdd> = (*) LAExprMacro<GOperandRel, GExprAdd> GOperandRel GExprAdd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandAnd, GExprRel> = (*) GExprRel ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandAnd, GExprRel> = (*) GExprRel GOperandAnd RAExprMacro<GOperandAnd, GExprRel> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandAnd, GExprRel> = GExprRel GOperandAnd (*) RAExprMacro<GOperandAnd, GExprRel> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandOr, GExprAnd> = (*) GExprAnd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandOr, GExprAnd> = (*) GExprAnd GOperandOr RAExprMacro<GOperandOr, GExprAnd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `"!"` we can reduce to a `CommaSeparatedList<GExpr>` but we can also shift

/home/prybicki/code/latte/src/latte.lalrpop:108:20: 108:44: Conflict detected

    when in this state:
  (<GExpr> ",")+ = (*) (<GExpr> ",")+ GExpr "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  (<GExpr> ",")+ = (*) GExpr "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) (<GExpr> ",")+ ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) (<GExpr> ",")+ GExpr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) GExpr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GBoolean = (*) "false" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GBoolean = (*) "true" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExpr = (*) GExprOr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAdd = (*) LAExprMacro<GOperandAdd, GExprMul> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAnd = (*) RAExprMacro<GOperandAnd, GExprRel> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) CommaSeparatedList<GExpr> ")" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GBoolean ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GIdent ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GIdent "(" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GInteger ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GString ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) "(" GExprOr ")" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprMul = (*) LAExprMacro<GOperandMul, GExprUnary> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprOr = (*) RAExprMacro<GOperandOr, GExprAnd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprRel = (*) LAExprMacro<GOperandRel, GExprAdd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) "!" GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) "-" GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GIdent = (*) r#"[A-Z,a-z,_\']+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GInteger = (*) r#"[+-]"# r#"[0-9]+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GInteger = (*) r#"[0-9]+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GString = (*) r#"\"([^,\",\\\\]|\\\\\")*\""# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandAdd, GExprMul> = (*) GExprMul ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandAdd, GExprMul> = (*) LAExprMacro<GOperandAdd, GExprMul> GOperandAdd GExprMul ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandMul, GExprUnary> = (*) GExprUnary ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandMul, GExprUnary> = (*) LAExprMacro<GOperandMul, GExprUnary> GOperandMul GExprUnary ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandRel, GExprAdd> = (*) GExprAdd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandRel, GExprAdd> = (*) LAExprMacro<GOperandRel, GExprAdd> GOperandRel GExprAdd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandAnd, GExprRel> = (*) GExprRel ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandAnd, GExprRel> = (*) GExprRel GOperandAnd RAExprMacro<GOperandAnd, GExprRel> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandAnd, GExprRel> = GExprRel GOperandAnd (*) RAExprMacro<GOperandAnd, GExprRel> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandOr, GExprAnd> = (*) GExprAnd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandOr, GExprAnd> = (*) GExprAnd GOperandOr RAExprMacro<GOperandOr, GExprAnd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `"("` we can reduce to a `CommaSeparatedList<GExpr>` but we can also shift

/home/prybicki/code/latte/src/latte.lalrpop:108:20: 108:44: Conflict detected

    when in this state:
  (<GExpr> ",")+ = (*) (<GExpr> ",")+ GExpr "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  (<GExpr> ",")+ = (*) GExpr "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) (<GExpr> ",")+ ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) (<GExpr> ",")+ GExpr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) GExpr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GBoolean = (*) "false" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GBoolean = (*) "true" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExpr = (*) GExprOr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAdd = (*) LAExprMacro<GOperandAdd, GExprMul> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAnd = (*) RAExprMacro<GOperandAnd, GExprRel> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) CommaSeparatedList<GExpr> ")" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GBoolean ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GIdent ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GIdent "(" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GInteger ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GString ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) "(" GExprOr ")" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprMul = (*) LAExprMacro<GOperandMul, GExprUnary> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprOr = (*) RAExprMacro<GOperandOr, GExprAnd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprRel = (*) LAExprMacro<GOperandRel, GExprAdd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) "!" GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) "-" GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GIdent = (*) r#"[A-Z,a-z,_\']+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GInteger = (*) r#"[+-]"# r#"[0-9]+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GInteger = (*) r#"[0-9]+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GString = (*) r#"\"([^,\",\\\\]|\\\\\")*\""# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandAdd, GExprMul> = (*) GExprMul ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandAdd, GExprMul> = (*) LAExprMacro<GOperandAdd, GExprMul> GOperandAdd GExprMul ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandMul, GExprUnary> = (*) GExprUnary ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandMul, GExprUnary> = (*) LAExprMacro<GOperandMul, GExprUnary> GOperandMul GExprUnary ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandRel, GExprAdd> = (*) GExprAdd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandRel, GExprAdd> = (*) LAExprMacro<GOperandRel, GExprAdd> GOperandRel GExprAdd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandAnd, GExprRel> = (*) GExprRel ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandAnd, GExprRel> = (*) GExprRel GOperandAnd RAExprMacro<GOperandAnd, GExprRel> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandAnd, GExprRel> = GExprRel GOperandAnd (*) RAExprMacro<GOperandAnd, GExprRel> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandOr, GExprAnd> = (*) GExprAnd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandOr, GExprAnd> = (*) GExprAnd GOperandOr RAExprMacro<GOperandOr, GExprAnd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `"-"` we can reduce to a `CommaSeparatedList<GExpr>` but we can also shift

/home/prybicki/code/latte/src/latte.lalrpop:108:20: 108:44: Conflict detected

    when in this state:
  (<GExpr> ",")+ = (*) (<GExpr> ",")+ GExpr "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  (<GExpr> ",")+ = (*) GExpr "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) (<GExpr> ",")+ ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) (<GExpr> ",")+ GExpr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) GExpr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GBoolean = (*) "false" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GBoolean = (*) "true" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExpr = (*) GExprOr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAdd = (*) LAExprMacro<GOperandAdd, GExprMul> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAnd = (*) RAExprMacro<GOperandAnd, GExprRel> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) CommaSeparatedList<GExpr> ")" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GBoolean ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GIdent ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GIdent "(" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GInteger ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GString ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) "(" GExprOr ")" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprMul = (*) LAExprMacro<GOperandMul, GExprUnary> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprOr = (*) RAExprMacro<GOperandOr, GExprAnd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprRel = (*) LAExprMacro<GOperandRel, GExprAdd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) "!" GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) "-" GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GIdent = (*) r#"[A-Z,a-z,_\']+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GInteger = (*) r#"[+-]"# r#"[0-9]+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GInteger = (*) r#"[0-9]+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GString = (*) r#"\"([^,\",\\\\]|\\\\\")*\""# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandAdd, GExprMul> = (*) GExprMul ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandAdd, GExprMul> = (*) LAExprMacro<GOperandAdd, GExprMul> GOperandAdd GExprMul ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandMul, GExprUnary> = (*) GExprUnary ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandMul, GExprUnary> = (*) LAExprMacro<GOperandMul, GExprUnary> GOperandMul GExprUnary ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandRel, GExprAdd> = (*) GExprAdd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandRel, GExprAdd> = (*) LAExprMacro<GOperandRel, GExprAdd> GOperandRel GExprAdd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandAnd, GExprRel> = (*) GExprRel ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandAnd, GExprRel> = (*) GExprRel GOperandAnd RAExprMacro<GOperandAnd, GExprRel> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandAnd, GExprRel> = GExprRel GOperandAnd (*) RAExprMacro<GOperandAnd, GExprRel> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandOr, GExprAnd> = (*) GExprAnd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandOr, GExprAnd> = (*) GExprAnd GOperandOr RAExprMacro<GOperandOr, GExprAnd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `"false"` we can reduce to a `CommaSeparatedList<GExpr>` but we can also shift

/home/prybicki/code/latte/src/latte.lalrpop:108:20: 108:44: Conflict detected

    when in this state:
  (<GExpr> ",")+ = (*) (<GExpr> ",")+ GExpr "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  (<GExpr> ",")+ = (*) GExpr "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) (<GExpr> ",")+ ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) (<GExpr> ",")+ GExpr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) GExpr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GBoolean = (*) "false" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GBoolean = (*) "true" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExpr = (*) GExprOr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAdd = (*) LAExprMacro<GOperandAdd, GExprMul> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAnd = (*) RAExprMacro<GOperandAnd, GExprRel> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) CommaSeparatedList<GExpr> ")" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GBoolean ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GIdent ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GIdent "(" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GInteger ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GString ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) "(" GExprOr ")" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprMul = (*) LAExprMacro<GOperandMul, GExprUnary> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprOr = (*) RAExprMacro<GOperandOr, GExprAnd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprRel = (*) LAExprMacro<GOperandRel, GExprAdd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) "!" GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) "-" GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GIdent = (*) r#"[A-Z,a-z,_\']+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GInteger = (*) r#"[+-]"# r#"[0-9]+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GInteger = (*) r#"[0-9]+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GString = (*) r#"\"([^,\",\\\\]|\\\\\")*\""# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandAdd, GExprMul> = (*) GExprMul ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandAdd, GExprMul> = (*) LAExprMacro<GOperandAdd, GExprMul> GOperandAdd GExprMul ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandMul, GExprUnary> = (*) GExprUnary ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandMul, GExprUnary> = (*) LAExprMacro<GOperandMul, GExprUnary> GOperandMul GExprUnary ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandRel, GExprAdd> = (*) GExprAdd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandRel, GExprAdd> = (*) LAExprMacro<GOperandRel, GExprAdd> GOperandRel GExprAdd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandAnd, GExprRel> = (*) GExprRel ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandAnd, GExprRel> = (*) GExprRel GOperandAnd RAExprMacro<GOperandAnd, GExprRel> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandAnd, GExprRel> = GExprRel GOperandAnd (*) RAExprMacro<GOperandAnd, GExprRel> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandOr, GExprAnd> = (*) GExprAnd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandOr, GExprAnd> = (*) GExprAnd GOperandOr RAExprMacro<GOperandOr, GExprAnd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `"true"` we can reduce to a `CommaSeparatedList<GExpr>` but we can also shift

/home/prybicki/code/latte/src/latte.lalrpop:108:20: 108:44: Conflict detected

    when in this state:
  (<GExpr> ",")+ = (*) (<GExpr> ",")+ GExpr "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  (<GExpr> ",")+ = (*) GExpr "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) (<GExpr> ",")+ ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) (<GExpr> ",")+ GExpr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) GExpr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GBoolean = (*) "false" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GBoolean = (*) "true" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExpr = (*) GExprOr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAdd = (*) LAExprMacro<GOperandAdd, GExprMul> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAnd = (*) RAExprMacro<GOperandAnd, GExprRel> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) CommaSeparatedList<GExpr> ")" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GBoolean ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GIdent ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GIdent "(" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GInteger ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GString ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) "(" GExprOr ")" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprMul = (*) LAExprMacro<GOperandMul, GExprUnary> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprOr = (*) RAExprMacro<GOperandOr, GExprAnd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprRel = (*) LAExprMacro<GOperandRel, GExprAdd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) "!" GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) "-" GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GIdent = (*) r#"[A-Z,a-z,_\']+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GInteger = (*) r#"[+-]"# r#"[0-9]+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GInteger = (*) r#"[0-9]+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GString = (*) r#"\"([^,\",\\\\]|\\\\\")*\""# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandAdd, GExprMul> = (*) GExprMul ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandAdd, GExprMul> = (*) LAExprMacro<GOperandAdd, GExprMul> GOperandAdd GExprMul ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandMul, GExprUnary> = (*) GExprUnary ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandMul, GExprUnary> = (*) LAExprMacro<GOperandMul, GExprUnary> GOperandMul GExprUnary ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandRel, GExprAdd> = (*) GExprAdd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandRel, GExprAdd> = (*) LAExprMacro<GOperandRel, GExprAdd> GOperandRel GExprAdd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandAnd, GExprRel> = (*) GExprRel ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandAnd, GExprRel> = (*) GExprRel GOperandAnd RAExprMacro<GOperandAnd, GExprRel> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandAnd, GExprRel> = GExprRel GOperandAnd (*) RAExprMacro<GOperandAnd, GExprRel> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandOr, GExprAnd> = (*) GExprAnd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandOr, GExprAnd> = (*) GExprAnd GOperandOr RAExprMacro<GOperandOr, GExprAnd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `r#"\"([^,\",\\\\]|\\\\\")*\""#` we can reduce to a `CommaSeparatedList<GExpr>` but we can also shift

/home/prybicki/code/latte/src/latte.lalrpop:108:20: 108:44: Conflict detected

    when in this state:
  (<GExpr> ",")+ = (*) (<GExpr> ",")+ GExpr "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  (<GExpr> ",")+ = (*) GExpr "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) (<GExpr> ",")+ ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) (<GExpr> ",")+ GExpr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) GExpr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GBoolean = (*) "false" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GBoolean = (*) "true" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExpr = (*) GExprOr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAdd = (*) LAExprMacro<GOperandAdd, GExprMul> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAnd = (*) RAExprMacro<GOperandAnd, GExprRel> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) CommaSeparatedList<GExpr> ")" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GBoolean ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GIdent ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GIdent "(" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GInteger ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GString ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) "(" GExprOr ")" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprMul = (*) LAExprMacro<GOperandMul, GExprUnary> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprOr = (*) RAExprMacro<GOperandOr, GExprAnd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprRel = (*) LAExprMacro<GOperandRel, GExprAdd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) "!" GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) "-" GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GIdent = (*) r#"[A-Z,a-z,_\']+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GInteger = (*) r#"[+-]"# r#"[0-9]+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GInteger = (*) r#"[0-9]+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GString = (*) r#"\"([^,\",\\\\]|\\\\\")*\""# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandAdd, GExprMul> = (*) GExprMul ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandAdd, GExprMul> = (*) LAExprMacro<GOperandAdd, GExprMul> GOperandAdd GExprMul ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandMul, GExprUnary> = (*) GExprUnary ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandMul, GExprUnary> = (*) LAExprMacro<GOperandMul, GExprUnary> GOperandMul GExprUnary ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandRel, GExprAdd> = (*) GExprAdd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandRel, GExprAdd> = (*) LAExprMacro<GOperandRel, GExprAdd> GOperandRel GExprAdd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandAnd, GExprRel> = (*) GExprRel ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandAnd, GExprRel> = (*) GExprRel GOperandAnd RAExprMacro<GOperandAnd, GExprRel> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandAnd, GExprRel> = GExprRel GOperandAnd (*) RAExprMacro<GOperandAnd, GExprRel> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandOr, GExprAnd> = (*) GExprAnd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandOr, GExprAnd> = (*) GExprAnd GOperandOr RAExprMacro<GOperandOr, GExprAnd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `r#"[+-]"#` we can reduce to a `CommaSeparatedList<GExpr>` but we can also shift

/home/prybicki/code/latte/src/latte.lalrpop:108:20: 108:44: Conflict detected

    when in this state:
  (<GExpr> ",")+ = (*) (<GExpr> ",")+ GExpr "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  (<GExpr> ",")+ = (*) GExpr "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) (<GExpr> ",")+ ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) (<GExpr> ",")+ GExpr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) GExpr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GBoolean = (*) "false" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GBoolean = (*) "true" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExpr = (*) GExprOr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAdd = (*) LAExprMacro<GOperandAdd, GExprMul> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAnd = (*) RAExprMacro<GOperandAnd, GExprRel> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) CommaSeparatedList<GExpr> ")" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GBoolean ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GIdent ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GIdent "(" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GInteger ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GString ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) "(" GExprOr ")" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprMul = (*) LAExprMacro<GOperandMul, GExprUnary> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprOr = (*) RAExprMacro<GOperandOr, GExprAnd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprRel = (*) LAExprMacro<GOperandRel, GExprAdd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) "!" GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) "-" GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GIdent = (*) r#"[A-Z,a-z,_\']+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GInteger = (*) r#"[+-]"# r#"[0-9]+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GInteger = (*) r#"[0-9]+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GString = (*) r#"\"([^,\",\\\\]|\\\\\")*\""# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandAdd, GExprMul> = (*) GExprMul ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandAdd, GExprMul> = (*) LAExprMacro<GOperandAdd, GExprMul> GOperandAdd GExprMul ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandMul, GExprUnary> = (*) GExprUnary ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandMul, GExprUnary> = (*) LAExprMacro<GOperandMul, GExprUnary> GOperandMul GExprUnary ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandRel, GExprAdd> = (*) GExprAdd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandRel, GExprAdd> = (*) LAExprMacro<GOperandRel, GExprAdd> GOperandRel GExprAdd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandAnd, GExprRel> = (*) GExprRel ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandAnd, GExprRel> = (*) GExprRel GOperandAnd RAExprMacro<GOperandAnd, GExprRel> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandAnd, GExprRel> = GExprRel GOperandAnd (*) RAExprMacro<GOperandAnd, GExprRel> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandOr, GExprAnd> = (*) GExprAnd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandOr, GExprAnd> = (*) GExprAnd GOperandOr RAExprMacro<GOperandOr, GExprAnd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `r#"[0-9]+"#` we can reduce to a `CommaSeparatedList<GExpr>` but we can also shift

/home/prybicki/code/latte/src/latte.lalrpop:108:20: 108:44: Conflict detected

    when in this state:
  (<GExpr> ",")+ = (*) (<GExpr> ",")+ GExpr "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  (<GExpr> ",")+ = (*) GExpr "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) (<GExpr> ",")+ ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) (<GExpr> ",")+ GExpr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) GExpr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GBoolean = (*) "false" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GBoolean = (*) "true" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExpr = (*) GExprOr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAdd = (*) LAExprMacro<GOperandAdd, GExprMul> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAnd = (*) RAExprMacro<GOperandAnd, GExprRel> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) CommaSeparatedList<GExpr> ")" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GBoolean ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GIdent ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GIdent "(" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GInteger ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GString ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) "(" GExprOr ")" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprMul = (*) LAExprMacro<GOperandMul, GExprUnary> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprOr = (*) RAExprMacro<GOperandOr, GExprAnd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprRel = (*) LAExprMacro<GOperandRel, GExprAdd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) "!" GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) "-" GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GIdent = (*) r#"[A-Z,a-z,_\']+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GInteger = (*) r#"[+-]"# r#"[0-9]+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GInteger = (*) r#"[0-9]+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GString = (*) r#"\"([^,\",\\\\]|\\\\\")*\""# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandAdd, GExprMul> = (*) GExprMul ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandAdd, GExprMul> = (*) LAExprMacro<GOperandAdd, GExprMul> GOperandAdd GExprMul ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandMul, GExprUnary> = (*) GExprUnary ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandMul, GExprUnary> = (*) LAExprMacro<GOperandMul, GExprUnary> GOperandMul GExprUnary ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandRel, GExprAdd> = (*) GExprAdd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandRel, GExprAdd> = (*) LAExprMacro<GOperandRel, GExprAdd> GOperandRel GExprAdd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandAnd, GExprRel> = (*) GExprRel ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandAnd, GExprRel> = (*) GExprRel GOperandAnd RAExprMacro<GOperandAnd, GExprRel> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandAnd, GExprRel> = GExprRel GOperandAnd (*) RAExprMacro<GOperandAnd, GExprRel> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandOr, GExprAnd> = (*) GExprAnd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandOr, GExprAnd> = (*) GExprAnd GOperandOr RAExprMacro<GOperandOr, GExprAnd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `r#"[A-Z,a-z,_\']+"#` we can reduce to a `CommaSeparatedList<GExpr>` but we can also shift

/home/prybicki/code/latte/src/latte.lalrpop:108:20: 108:44: Conflict detected

    when in this state:
  (<GExpr> ",")+ = (*) (<GExpr> ",")+ GExpr "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  (<GExpr> ",")+ = (*) GExpr "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) (<GExpr> ",")+ ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) (<GExpr> ",")+ GExpr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) GExpr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GBoolean = (*) "false" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GBoolean = (*) "true" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExpr = (*) GExprOr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAdd = (*) LAExprMacro<GOperandAdd, GExprMul> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAnd = (*) RAExprMacro<GOperandAnd, GExprRel> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) CommaSeparatedList<GExpr> ")" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GBoolean ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GIdent ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GIdent "(" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GInteger ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GString ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) "(" GExprOr ")" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprMul = (*) LAExprMacro<GOperandMul, GExprUnary> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprOr = (*) RAExprMacro<GOperandOr, GExprAnd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprRel = (*) LAExprMacro<GOperandRel, GExprAdd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) "!" GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) "-" GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GIdent = (*) r#"[A-Z,a-z,_\']+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GInteger = (*) r#"[+-]"# r#"[0-9]+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GInteger = (*) r#"[0-9]+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GString = (*) r#"\"([^,\",\\\\]|\\\\\")*\""# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandAdd, GExprMul> = (*) GExprMul ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandAdd, GExprMul> = (*) LAExprMacro<GOperandAdd, GExprMul> GOperandAdd GExprMul ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandAdd, GExprMul> = LAExprMacro<GOperandAdd, GExprMul> GOperandAdd (*) GExprMul ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandMul, GExprUnary> = (*) GExprUnary ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandMul, GExprUnary> = (*) LAExprMacro<GOperandMul, GExprUnary> GOperandMul GExprUnary ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandRel, GExprAdd> = (*) GExprAdd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandRel, GExprAdd> = (*) LAExprMacro<GOperandRel, GExprAdd> GOperandRel GExprAdd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandAnd, GExprRel> = (*) GExprRel ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandAnd, GExprRel> = (*) GExprRel GOperandAnd RAExprMacro<GOperandAnd, GExprRel> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandOr, GExprAnd> = (*) GExprAnd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandOr, GExprAnd> = (*) GExprAnd GOperandOr RAExprMacro<GOperandOr, GExprAnd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `"!"` we can reduce to a `CommaSeparatedList<GExpr>` but we can also shift

/home/prybicki/code/latte/src/latte.lalrpop:108:20: 108:44: Conflict detected

    when in this state:
  (<GExpr> ",")+ = (*) (<GExpr> ",")+ GExpr "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  (<GExpr> ",")+ = (*) GExpr "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) (<GExpr> ",")+ ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) (<GExpr> ",")+ GExpr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) GExpr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GBoolean = (*) "false" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GBoolean = (*) "true" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExpr = (*) GExprOr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAdd = (*) LAExprMacro<GOperandAdd, GExprMul> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAnd = (*) RAExprMacro<GOperandAnd, GExprRel> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) CommaSeparatedList<GExpr> ")" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GBoolean ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GIdent ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GIdent "(" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GInteger ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GString ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) "(" GExprOr ")" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprMul = (*) LAExprMacro<GOperandMul, GExprUnary> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprOr = (*) RAExprMacro<GOperandOr, GExprAnd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprRel = (*) LAExprMacro<GOperandRel, GExprAdd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) "!" GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) "-" GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GIdent = (*) r#"[A-Z,a-z,_\']+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GInteger = (*) r#"[+-]"# r#"[0-9]+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GInteger = (*) r#"[0-9]+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GString = (*) r#"\"([^,\",\\\\]|\\\\\")*\""# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandAdd, GExprMul> = (*) GExprMul ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandAdd, GExprMul> = (*) LAExprMacro<GOperandAdd, GExprMul> GOperandAdd GExprMul ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandAdd, GExprMul> = LAExprMacro<GOperandAdd, GExprMul> GOperandAdd (*) GExprMul ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandMul, GExprUnary> = (*) GExprUnary ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandMul, GExprUnary> = (*) LAExprMacro<GOperandMul, GExprUnary> GOperandMul GExprUnary ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandRel, GExprAdd> = (*) GExprAdd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandRel, GExprAdd> = (*) LAExprMacro<GOperandRel, GExprAdd> GOperandRel GExprAdd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandAnd, GExprRel> = (*) GExprRel ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandAnd, GExprRel> = (*) GExprRel GOperandAnd RAExprMacro<GOperandAnd, GExprRel> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandOr, GExprAnd> = (*) GExprAnd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandOr, GExprAnd> = (*) GExprAnd GOperandOr RAExprMacro<GOperandOr, GExprAnd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `"("` we can reduce to a `CommaSeparatedList<GExpr>` but we can also shift

/home/prybicki/code/latte/src/latte.lalrpop:108:20: 108:44: Conflict detected

    when in this state:
  (<GExpr> ",")+ = (*) (<GExpr> ",")+ GExpr "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  (<GExpr> ",")+ = (*) GExpr "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) (<GExpr> ",")+ ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) (<GExpr> ",")+ GExpr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) GExpr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GBoolean = (*) "false" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GBoolean = (*) "true" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExpr = (*) GExprOr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAdd = (*) LAExprMacro<GOperandAdd, GExprMul> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAnd = (*) RAExprMacro<GOperandAnd, GExprRel> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) CommaSeparatedList<GExpr> ")" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GBoolean ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GIdent ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GIdent "(" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GInteger ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GString ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) "(" GExprOr ")" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprMul = (*) LAExprMacro<GOperandMul, GExprUnary> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprOr = (*) RAExprMacro<GOperandOr, GExprAnd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprRel = (*) LAExprMacro<GOperandRel, GExprAdd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) "!" GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) "-" GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GIdent = (*) r#"[A-Z,a-z,_\']+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GInteger = (*) r#"[+-]"# r#"[0-9]+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GInteger = (*) r#"[0-9]+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GString = (*) r#"\"([^,\",\\\\]|\\\\\")*\""# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandAdd, GExprMul> = (*) GExprMul ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandAdd, GExprMul> = (*) LAExprMacro<GOperandAdd, GExprMul> GOperandAdd GExprMul ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandAdd, GExprMul> = LAExprMacro<GOperandAdd, GExprMul> GOperandAdd (*) GExprMul ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandMul, GExprUnary> = (*) GExprUnary ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandMul, GExprUnary> = (*) LAExprMacro<GOperandMul, GExprUnary> GOperandMul GExprUnary ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandRel, GExprAdd> = (*) GExprAdd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandRel, GExprAdd> = (*) LAExprMacro<GOperandRel, GExprAdd> GOperandRel GExprAdd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandAnd, GExprRel> = (*) GExprRel ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandAnd, GExprRel> = (*) GExprRel GOperandAnd RAExprMacro<GOperandAnd, GExprRel> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandOr, GExprAnd> = (*) GExprAnd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandOr, GExprAnd> = (*) GExprAnd GOperandOr RAExprMacro<GOperandOr, GExprAnd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `"-"` we can reduce to a `CommaSeparatedList<GExpr>` but we can also shift

/home/prybicki/code/latte/src/latte.lalrpop:108:20: 108:44: Conflict detected

    when in this state:
  (<GExpr> ",")+ = (*) (<GExpr> ",")+ GExpr "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  (<GExpr> ",")+ = (*) GExpr "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) (<GExpr> ",")+ ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) (<GExpr> ",")+ GExpr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) GExpr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GBoolean = (*) "false" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GBoolean = (*) "true" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExpr = (*) GExprOr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAdd = (*) LAExprMacro<GOperandAdd, GExprMul> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAnd = (*) RAExprMacro<GOperandAnd, GExprRel> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) CommaSeparatedList<GExpr> ")" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GBoolean ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GIdent ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GIdent "(" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GInteger ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GString ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) "(" GExprOr ")" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprMul = (*) LAExprMacro<GOperandMul, GExprUnary> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprOr = (*) RAExprMacro<GOperandOr, GExprAnd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprRel = (*) LAExprMacro<GOperandRel, GExprAdd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) "!" GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) "-" GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GIdent = (*) r#"[A-Z,a-z,_\']+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GInteger = (*) r#"[+-]"# r#"[0-9]+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GInteger = (*) r#"[0-9]+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GString = (*) r#"\"([^,\",\\\\]|\\\\\")*\""# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandAdd, GExprMul> = (*) GExprMul ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandAdd, GExprMul> = (*) LAExprMacro<GOperandAdd, GExprMul> GOperandAdd GExprMul ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandAdd, GExprMul> = LAExprMacro<GOperandAdd, GExprMul> GOperandAdd (*) GExprMul ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandMul, GExprUnary> = (*) GExprUnary ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandMul, GExprUnary> = (*) LAExprMacro<GOperandMul, GExprUnary> GOperandMul GExprUnary ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandRel, GExprAdd> = (*) GExprAdd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandRel, GExprAdd> = (*) LAExprMacro<GOperandRel, GExprAdd> GOperandRel GExprAdd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandAnd, GExprRel> = (*) GExprRel ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandAnd, GExprRel> = (*) GExprRel GOperandAnd RAExprMacro<GOperandAnd, GExprRel> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandOr, GExprAnd> = (*) GExprAnd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandOr, GExprAnd> = (*) GExprAnd GOperandOr RAExprMacro<GOperandOr, GExprAnd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `"false"` we can reduce to a `CommaSeparatedList<GExpr>` but we can also shift

/home/prybicki/code/latte/src/latte.lalrpop:108:20: 108:44: Conflict detected

    when in this state:
  (<GExpr> ",")+ = (*) (<GExpr> ",")+ GExpr "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  (<GExpr> ",")+ = (*) GExpr "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) (<GExpr> ",")+ ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) (<GExpr> ",")+ GExpr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) GExpr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GBoolean = (*) "false" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GBoolean = (*) "true" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExpr = (*) GExprOr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAdd = (*) LAExprMacro<GOperandAdd, GExprMul> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAnd = (*) RAExprMacro<GOperandAnd, GExprRel> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) CommaSeparatedList<GExpr> ")" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GBoolean ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GIdent ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GIdent "(" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GInteger ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GString ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) "(" GExprOr ")" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprMul = (*) LAExprMacro<GOperandMul, GExprUnary> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprOr = (*) RAExprMacro<GOperandOr, GExprAnd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprRel = (*) LAExprMacro<GOperandRel, GExprAdd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) "!" GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) "-" GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GIdent = (*) r#"[A-Z,a-z,_\']+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GInteger = (*) r#"[+-]"# r#"[0-9]+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GInteger = (*) r#"[0-9]+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GString = (*) r#"\"([^,\",\\\\]|\\\\\")*\""# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandAdd, GExprMul> = (*) GExprMul ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandAdd, GExprMul> = (*) LAExprMacro<GOperandAdd, GExprMul> GOperandAdd GExprMul ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandAdd, GExprMul> = LAExprMacro<GOperandAdd, GExprMul> GOperandAdd (*) GExprMul ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandMul, GExprUnary> = (*) GExprUnary ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandMul, GExprUnary> = (*) LAExprMacro<GOperandMul, GExprUnary> GOperandMul GExprUnary ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandRel, GExprAdd> = (*) GExprAdd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandRel, GExprAdd> = (*) LAExprMacro<GOperandRel, GExprAdd> GOperandRel GExprAdd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandAnd, GExprRel> = (*) GExprRel ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandAnd, GExprRel> = (*) GExprRel GOperandAnd RAExprMacro<GOperandAnd, GExprRel> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandOr, GExprAnd> = (*) GExprAnd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandOr, GExprAnd> = (*) GExprAnd GOperandOr RAExprMacro<GOperandOr, GExprAnd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `"true"` we can reduce to a `CommaSeparatedList<GExpr>` but we can also shift

/home/prybicki/code/latte/src/latte.lalrpop:108:20: 108:44: Conflict detected

    when in this state:
  (<GExpr> ",")+ = (*) (<GExpr> ",")+ GExpr "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  (<GExpr> ",")+ = (*) GExpr "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) (<GExpr> ",")+ ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) (<GExpr> ",")+ GExpr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) GExpr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GBoolean = (*) "false" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GBoolean = (*) "true" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExpr = (*) GExprOr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAdd = (*) LAExprMacro<GOperandAdd, GExprMul> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAnd = (*) RAExprMacro<GOperandAnd, GExprRel> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) CommaSeparatedList<GExpr> ")" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GBoolean ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GIdent ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GIdent "(" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GInteger ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GString ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) "(" GExprOr ")" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprMul = (*) LAExprMacro<GOperandMul, GExprUnary> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprOr = (*) RAExprMacro<GOperandOr, GExprAnd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprRel = (*) LAExprMacro<GOperandRel, GExprAdd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) "!" GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) "-" GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GIdent = (*) r#"[A-Z,a-z,_\']+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GInteger = (*) r#"[+-]"# r#"[0-9]+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GInteger = (*) r#"[0-9]+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GString = (*) r#"\"([^,\",\\\\]|\\\\\")*\""# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandAdd, GExprMul> = (*) GExprMul ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandAdd, GExprMul> = (*) LAExprMacro<GOperandAdd, GExprMul> GOperandAdd GExprMul ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandAdd, GExprMul> = LAExprMacro<GOperandAdd, GExprMul> GOperandAdd (*) GExprMul ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandMul, GExprUnary> = (*) GExprUnary ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandMul, GExprUnary> = (*) LAExprMacro<GOperandMul, GExprUnary> GOperandMul GExprUnary ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandRel, GExprAdd> = (*) GExprAdd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandRel, GExprAdd> = (*) LAExprMacro<GOperandRel, GExprAdd> GOperandRel GExprAdd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandAnd, GExprRel> = (*) GExprRel ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandAnd, GExprRel> = (*) GExprRel GOperandAnd RAExprMacro<GOperandAnd, GExprRel> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandOr, GExprAnd> = (*) GExprAnd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandOr, GExprAnd> = (*) GExprAnd GOperandOr RAExprMacro<GOperandOr, GExprAnd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `r#"\"([^,\",\\\\]|\\\\\")*\""#` we can reduce to a `CommaSeparatedList<GExpr>` but we can also shift

/home/prybicki/code/latte/src/latte.lalrpop:108:20: 108:44: Conflict detected

    when in this state:
  (<GExpr> ",")+ = (*) (<GExpr> ",")+ GExpr "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  (<GExpr> ",")+ = (*) GExpr "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) (<GExpr> ",")+ ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) (<GExpr> ",")+ GExpr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) GExpr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GBoolean = (*) "false" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GBoolean = (*) "true" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExpr = (*) GExprOr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAdd = (*) LAExprMacro<GOperandAdd, GExprMul> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAnd = (*) RAExprMacro<GOperandAnd, GExprRel> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) CommaSeparatedList<GExpr> ")" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GBoolean ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GIdent ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GIdent "(" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GInteger ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GString ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) "(" GExprOr ")" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprMul = (*) LAExprMacro<GOperandMul, GExprUnary> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprOr = (*) RAExprMacro<GOperandOr, GExprAnd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprRel = (*) LAExprMacro<GOperandRel, GExprAdd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) "!" GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) "-" GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GIdent = (*) r#"[A-Z,a-z,_\']+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GInteger = (*) r#"[+-]"# r#"[0-9]+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GInteger = (*) r#"[0-9]+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GString = (*) r#"\"([^,\",\\\\]|\\\\\")*\""# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandAdd, GExprMul> = (*) GExprMul ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandAdd, GExprMul> = (*) LAExprMacro<GOperandAdd, GExprMul> GOperandAdd GExprMul ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandAdd, GExprMul> = LAExprMacro<GOperandAdd, GExprMul> GOperandAdd (*) GExprMul ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandMul, GExprUnary> = (*) GExprUnary ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandMul, GExprUnary> = (*) LAExprMacro<GOperandMul, GExprUnary> GOperandMul GExprUnary ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandRel, GExprAdd> = (*) GExprAdd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandRel, GExprAdd> = (*) LAExprMacro<GOperandRel, GExprAdd> GOperandRel GExprAdd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandAnd, GExprRel> = (*) GExprRel ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandAnd, GExprRel> = (*) GExprRel GOperandAnd RAExprMacro<GOperandAnd, GExprRel> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandOr, GExprAnd> = (*) GExprAnd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandOr, GExprAnd> = (*) GExprAnd GOperandOr RAExprMacro<GOperandOr, GExprAnd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `r#"[+-]"#` we can reduce to a `CommaSeparatedList<GExpr>` but we can also shift

/home/prybicki/code/latte/src/latte.lalrpop:108:20: 108:44: Conflict detected

    when in this state:
  (<GExpr> ",")+ = (*) (<GExpr> ",")+ GExpr "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  (<GExpr> ",")+ = (*) GExpr "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) (<GExpr> ",")+ ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) (<GExpr> ",")+ GExpr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) GExpr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GBoolean = (*) "false" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GBoolean = (*) "true" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExpr = (*) GExprOr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAdd = (*) LAExprMacro<GOperandAdd, GExprMul> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAnd = (*) RAExprMacro<GOperandAnd, GExprRel> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) CommaSeparatedList<GExpr> ")" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GBoolean ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GIdent ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GIdent "(" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GInteger ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GString ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) "(" GExprOr ")" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprMul = (*) LAExprMacro<GOperandMul, GExprUnary> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprOr = (*) RAExprMacro<GOperandOr, GExprAnd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprRel = (*) LAExprMacro<GOperandRel, GExprAdd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) "!" GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) "-" GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GIdent = (*) r#"[A-Z,a-z,_\']+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GInteger = (*) r#"[+-]"# r#"[0-9]+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GInteger = (*) r#"[0-9]+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GString = (*) r#"\"([^,\",\\\\]|\\\\\")*\""# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandAdd, GExprMul> = (*) GExprMul ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandAdd, GExprMul> = (*) LAExprMacro<GOperandAdd, GExprMul> GOperandAdd GExprMul ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandAdd, GExprMul> = LAExprMacro<GOperandAdd, GExprMul> GOperandAdd (*) GExprMul ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandMul, GExprUnary> = (*) GExprUnary ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandMul, GExprUnary> = (*) LAExprMacro<GOperandMul, GExprUnary> GOperandMul GExprUnary ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandRel, GExprAdd> = (*) GExprAdd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandRel, GExprAdd> = (*) LAExprMacro<GOperandRel, GExprAdd> GOperandRel GExprAdd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandAnd, GExprRel> = (*) GExprRel ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandAnd, GExprRel> = (*) GExprRel GOperandAnd RAExprMacro<GOperandAnd, GExprRel> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandOr, GExprAnd> = (*) GExprAnd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandOr, GExprAnd> = (*) GExprAnd GOperandOr RAExprMacro<GOperandOr, GExprAnd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `r#"[0-9]+"#` we can reduce to a `CommaSeparatedList<GExpr>` but we can also shift

/home/prybicki/code/latte/src/latte.lalrpop:108:20: 108:44: Conflict detected

    when in this state:
  (<GExpr> ",")+ = (*) (<GExpr> ",")+ GExpr "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  (<GExpr> ",")+ = (*) GExpr "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) (<GExpr> ",")+ ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) (<GExpr> ",")+ GExpr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) GExpr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GBoolean = (*) "false" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GBoolean = (*) "true" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExpr = (*) GExprOr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAdd = (*) LAExprMacro<GOperandAdd, GExprMul> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAnd = (*) RAExprMacro<GOperandAnd, GExprRel> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) CommaSeparatedList<GExpr> ")" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GBoolean ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GIdent ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GIdent "(" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GInteger ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GString ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) "(" GExprOr ")" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprMul = (*) LAExprMacro<GOperandMul, GExprUnary> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprOr = (*) RAExprMacro<GOperandOr, GExprAnd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprRel = (*) LAExprMacro<GOperandRel, GExprAdd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) "!" GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) "-" GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GIdent = (*) r#"[A-Z,a-z,_\']+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GInteger = (*) r#"[+-]"# r#"[0-9]+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GInteger = (*) r#"[0-9]+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GString = (*) r#"\"([^,\",\\\\]|\\\\\")*\""# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandAdd, GExprMul> = (*) GExprMul ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandAdd, GExprMul> = (*) LAExprMacro<GOperandAdd, GExprMul> GOperandAdd GExprMul ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandAdd, GExprMul> = LAExprMacro<GOperandAdd, GExprMul> GOperandAdd (*) GExprMul ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandMul, GExprUnary> = (*) GExprUnary ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandMul, GExprUnary> = (*) LAExprMacro<GOperandMul, GExprUnary> GOperandMul GExprUnary ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandRel, GExprAdd> = (*) GExprAdd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandRel, GExprAdd> = (*) LAExprMacro<GOperandRel, GExprAdd> GOperandRel GExprAdd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandAnd, GExprRel> = (*) GExprRel ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandAnd, GExprRel> = (*) GExprRel GOperandAnd RAExprMacro<GOperandAnd, GExprRel> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandOr, GExprAnd> = (*) GExprAnd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandOr, GExprAnd> = (*) GExprAnd GOperandOr RAExprMacro<GOperandOr, GExprAnd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `r#"[A-Z,a-z,_\']+"#` we can reduce to a `CommaSeparatedList<GExpr>` but we can also shift

/home/prybicki/code/latte/src/latte.lalrpop:108:20: 108:44: Conflict detected

    when in this state:
  (<GExpr> ",")+ = (*) (<GExpr> ",")+ GExpr "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  (<GExpr> ",")+ = (*) GExpr "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) (<GExpr> ",")+ ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) (<GExpr> ",")+ GExpr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) GExpr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GBoolean = (*) "false" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GBoolean = (*) "true" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExpr = (*) GExprOr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAdd = (*) LAExprMacro<GOperandAdd, GExprMul> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAnd = (*) RAExprMacro<GOperandAnd, GExprRel> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) CommaSeparatedList<GExpr> ")" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GBoolean ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GIdent ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GIdent "(" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GInteger ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GString ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) "(" GExprOr ")" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprMul = (*) LAExprMacro<GOperandMul, GExprUnary> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprOr = (*) RAExprMacro<GOperandOr, GExprAnd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprRel = (*) LAExprMacro<GOperandRel, GExprAdd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) "!" GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) "-" GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GIdent = (*) r#"[A-Z,a-z,_\']+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GInteger = (*) r#"[+-]"# r#"[0-9]+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GInteger = (*) r#"[0-9]+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GString = (*) r#"\"([^,\",\\\\]|\\\\\")*\""# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandAdd, GExprMul> = (*) GExprMul ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandAdd, GExprMul> = (*) LAExprMacro<GOperandAdd, GExprMul> GOperandAdd GExprMul ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandMul, GExprUnary> = (*) GExprUnary ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandMul, GExprUnary> = (*) LAExprMacro<GOperandMul, GExprUnary> GOperandMul GExprUnary ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandMul, GExprUnary> = LAExprMacro<GOperandMul, GExprUnary> GOperandMul (*) GExprUnary ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandRel, GExprAdd> = (*) GExprAdd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandRel, GExprAdd> = (*) LAExprMacro<GOperandRel, GExprAdd> GOperandRel GExprAdd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandAnd, GExprRel> = (*) GExprRel ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandAnd, GExprRel> = (*) GExprRel GOperandAnd RAExprMacro<GOperandAnd, GExprRel> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandOr, GExprAnd> = (*) GExprAnd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandOr, GExprAnd> = (*) GExprAnd GOperandOr RAExprMacro<GOperandOr, GExprAnd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `"!"` we can reduce to a `CommaSeparatedList<GExpr>` but we can also shift

/home/prybicki/code/latte/src/latte.lalrpop:108:20: 108:44: Conflict detected

    when in this state:
  (<GExpr> ",")+ = (*) (<GExpr> ",")+ GExpr "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  (<GExpr> ",")+ = (*) GExpr "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) (<GExpr> ",")+ ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) (<GExpr> ",")+ GExpr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) GExpr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GBoolean = (*) "false" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GBoolean = (*) "true" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExpr = (*) GExprOr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAdd = (*) LAExprMacro<GOperandAdd, GExprMul> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAnd = (*) RAExprMacro<GOperandAnd, GExprRel> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) CommaSeparatedList<GExpr> ")" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GBoolean ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GIdent ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GIdent "(" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GInteger ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GString ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) "(" GExprOr ")" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprMul = (*) LAExprMacro<GOperandMul, GExprUnary> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprOr = (*) RAExprMacro<GOperandOr, GExprAnd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprRel = (*) LAExprMacro<GOperandRel, GExprAdd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) "!" GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) "-" GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GIdent = (*) r#"[A-Z,a-z,_\']+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GInteger = (*) r#"[+-]"# r#"[0-9]+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GInteger = (*) r#"[0-9]+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GString = (*) r#"\"([^,\",\\\\]|\\\\\")*\""# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandAdd, GExprMul> = (*) GExprMul ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandAdd, GExprMul> = (*) LAExprMacro<GOperandAdd, GExprMul> GOperandAdd GExprMul ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandMul, GExprUnary> = (*) GExprUnary ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandMul, GExprUnary> = (*) LAExprMacro<GOperandMul, GExprUnary> GOperandMul GExprUnary ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandMul, GExprUnary> = LAExprMacro<GOperandMul, GExprUnary> GOperandMul (*) GExprUnary ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandRel, GExprAdd> = (*) GExprAdd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandRel, GExprAdd> = (*) LAExprMacro<GOperandRel, GExprAdd> GOperandRel GExprAdd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandAnd, GExprRel> = (*) GExprRel ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandAnd, GExprRel> = (*) GExprRel GOperandAnd RAExprMacro<GOperandAnd, GExprRel> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandOr, GExprAnd> = (*) GExprAnd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandOr, GExprAnd> = (*) GExprAnd GOperandOr RAExprMacro<GOperandOr, GExprAnd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `"("` we can reduce to a `CommaSeparatedList<GExpr>` but we can also shift

/home/prybicki/code/latte/src/latte.lalrpop:108:20: 108:44: Conflict detected

    when in this state:
  (<GExpr> ",")+ = (*) (<GExpr> ",")+ GExpr "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  (<GExpr> ",")+ = (*) GExpr "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) (<GExpr> ",")+ ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) (<GExpr> ",")+ GExpr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) GExpr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GBoolean = (*) "false" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GBoolean = (*) "true" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExpr = (*) GExprOr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAdd = (*) LAExprMacro<GOperandAdd, GExprMul> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAnd = (*) RAExprMacro<GOperandAnd, GExprRel> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) CommaSeparatedList<GExpr> ")" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GBoolean ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GIdent ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GIdent "(" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GInteger ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GString ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) "(" GExprOr ")" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprMul = (*) LAExprMacro<GOperandMul, GExprUnary> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprOr = (*) RAExprMacro<GOperandOr, GExprAnd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprRel = (*) LAExprMacro<GOperandRel, GExprAdd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) "!" GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) "-" GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GIdent = (*) r#"[A-Z,a-z,_\']+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GInteger = (*) r#"[+-]"# r#"[0-9]+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GInteger = (*) r#"[0-9]+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GString = (*) r#"\"([^,\",\\\\]|\\\\\")*\""# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandAdd, GExprMul> = (*) GExprMul ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandAdd, GExprMul> = (*) LAExprMacro<GOperandAdd, GExprMul> GOperandAdd GExprMul ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandMul, GExprUnary> = (*) GExprUnary ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandMul, GExprUnary> = (*) LAExprMacro<GOperandMul, GExprUnary> GOperandMul GExprUnary ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandMul, GExprUnary> = LAExprMacro<GOperandMul, GExprUnary> GOperandMul (*) GExprUnary ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandRel, GExprAdd> = (*) GExprAdd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandRel, GExprAdd> = (*) LAExprMacro<GOperandRel, GExprAdd> GOperandRel GExprAdd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandAnd, GExprRel> = (*) GExprRel ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandAnd, GExprRel> = (*) GExprRel GOperandAnd RAExprMacro<GOperandAnd, GExprRel> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandOr, GExprAnd> = (*) GExprAnd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandOr, GExprAnd> = (*) GExprAnd GOperandOr RAExprMacro<GOperandOr, GExprAnd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `"-"` we can reduce to a `CommaSeparatedList<GExpr>` but we can also shift

/home/prybicki/code/latte/src/latte.lalrpop:108:20: 108:44: Conflict detected

    when in this state:
  (<GExpr> ",")+ = (*) (<GExpr> ",")+ GExpr "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  (<GExpr> ",")+ = (*) GExpr "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) (<GExpr> ",")+ ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) (<GExpr> ",")+ GExpr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) GExpr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GBoolean = (*) "false" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GBoolean = (*) "true" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExpr = (*) GExprOr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAdd = (*) LAExprMacro<GOperandAdd, GExprMul> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAnd = (*) RAExprMacro<GOperandAnd, GExprRel> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) CommaSeparatedList<GExpr> ")" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GBoolean ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GIdent ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GIdent "(" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GInteger ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GString ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) "(" GExprOr ")" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprMul = (*) LAExprMacro<GOperandMul, GExprUnary> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprOr = (*) RAExprMacro<GOperandOr, GExprAnd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprRel = (*) LAExprMacro<GOperandRel, GExprAdd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) "!" GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) "-" GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GIdent = (*) r#"[A-Z,a-z,_\']+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GInteger = (*) r#"[+-]"# r#"[0-9]+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GInteger = (*) r#"[0-9]+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GString = (*) r#"\"([^,\",\\\\]|\\\\\")*\""# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandAdd, GExprMul> = (*) GExprMul ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandAdd, GExprMul> = (*) LAExprMacro<GOperandAdd, GExprMul> GOperandAdd GExprMul ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandMul, GExprUnary> = (*) GExprUnary ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandMul, GExprUnary> = (*) LAExprMacro<GOperandMul, GExprUnary> GOperandMul GExprUnary ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandMul, GExprUnary> = LAExprMacro<GOperandMul, GExprUnary> GOperandMul (*) GExprUnary ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandRel, GExprAdd> = (*) GExprAdd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandRel, GExprAdd> = (*) LAExprMacro<GOperandRel, GExprAdd> GOperandRel GExprAdd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandAnd, GExprRel> = (*) GExprRel ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandAnd, GExprRel> = (*) GExprRel GOperandAnd RAExprMacro<GOperandAnd, GExprRel> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandOr, GExprAnd> = (*) GExprAnd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandOr, GExprAnd> = (*) GExprAnd GOperandOr RAExprMacro<GOperandOr, GExprAnd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `"false"` we can reduce to a `CommaSeparatedList<GExpr>` but we can also shift

/home/prybicki/code/latte/src/latte.lalrpop:108:20: 108:44: Conflict detected

    when in this state:
  (<GExpr> ",")+ = (*) (<GExpr> ",")+ GExpr "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  (<GExpr> ",")+ = (*) GExpr "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) (<GExpr> ",")+ ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) (<GExpr> ",")+ GExpr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) GExpr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GBoolean = (*) "false" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GBoolean = (*) "true" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExpr = (*) GExprOr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAdd = (*) LAExprMacro<GOperandAdd, GExprMul> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAnd = (*) RAExprMacro<GOperandAnd, GExprRel> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) CommaSeparatedList<GExpr> ")" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GBoolean ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GIdent ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GIdent "(" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GInteger ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GString ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) "(" GExprOr ")" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprMul = (*) LAExprMacro<GOperandMul, GExprUnary> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprOr = (*) RAExprMacro<GOperandOr, GExprAnd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprRel = (*) LAExprMacro<GOperandRel, GExprAdd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) "!" GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) "-" GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GIdent = (*) r#"[A-Z,a-z,_\']+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GInteger = (*) r#"[+-]"# r#"[0-9]+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GInteger = (*) r#"[0-9]+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GString = (*) r#"\"([^,\",\\\\]|\\\\\")*\""# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandAdd, GExprMul> = (*) GExprMul ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandAdd, GExprMul> = (*) LAExprMacro<GOperandAdd, GExprMul> GOperandAdd GExprMul ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandMul, GExprUnary> = (*) GExprUnary ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandMul, GExprUnary> = (*) LAExprMacro<GOperandMul, GExprUnary> GOperandMul GExprUnary ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandMul, GExprUnary> = LAExprMacro<GOperandMul, GExprUnary> GOperandMul (*) GExprUnary ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandRel, GExprAdd> = (*) GExprAdd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandRel, GExprAdd> = (*) LAExprMacro<GOperandRel, GExprAdd> GOperandRel GExprAdd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandAnd, GExprRel> = (*) GExprRel ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandAnd, GExprRel> = (*) GExprRel GOperandAnd RAExprMacro<GOperandAnd, GExprRel> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandOr, GExprAnd> = (*) GExprAnd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandOr, GExprAnd> = (*) GExprAnd GOperandOr RAExprMacro<GOperandOr, GExprAnd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `"true"` we can reduce to a `CommaSeparatedList<GExpr>` but we can also shift

/home/prybicki/code/latte/src/latte.lalrpop:108:20: 108:44: Conflict detected

    when in this state:
  (<GExpr> ",")+ = (*) (<GExpr> ",")+ GExpr "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  (<GExpr> ",")+ = (*) GExpr "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) (<GExpr> ",")+ ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) (<GExpr> ",")+ GExpr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) GExpr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GBoolean = (*) "false" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GBoolean = (*) "true" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExpr = (*) GExprOr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAdd = (*) LAExprMacro<GOperandAdd, GExprMul> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAnd = (*) RAExprMacro<GOperandAnd, GExprRel> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) CommaSeparatedList<GExpr> ")" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GBoolean ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GIdent ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GIdent "(" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GInteger ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GString ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) "(" GExprOr ")" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprMul = (*) LAExprMacro<GOperandMul, GExprUnary> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprOr = (*) RAExprMacro<GOperandOr, GExprAnd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprRel = (*) LAExprMacro<GOperandRel, GExprAdd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) "!" GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) "-" GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GIdent = (*) r#"[A-Z,a-z,_\']+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GInteger = (*) r#"[+-]"# r#"[0-9]+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GInteger = (*) r#"[0-9]+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GString = (*) r#"\"([^,\",\\\\]|\\\\\")*\""# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandAdd, GExprMul> = (*) GExprMul ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandAdd, GExprMul> = (*) LAExprMacro<GOperandAdd, GExprMul> GOperandAdd GExprMul ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandMul, GExprUnary> = (*) GExprUnary ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandMul, GExprUnary> = (*) LAExprMacro<GOperandMul, GExprUnary> GOperandMul GExprUnary ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandMul, GExprUnary> = LAExprMacro<GOperandMul, GExprUnary> GOperandMul (*) GExprUnary ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandRel, GExprAdd> = (*) GExprAdd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandRel, GExprAdd> = (*) LAExprMacro<GOperandRel, GExprAdd> GOperandRel GExprAdd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandAnd, GExprRel> = (*) GExprRel ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandAnd, GExprRel> = (*) GExprRel GOperandAnd RAExprMacro<GOperandAnd, GExprRel> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandOr, GExprAnd> = (*) GExprAnd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandOr, GExprAnd> = (*) GExprAnd GOperandOr RAExprMacro<GOperandOr, GExprAnd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `r#"\"([^,\",\\\\]|\\\\\")*\""#` we can reduce to a `CommaSeparatedList<GExpr>` but we can also shift

/home/prybicki/code/latte/src/latte.lalrpop:108:20: 108:44: Conflict detected

    when in this state:
  (<GExpr> ",")+ = (*) (<GExpr> ",")+ GExpr "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  (<GExpr> ",")+ = (*) GExpr "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) (<GExpr> ",")+ ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) (<GExpr> ",")+ GExpr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) GExpr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GBoolean = (*) "false" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GBoolean = (*) "true" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExpr = (*) GExprOr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAdd = (*) LAExprMacro<GOperandAdd, GExprMul> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAnd = (*) RAExprMacro<GOperandAnd, GExprRel> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) CommaSeparatedList<GExpr> ")" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GBoolean ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GIdent ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GIdent "(" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GInteger ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GString ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) "(" GExprOr ")" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprMul = (*) LAExprMacro<GOperandMul, GExprUnary> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprOr = (*) RAExprMacro<GOperandOr, GExprAnd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprRel = (*) LAExprMacro<GOperandRel, GExprAdd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) "!" GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) "-" GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GIdent = (*) r#"[A-Z,a-z,_\']+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GInteger = (*) r#"[+-]"# r#"[0-9]+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GInteger = (*) r#"[0-9]+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GString = (*) r#"\"([^,\",\\\\]|\\\\\")*\""# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandAdd, GExprMul> = (*) GExprMul ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandAdd, GExprMul> = (*) LAExprMacro<GOperandAdd, GExprMul> GOperandAdd GExprMul ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandMul, GExprUnary> = (*) GExprUnary ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandMul, GExprUnary> = (*) LAExprMacro<GOperandMul, GExprUnary> GOperandMul GExprUnary ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandMul, GExprUnary> = LAExprMacro<GOperandMul, GExprUnary> GOperandMul (*) GExprUnary ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandRel, GExprAdd> = (*) GExprAdd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandRel, GExprAdd> = (*) LAExprMacro<GOperandRel, GExprAdd> GOperandRel GExprAdd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandAnd, GExprRel> = (*) GExprRel ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandAnd, GExprRel> = (*) GExprRel GOperandAnd RAExprMacro<GOperandAnd, GExprRel> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandOr, GExprAnd> = (*) GExprAnd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandOr, GExprAnd> = (*) GExprAnd GOperandOr RAExprMacro<GOperandOr, GExprAnd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `r#"[+-]"#` we can reduce to a `CommaSeparatedList<GExpr>` but we can also shift

/home/prybicki/code/latte/src/latte.lalrpop:108:20: 108:44: Conflict detected

    when in this state:
  (<GExpr> ",")+ = (*) (<GExpr> ",")+ GExpr "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  (<GExpr> ",")+ = (*) GExpr "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) (<GExpr> ",")+ ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) (<GExpr> ",")+ GExpr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) GExpr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GBoolean = (*) "false" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GBoolean = (*) "true" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExpr = (*) GExprOr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAdd = (*) LAExprMacro<GOperandAdd, GExprMul> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAnd = (*) RAExprMacro<GOperandAnd, GExprRel> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) CommaSeparatedList<GExpr> ")" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GBoolean ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GIdent ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GIdent "(" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GInteger ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GString ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) "(" GExprOr ")" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprMul = (*) LAExprMacro<GOperandMul, GExprUnary> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprOr = (*) RAExprMacro<GOperandOr, GExprAnd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprRel = (*) LAExprMacro<GOperandRel, GExprAdd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) "!" GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) "-" GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GIdent = (*) r#"[A-Z,a-z,_\']+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GInteger = (*) r#"[+-]"# r#"[0-9]+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GInteger = (*) r#"[0-9]+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GString = (*) r#"\"([^,\",\\\\]|\\\\\")*\""# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandAdd, GExprMul> = (*) GExprMul ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandAdd, GExprMul> = (*) LAExprMacro<GOperandAdd, GExprMul> GOperandAdd GExprMul ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandMul, GExprUnary> = (*) GExprUnary ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandMul, GExprUnary> = (*) LAExprMacro<GOperandMul, GExprUnary> GOperandMul GExprUnary ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandMul, GExprUnary> = LAExprMacro<GOperandMul, GExprUnary> GOperandMul (*) GExprUnary ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandRel, GExprAdd> = (*) GExprAdd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandRel, GExprAdd> = (*) LAExprMacro<GOperandRel, GExprAdd> GOperandRel GExprAdd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandAnd, GExprRel> = (*) GExprRel ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandAnd, GExprRel> = (*) GExprRel GOperandAnd RAExprMacro<GOperandAnd, GExprRel> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandOr, GExprAnd> = (*) GExprAnd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandOr, GExprAnd> = (*) GExprAnd GOperandOr RAExprMacro<GOperandOr, GExprAnd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `r#"[0-9]+"#` we can reduce to a `CommaSeparatedList<GExpr>` but we can also shift

/home/prybicki/code/latte/src/latte.lalrpop:108:20: 108:44: Conflict detected

    when in this state:
  (<GExpr> ",")+ = (*) (<GExpr> ",")+ GExpr "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  (<GExpr> ",")+ = (*) GExpr "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) (<GExpr> ",")+ ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) (<GExpr> ",")+ GExpr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) GExpr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GBoolean = (*) "false" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GBoolean = (*) "true" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExpr = (*) GExprOr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAdd = (*) LAExprMacro<GOperandAdd, GExprMul> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAnd = (*) RAExprMacro<GOperandAnd, GExprRel> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) CommaSeparatedList<GExpr> ")" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GBoolean ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GIdent ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GIdent "(" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GInteger ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GString ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) "(" GExprOr ")" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprMul = (*) LAExprMacro<GOperandMul, GExprUnary> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprOr = (*) RAExprMacro<GOperandOr, GExprAnd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprRel = (*) LAExprMacro<GOperandRel, GExprAdd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) "!" GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) "-" GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GIdent = (*) r#"[A-Z,a-z,_\']+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GInteger = (*) r#"[+-]"# r#"[0-9]+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GInteger = (*) r#"[0-9]+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GString = (*) r#"\"([^,\",\\\\]|\\\\\")*\""# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandAdd, GExprMul> = (*) GExprMul ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandAdd, GExprMul> = (*) LAExprMacro<GOperandAdd, GExprMul> GOperandAdd GExprMul ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandMul, GExprUnary> = (*) GExprUnary ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandMul, GExprUnary> = (*) LAExprMacro<GOperandMul, GExprUnary> GOperandMul GExprUnary ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandMul, GExprUnary> = LAExprMacro<GOperandMul, GExprUnary> GOperandMul (*) GExprUnary ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandRel, GExprAdd> = (*) GExprAdd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandRel, GExprAdd> = (*) LAExprMacro<GOperandRel, GExprAdd> GOperandRel GExprAdd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandAnd, GExprRel> = (*) GExprRel ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandAnd, GExprRel> = (*) GExprRel GOperandAnd RAExprMacro<GOperandAnd, GExprRel> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandOr, GExprAnd> = (*) GExprAnd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandOr, GExprAnd> = (*) GExprAnd GOperandOr RAExprMacro<GOperandOr, GExprAnd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `r#"[A-Z,a-z,_\']+"#` we can reduce to a `CommaSeparatedList<GExpr>` but we can also shift

/home/prybicki/code/latte/src/latte.lalrpop:108:20: 108:44: Conflict detected

    when in this state:
  (<GExpr> ",")+ = (*) (<GExpr> ",")+ GExpr "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  (<GExpr> ",")+ = (*) GExpr "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) (<GExpr> ",")+ ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) (<GExpr> ",")+ GExpr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) GExpr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GBoolean = (*) "false" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GBoolean = (*) "true" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExpr = (*) GExprOr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAdd = (*) LAExprMacro<GOperandAdd, GExprMul> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAnd = (*) RAExprMacro<GOperandAnd, GExprRel> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) CommaSeparatedList<GExpr> ")" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GBoolean ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GIdent ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GIdent "(" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GInteger ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GString ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) "(" GExprOr ")" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprMul = (*) LAExprMacro<GOperandMul, GExprUnary> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprOr = (*) RAExprMacro<GOperandOr, GExprAnd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprRel = (*) LAExprMacro<GOperandRel, GExprAdd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) "!" GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) "-" GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GIdent = (*) r#"[A-Z,a-z,_\']+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GInteger = (*) r#"[+-]"# r#"[0-9]+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GInteger = (*) r#"[0-9]+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GString = (*) r#"\"([^,\",\\\\]|\\\\\")*\""# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandAdd, GExprMul> = (*) GExprMul ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandAdd, GExprMul> = (*) LAExprMacro<GOperandAdd, GExprMul> GOperandAdd GExprMul ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandMul, GExprUnary> = (*) GExprUnary ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandMul, GExprUnary> = (*) LAExprMacro<GOperandMul, GExprUnary> GOperandMul GExprUnary ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandRel, GExprAdd> = (*) GExprAdd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandRel, GExprAdd> = (*) LAExprMacro<GOperandRel, GExprAdd> GOperandRel GExprAdd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandRel, GExprAdd> = LAExprMacro<GOperandRel, GExprAdd> GOperandRel (*) GExprAdd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandAnd, GExprRel> = (*) GExprRel ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandAnd, GExprRel> = (*) GExprRel GOperandAnd RAExprMacro<GOperandAnd, GExprRel> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandOr, GExprAnd> = (*) GExprAnd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandOr, GExprAnd> = (*) GExprAnd GOperandOr RAExprMacro<GOperandOr, GExprAnd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `"!"` we can reduce to a `CommaSeparatedList<GExpr>` but we can also shift

/home/prybicki/code/latte/src/latte.lalrpop:108:20: 108:44: Conflict detected

    when in this state:
  (<GExpr> ",")+ = (*) (<GExpr> ",")+ GExpr "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  (<GExpr> ",")+ = (*) GExpr "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) (<GExpr> ",")+ ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) (<GExpr> ",")+ GExpr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) GExpr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GBoolean = (*) "false" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GBoolean = (*) "true" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExpr = (*) GExprOr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAdd = (*) LAExprMacro<GOperandAdd, GExprMul> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAnd = (*) RAExprMacro<GOperandAnd, GExprRel> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) CommaSeparatedList<GExpr> ")" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GBoolean ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GIdent ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GIdent "(" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GInteger ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GString ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) "(" GExprOr ")" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprMul = (*) LAExprMacro<GOperandMul, GExprUnary> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprOr = (*) RAExprMacro<GOperandOr, GExprAnd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprRel = (*) LAExprMacro<GOperandRel, GExprAdd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) "!" GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) "-" GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GIdent = (*) r#"[A-Z,a-z,_\']+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GInteger = (*) r#"[+-]"# r#"[0-9]+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GInteger = (*) r#"[0-9]+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GString = (*) r#"\"([^,\",\\\\]|\\\\\")*\""# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandAdd, GExprMul> = (*) GExprMul ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandAdd, GExprMul> = (*) LAExprMacro<GOperandAdd, GExprMul> GOperandAdd GExprMul ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandMul, GExprUnary> = (*) GExprUnary ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandMul, GExprUnary> = (*) LAExprMacro<GOperandMul, GExprUnary> GOperandMul GExprUnary ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandRel, GExprAdd> = (*) GExprAdd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandRel, GExprAdd> = (*) LAExprMacro<GOperandRel, GExprAdd> GOperandRel GExprAdd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandRel, GExprAdd> = LAExprMacro<GOperandRel, GExprAdd> GOperandRel (*) GExprAdd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandAnd, GExprRel> = (*) GExprRel ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandAnd, GExprRel> = (*) GExprRel GOperandAnd RAExprMacro<GOperandAnd, GExprRel> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandOr, GExprAnd> = (*) GExprAnd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandOr, GExprAnd> = (*) GExprAnd GOperandOr RAExprMacro<GOperandOr, GExprAnd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `"("` we can reduce to a `CommaSeparatedList<GExpr>` but we can also shift

/home/prybicki/code/latte/src/latte.lalrpop:108:20: 108:44: Conflict detected

    when in this state:
  (<GExpr> ",")+ = (*) (<GExpr> ",")+ GExpr "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  (<GExpr> ",")+ = (*) GExpr "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) (<GExpr> ",")+ ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) (<GExpr> ",")+ GExpr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) GExpr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GBoolean = (*) "false" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GBoolean = (*) "true" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExpr = (*) GExprOr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAdd = (*) LAExprMacro<GOperandAdd, GExprMul> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAnd = (*) RAExprMacro<GOperandAnd, GExprRel> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) CommaSeparatedList<GExpr> ")" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GBoolean ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GIdent ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GIdent "(" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GInteger ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GString ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) "(" GExprOr ")" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprMul = (*) LAExprMacro<GOperandMul, GExprUnary> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprOr = (*) RAExprMacro<GOperandOr, GExprAnd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprRel = (*) LAExprMacro<GOperandRel, GExprAdd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) "!" GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) "-" GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GIdent = (*) r#"[A-Z,a-z,_\']+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GInteger = (*) r#"[+-]"# r#"[0-9]+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GInteger = (*) r#"[0-9]+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GString = (*) r#"\"([^,\",\\\\]|\\\\\")*\""# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandAdd, GExprMul> = (*) GExprMul ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandAdd, GExprMul> = (*) LAExprMacro<GOperandAdd, GExprMul> GOperandAdd GExprMul ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandMul, GExprUnary> = (*) GExprUnary ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandMul, GExprUnary> = (*) LAExprMacro<GOperandMul, GExprUnary> GOperandMul GExprUnary ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandRel, GExprAdd> = (*) GExprAdd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandRel, GExprAdd> = (*) LAExprMacro<GOperandRel, GExprAdd> GOperandRel GExprAdd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandRel, GExprAdd> = LAExprMacro<GOperandRel, GExprAdd> GOperandRel (*) GExprAdd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandAnd, GExprRel> = (*) GExprRel ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandAnd, GExprRel> = (*) GExprRel GOperandAnd RAExprMacro<GOperandAnd, GExprRel> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandOr, GExprAnd> = (*) GExprAnd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandOr, GExprAnd> = (*) GExprAnd GOperandOr RAExprMacro<GOperandOr, GExprAnd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `"-"` we can reduce to a `CommaSeparatedList<GExpr>` but we can also shift

/home/prybicki/code/latte/src/latte.lalrpop:108:20: 108:44: Conflict detected

    when in this state:
  (<GExpr> ",")+ = (*) (<GExpr> ",")+ GExpr "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  (<GExpr> ",")+ = (*) GExpr "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) (<GExpr> ",")+ ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) (<GExpr> ",")+ GExpr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) GExpr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GBoolean = (*) "false" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GBoolean = (*) "true" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExpr = (*) GExprOr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAdd = (*) LAExprMacro<GOperandAdd, GExprMul> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAnd = (*) RAExprMacro<GOperandAnd, GExprRel> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) CommaSeparatedList<GExpr> ")" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GBoolean ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GIdent ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GIdent "(" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GInteger ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GString ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) "(" GExprOr ")" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprMul = (*) LAExprMacro<GOperandMul, GExprUnary> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprOr = (*) RAExprMacro<GOperandOr, GExprAnd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprRel = (*) LAExprMacro<GOperandRel, GExprAdd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) "!" GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) "-" GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GIdent = (*) r#"[A-Z,a-z,_\']+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GInteger = (*) r#"[+-]"# r#"[0-9]+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GInteger = (*) r#"[0-9]+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GString = (*) r#"\"([^,\",\\\\]|\\\\\")*\""# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandAdd, GExprMul> = (*) GExprMul ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandAdd, GExprMul> = (*) LAExprMacro<GOperandAdd, GExprMul> GOperandAdd GExprMul ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandMul, GExprUnary> = (*) GExprUnary ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandMul, GExprUnary> = (*) LAExprMacro<GOperandMul, GExprUnary> GOperandMul GExprUnary ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandRel, GExprAdd> = (*) GExprAdd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandRel, GExprAdd> = (*) LAExprMacro<GOperandRel, GExprAdd> GOperandRel GExprAdd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandRel, GExprAdd> = LAExprMacro<GOperandRel, GExprAdd> GOperandRel (*) GExprAdd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandAnd, GExprRel> = (*) GExprRel ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandAnd, GExprRel> = (*) GExprRel GOperandAnd RAExprMacro<GOperandAnd, GExprRel> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandOr, GExprAnd> = (*) GExprAnd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandOr, GExprAnd> = (*) GExprAnd GOperandOr RAExprMacro<GOperandOr, GExprAnd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `"false"` we can reduce to a `CommaSeparatedList<GExpr>` but we can also shift

/home/prybicki/code/latte/src/latte.lalrpop:108:20: 108:44: Conflict detected

    when in this state:
  (<GExpr> ",")+ = (*) (<GExpr> ",")+ GExpr "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  (<GExpr> ",")+ = (*) GExpr "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) (<GExpr> ",")+ ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) (<GExpr> ",")+ GExpr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) GExpr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GBoolean = (*) "false" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GBoolean = (*) "true" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExpr = (*) GExprOr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAdd = (*) LAExprMacro<GOperandAdd, GExprMul> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAnd = (*) RAExprMacro<GOperandAnd, GExprRel> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) CommaSeparatedList<GExpr> ")" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GBoolean ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GIdent ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GIdent "(" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GInteger ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GString ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) "(" GExprOr ")" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprMul = (*) LAExprMacro<GOperandMul, GExprUnary> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprOr = (*) RAExprMacro<GOperandOr, GExprAnd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprRel = (*) LAExprMacro<GOperandRel, GExprAdd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) "!" GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) "-" GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GIdent = (*) r#"[A-Z,a-z,_\']+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GInteger = (*) r#"[+-]"# r#"[0-9]+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GInteger = (*) r#"[0-9]+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GString = (*) r#"\"([^,\",\\\\]|\\\\\")*\""# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandAdd, GExprMul> = (*) GExprMul ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandAdd, GExprMul> = (*) LAExprMacro<GOperandAdd, GExprMul> GOperandAdd GExprMul ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandMul, GExprUnary> = (*) GExprUnary ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandMul, GExprUnary> = (*) LAExprMacro<GOperandMul, GExprUnary> GOperandMul GExprUnary ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandRel, GExprAdd> = (*) GExprAdd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandRel, GExprAdd> = (*) LAExprMacro<GOperandRel, GExprAdd> GOperandRel GExprAdd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandRel, GExprAdd> = LAExprMacro<GOperandRel, GExprAdd> GOperandRel (*) GExprAdd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandAnd, GExprRel> = (*) GExprRel ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandAnd, GExprRel> = (*) GExprRel GOperandAnd RAExprMacro<GOperandAnd, GExprRel> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandOr, GExprAnd> = (*) GExprAnd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandOr, GExprAnd> = (*) GExprAnd GOperandOr RAExprMacro<GOperandOr, GExprAnd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `"true"` we can reduce to a `CommaSeparatedList<GExpr>` but we can also shift

/home/prybicki/code/latte/src/latte.lalrpop:108:20: 108:44: Conflict detected

    when in this state:
  (<GExpr> ",")+ = (*) (<GExpr> ",")+ GExpr "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  (<GExpr> ",")+ = (*) GExpr "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) (<GExpr> ",")+ ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) (<GExpr> ",")+ GExpr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) GExpr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GBoolean = (*) "false" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GBoolean = (*) "true" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExpr = (*) GExprOr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAdd = (*) LAExprMacro<GOperandAdd, GExprMul> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAnd = (*) RAExprMacro<GOperandAnd, GExprRel> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) CommaSeparatedList<GExpr> ")" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GBoolean ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GIdent ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GIdent "(" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GInteger ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GString ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) "(" GExprOr ")" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprMul = (*) LAExprMacro<GOperandMul, GExprUnary> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprOr = (*) RAExprMacro<GOperandOr, GExprAnd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprRel = (*) LAExprMacro<GOperandRel, GExprAdd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) "!" GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) "-" GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GIdent = (*) r#"[A-Z,a-z,_\']+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GInteger = (*) r#"[+-]"# r#"[0-9]+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GInteger = (*) r#"[0-9]+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GString = (*) r#"\"([^,\",\\\\]|\\\\\")*\""# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandAdd, GExprMul> = (*) GExprMul ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandAdd, GExprMul> = (*) LAExprMacro<GOperandAdd, GExprMul> GOperandAdd GExprMul ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandMul, GExprUnary> = (*) GExprUnary ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandMul, GExprUnary> = (*) LAExprMacro<GOperandMul, GExprUnary> GOperandMul GExprUnary ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandRel, GExprAdd> = (*) GExprAdd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandRel, GExprAdd> = (*) LAExprMacro<GOperandRel, GExprAdd> GOperandRel GExprAdd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandRel, GExprAdd> = LAExprMacro<GOperandRel, GExprAdd> GOperandRel (*) GExprAdd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandAnd, GExprRel> = (*) GExprRel ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandAnd, GExprRel> = (*) GExprRel GOperandAnd RAExprMacro<GOperandAnd, GExprRel> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandOr, GExprAnd> = (*) GExprAnd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandOr, GExprAnd> = (*) GExprAnd GOperandOr RAExprMacro<GOperandOr, GExprAnd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `r#"\"([^,\",\\\\]|\\\\\")*\""#` we can reduce to a `CommaSeparatedList<GExpr>` but we can also shift

/home/prybicki/code/latte/src/latte.lalrpop:108:20: 108:44: Conflict detected

    when in this state:
  (<GExpr> ",")+ = (*) (<GExpr> ",")+ GExpr "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  (<GExpr> ",")+ = (*) GExpr "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) (<GExpr> ",")+ ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) (<GExpr> ",")+ GExpr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) GExpr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GBoolean = (*) "false" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GBoolean = (*) "true" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExpr = (*) GExprOr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAdd = (*) LAExprMacro<GOperandAdd, GExprMul> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAnd = (*) RAExprMacro<GOperandAnd, GExprRel> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) CommaSeparatedList<GExpr> ")" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GBoolean ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GIdent ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GIdent "(" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GInteger ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GString ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) "(" GExprOr ")" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprMul = (*) LAExprMacro<GOperandMul, GExprUnary> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprOr = (*) RAExprMacro<GOperandOr, GExprAnd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprRel = (*) LAExprMacro<GOperandRel, GExprAdd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) "!" GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) "-" GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GIdent = (*) r#"[A-Z,a-z,_\']+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GInteger = (*) r#"[+-]"# r#"[0-9]+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GInteger = (*) r#"[0-9]+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GString = (*) r#"\"([^,\",\\\\]|\\\\\")*\""# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandAdd, GExprMul> = (*) GExprMul ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandAdd, GExprMul> = (*) LAExprMacro<GOperandAdd, GExprMul> GOperandAdd GExprMul ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandMul, GExprUnary> = (*) GExprUnary ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandMul, GExprUnary> = (*) LAExprMacro<GOperandMul, GExprUnary> GOperandMul GExprUnary ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandRel, GExprAdd> = (*) GExprAdd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandRel, GExprAdd> = (*) LAExprMacro<GOperandRel, GExprAdd> GOperandRel GExprAdd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandRel, GExprAdd> = LAExprMacro<GOperandRel, GExprAdd> GOperandRel (*) GExprAdd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandAnd, GExprRel> = (*) GExprRel ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandAnd, GExprRel> = (*) GExprRel GOperandAnd RAExprMacro<GOperandAnd, GExprRel> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandOr, GExprAnd> = (*) GExprAnd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandOr, GExprAnd> = (*) GExprAnd GOperandOr RAExprMacro<GOperandOr, GExprAnd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `r#"[+-]"#` we can reduce to a `CommaSeparatedList<GExpr>` but we can also shift

/home/prybicki/code/latte/src/latte.lalrpop:108:20: 108:44: Conflict detected

    when in this state:
  (<GExpr> ",")+ = (*) (<GExpr> ",")+ GExpr "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  (<GExpr> ",")+ = (*) GExpr "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) (<GExpr> ",")+ ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) (<GExpr> ",")+ GExpr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) GExpr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GBoolean = (*) "false" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GBoolean = (*) "true" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExpr = (*) GExprOr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAdd = (*) LAExprMacro<GOperandAdd, GExprMul> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAnd = (*) RAExprMacro<GOperandAnd, GExprRel> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) CommaSeparatedList<GExpr> ")" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GBoolean ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GIdent ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GIdent "(" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GInteger ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GString ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) "(" GExprOr ")" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprMul = (*) LAExprMacro<GOperandMul, GExprUnary> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprOr = (*) RAExprMacro<GOperandOr, GExprAnd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprRel = (*) LAExprMacro<GOperandRel, GExprAdd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) "!" GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) "-" GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GIdent = (*) r#"[A-Z,a-z,_\']+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GInteger = (*) r#"[+-]"# r#"[0-9]+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GInteger = (*) r#"[0-9]+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GString = (*) r#"\"([^,\",\\\\]|\\\\\")*\""# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandAdd, GExprMul> = (*) GExprMul ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandAdd, GExprMul> = (*) LAExprMacro<GOperandAdd, GExprMul> GOperandAdd GExprMul ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandMul, GExprUnary> = (*) GExprUnary ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandMul, GExprUnary> = (*) LAExprMacro<GOperandMul, GExprUnary> GOperandMul GExprUnary ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandRel, GExprAdd> = (*) GExprAdd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandRel, GExprAdd> = (*) LAExprMacro<GOperandRel, GExprAdd> GOperandRel GExprAdd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandRel, GExprAdd> = LAExprMacro<GOperandRel, GExprAdd> GOperandRel (*) GExprAdd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandAnd, GExprRel> = (*) GExprRel ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandAnd, GExprRel> = (*) GExprRel GOperandAnd RAExprMacro<GOperandAnd, GExprRel> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandOr, GExprAnd> = (*) GExprAnd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandOr, GExprAnd> = (*) GExprAnd GOperandOr RAExprMacro<GOperandOr, GExprAnd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `r#"[0-9]+"#` we can reduce to a `CommaSeparatedList<GExpr>` but we can also shift

/home/prybicki/code/latte/src/latte.lalrpop:108:20: 108:44: Conflict detected

    when in this state:
  (<GExpr> ",")+ = (*) (<GExpr> ",")+ GExpr "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  (<GExpr> ",")+ = (*) GExpr "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) (<GExpr> ",")+ ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) (<GExpr> ",")+ GExpr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = (*) GExpr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GBoolean = (*) "false" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GBoolean = (*) "true" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExpr = (*) GExprOr ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAdd = (*) LAExprMacro<GOperandAdd, GExprMul> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAnd = (*) RAExprMacro<GOperandAnd, GExprRel> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) CommaSeparatedList<GExpr> ")" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GBoolean ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GIdent ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GIdent "(" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GInteger ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) GString ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprAtom = (*) "(" GExprOr ")" ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprMul = (*) LAExprMacro<GOperandMul, GExprUnary> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprOr = (*) RAExprMacro<GOperandOr, GExprAnd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprRel = (*) LAExprMacro<GOperandRel, GExprAdd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) "!" GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = (*) "-" GExprAtom ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GIdent = (*) r#"[A-Z,a-z,_\']+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GInteger = (*) r#"[+-]"# r#"[0-9]+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GInteger = (*) r#"[0-9]+"# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GString = (*) r#"\"([^,\",\\\\]|\\\\\")*\""# ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandAdd, GExprMul> = (*) GExprMul ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandAdd, GExprMul> = (*) LAExprMacro<GOperandAdd, GExprMul> GOperandAdd GExprMul ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandMul, GExprUnary> = (*) GExprUnary ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandMul, GExprUnary> = (*) LAExprMacro<GOperandMul, GExprUnary> GOperandMul GExprUnary ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandRel, GExprAdd> = (*) GExprAdd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandRel, GExprAdd> = (*) LAExprMacro<GOperandRel, GExprAdd> GOperandRel GExprAdd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandRel, GExprAdd> = LAExprMacro<GOperandRel, GExprAdd> GOperandRel (*) GExprAdd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandAnd, GExprRel> = (*) GExprRel ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandAnd, GExprRel> = (*) GExprRel GOperandAnd RAExprMacro<GOperandAnd, GExprRel> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandOr, GExprAnd> = (*) GExprAnd ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandOr, GExprAnd> = (*) GExprAnd GOperandOr RAExprMacro<GOperandOr, GExprAnd> ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `r#"[A-Z,a-z,_\']+"#` we can reduce to a `CommaSeparatedList<GExpr>` but we can also shift

/home/prybicki/code/latte/src/latte.lalrpop:108:20: 108:44: Conflict detected

    when in this state:
  (<GExpr> ",")+ = GExpr (*) "," ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  CommaSeparatedList<GExpr> = GExpr (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `","` we can reduce to a `CommaSeparatedList<GExpr>` but we can also shift

/home/prybicki/code/latte/src/latte.lalrpop:101:5: 101:19: Conflict detected

    when in this state:
  GExprUnary = GExprAtom (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = "!" GExprAtom (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `"!"` we can reduce to a `GExprUnary` but we can also reduce to a `GExprUnary`

/home/prybicki/code/latte/src/latte.lalrpop:101:5: 101:19: Local ambiguity detected

  The problem arises after having observed the following symbols in the input:
    "!" GExprAtom
  At that point, if the next token is a `"%"`, then the parser can proceed in two different ways.

  First, the parser could execute the production at /home/prybicki/code/latte/src/latte.lalrpop:101:5: 101:19, which would consume the top 1 token(s) from the stack and produce a `GExprUnary`. This might then yield a parse tree like
    GExprAtom                              ╷ GOperandMul GExprUnary
    ├─GExprUnary───────────────────────────┤                      │
    ├─LAExprMacro<GOperandMul, GExprUnary>─┘                      │
    └─LAExprMacro<GOperandMul, GExprUnary>────────────────────────┘

  Alternatively, the parser could execute the production at /home/prybicki/code/latte/src/latte.lalrpop:99:5: 99:63, which would consume the top 2 token(s) from the stack and produce a `GExprUnary`. This might then yield a parse tree like
    "!"                            GExprAtom GOperandMul GExprUnary
    ├─GExprUnary───────────────────────────┤                      │
    ├─LAExprMacro<GOperandMul, GExprUnary>─┘                      │
    └─LAExprMacro<GOperandMul, GExprUnary>────────────────────────┘

  See the LALRPOP manual for advice on making your grammar LR(1).

/home/prybicki/code/latte/src/latte.lalrpop:101:5: 101:19: Local ambiguity detected

  The problem arises after having observed the following symbols in the input:
    "!" GExprAtom
  At that point, if the next token is a `"&&"`, then the parser can proceed in two different ways.

  First, the parser could execute the production at /home/prybicki/code/latte/src/latte.lalrpop:101:5: 101:19, which would consume the top 1 token(s) from the stack and produce a `GExprUnary`. This might then yield a parse tree like
    GExprAtom                              ╷ GOperandAnd RAExprMacro<GOperandAnd, GExprRel>
    ├─GExprUnary───────────────────────────┤                                              │
    ├─LAExprMacro<GOperandMul, GExprUnary>─┤                                              │
    ├─GExprMul─────────────────────────────┤                                              │
    ├─LAExprMacro<GOperandAdd, GExprMul>───┤                                              │
    ├─GExprAdd─────────────────────────────┤                                              │
    ├─LAExprMacro<GOperandRel, GExprAdd>───┤                                              │
    ├─GExprRel─────────────────────────────┘                                              │
    └─RAExprMacro<GOperandAnd, GExprRel>──────────────────────────────────────────────────┘

  Alternatively, the parser could execute the production at /home/prybicki/code/latte/src/latte.lalrpop:99:5: 99:63, which would consume the top 2 token(s) from the stack and produce a `GExprUnary`. This might then yield a parse tree like
    "!"                            GExprAtom GOperandAnd RAExprMacro<GOperandAnd, GExprRel>
    ├─GExprUnary───────────────────────────┤                                              │
    ├─LAExprMacro<GOperandMul, GExprUnary>─┤                                              │
    ├─GExprMul─────────────────────────────┤                                              │
    ├─LAExprMacro<GOperandAdd, GExprMul>───┤                                              │
    ├─GExprAdd─────────────────────────────┤                                              │
    ├─LAExprMacro<GOperandRel, GExprAdd>───┤                                              │
    ├─GExprRel─────────────────────────────┘                                              │
    └─RAExprMacro<GOperandAnd, GExprRel>──────────────────────────────────────────────────┘

  See the LALRPOP manual for advice on making your grammar LR(1).

/home/prybicki/code/latte/src/latte.lalrpop:101:5: 101:19: Conflict detected

    when in this state:
  GExprUnary = GExprAtom (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = "!" GExprAtom (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `"("` we can reduce to a `GExprUnary` but we can also reduce to a `GExprUnary`

/home/prybicki/code/latte/src/latte.lalrpop:101:5: 101:19: Local ambiguity detected

  The problem arises after having observed the following symbols in the input:
    "!" GExprAtom
  At that point, if the next token is a `")"`, then the parser can proceed in two different ways.

  First, the parser could execute the production at /home/prybicki/code/latte/src/latte.lalrpop:101:5: 101:19, which would consume the top 1 token(s) from the stack and produce a `GExprUnary`. This might then yield a parse tree like
    GExprAtom                              ╷ ")"
    ├─GExprUnary───────────────────────────┤   │
    ├─LAExprMacro<GOperandMul, GExprUnary>─┤   │
    ├─GExprMul─────────────────────────────┤   │
    ├─LAExprMacro<GOperandAdd, GExprMul>───┤   │
    ├─GExprAdd─────────────────────────────┤   │
    ├─LAExprMacro<GOperandRel, GExprAdd>───┤   │
    ├─GExprRel─────────────────────────────┤   │
    ├─RAExprMacro<GOperandAnd, GExprRel>───┤   │
    ├─GExprAnd─────────────────────────────┤   │
    ├─RAExprMacro<GOperandOr, GExprAnd>────┤   │
    ├─GExprOr──────────────────────────────┤   │
    ├─GExpr────────────────────────────────┤   │
    ├─CommaSeparatedList<GExpr>────────────┘   │
    └─GExprAtom────────────────────────────────┘

  Alternatively, the parser could execute the production at /home/prybicki/code/latte/src/latte.lalrpop:99:5: 99:63, which would consume the top 2 token(s) from the stack and produce a `GExprUnary`. This might then yield a parse tree like
    "!"                            GExprAtom ")"
    ├─GExprUnary───────────────────────────┤   │
    ├─LAExprMacro<GOperandMul, GExprUnary>─┤   │
    ├─GExprMul─────────────────────────────┤   │
    ├─LAExprMacro<GOperandAdd, GExprMul>───┤   │
    ├─GExprAdd─────────────────────────────┤   │
    ├─LAExprMacro<GOperandRel, GExprAdd>───┤   │
    ├─GExprRel─────────────────────────────┤   │
    ├─RAExprMacro<GOperandAnd, GExprRel>───┤   │
    ├─GExprAnd─────────────────────────────┤   │
    ├─RAExprMacro<GOperandOr, GExprAnd>────┤   │
    ├─GExprOr──────────────────────────────┤   │
    ├─GExpr────────────────────────────────┤   │
    ├─CommaSeparatedList<GExpr>────────────┘   │
    └─GExprAtom────────────────────────────────┘

  See the LALRPOP manual for advice on making your grammar LR(1).

/home/prybicki/code/latte/src/latte.lalrpop:101:5: 101:19: Local ambiguity detected

  The problem arises after having observed the following symbols in the input:
    "!" GExprAtom
  At that point, if the next token is a `"*"`, then the parser can proceed in two different ways.

  First, the parser could execute the production at /home/prybicki/code/latte/src/latte.lalrpop:101:5: 101:19, which would consume the top 1 token(s) from the stack and produce a `GExprUnary`. This might then yield a parse tree like
    GExprAtom                              ╷ GOperandMul GExprUnary
    ├─GExprUnary───────────────────────────┤                      │
    ├─LAExprMacro<GOperandMul, GExprUnary>─┘                      │
    └─LAExprMacro<GOperandMul, GExprUnary>────────────────────────┘

  Alternatively, the parser could execute the production at /home/prybicki/code/latte/src/latte.lalrpop:99:5: 99:63, which would consume the top 2 token(s) from the stack and produce a `GExprUnary`. This might then yield a parse tree like
    "!"                            GExprAtom GOperandMul GExprUnary
    ├─GExprUnary───────────────────────────┤                      │
    ├─LAExprMacro<GOperandMul, GExprUnary>─┘                      │
    └─LAExprMacro<GOperandMul, GExprUnary>────────────────────────┘

  See the LALRPOP manual for advice on making your grammar LR(1).

/home/prybicki/code/latte/src/latte.lalrpop:101:5: 101:19: Local ambiguity detected

  The problem arises after having observed the following symbols in the input:
    "!" GExprAtom
  At that point, if the next token is a `"+"`, then the parser can proceed in two different ways.

  First, the parser could execute the production at /home/prybicki/code/latte/src/latte.lalrpop:101:5: 101:19, which would consume the top 1 token(s) from the stack and produce a `GExprUnary`. This might then yield a parse tree like
    GExprAtom                              ╷ GOperandAdd GExprMul
    ├─GExprUnary───────────────────────────┤                    │
    ├─LAExprMacro<GOperandMul, GExprUnary>─┤                    │
    ├─GExprMul─────────────────────────────┤                    │
    ├─LAExprMacro<GOperandAdd, GExprMul>───┘                    │
    └─LAExprMacro<GOperandAdd, GExprMul>────────────────────────┘

  Alternatively, the parser could execute the production at /home/prybicki/code/latte/src/latte.lalrpop:99:5: 99:63, which would consume the top 2 token(s) from the stack and produce a `GExprUnary`. This might then yield a parse tree like
    "!"                            GExprAtom GOperandAdd GExprMul
    ├─GExprUnary───────────────────────────┤                    │
    ├─LAExprMacro<GOperandMul, GExprUnary>─┤                    │
    ├─GExprMul─────────────────────────────┤                    │
    ├─LAExprMacro<GOperandAdd, GExprMul>───┘                    │
    └─LAExprMacro<GOperandAdd, GExprMul>────────────────────────┘

  See the LALRPOP manual for advice on making your grammar LR(1).

/home/prybicki/code/latte/src/latte.lalrpop:101:5: 101:19: Local ambiguity detected

  The problem arises after having observed the following symbols in the input:
    "!" GExprAtom
  At that point, if the next token is a `","`, then the parser can proceed in two different ways.

  First, the parser could execute the production at /home/prybicki/code/latte/src/latte.lalrpop:101:5: 101:19, which would consume the top 1 token(s) from the stack and produce a `GExprUnary`. This might then yield a parse tree like
    GExprAtom                              ╷ ","
    ├─GExprUnary───────────────────────────┤   │
    ├─LAExprMacro<GOperandMul, GExprUnary>─┤   │
    ├─GExprMul─────────────────────────────┤   │
    ├─LAExprMacro<GOperandAdd, GExprMul>───┤   │
    ├─GExprAdd─────────────────────────────┤   │
    ├─LAExprMacro<GOperandRel, GExprAdd>───┤   │
    ├─GExprRel─────────────────────────────┤   │
    ├─RAExprMacro<GOperandAnd, GExprRel>───┤   │
    ├─GExprAnd─────────────────────────────┤   │
    ├─RAExprMacro<GOperandOr, GExprAnd>────┤   │
    ├─GExprOr──────────────────────────────┤   │
    ├─GExpr────────────────────────────────┘   │
    └─(<GExpr> ",")+───────────────────────────┘

  Alternatively, the parser could execute the production at /home/prybicki/code/latte/src/latte.lalrpop:99:5: 99:63, which would consume the top 2 token(s) from the stack and produce a `GExprUnary`. This might then yield a parse tree like
    "!"                            GExprAtom ","
    ├─GExprUnary───────────────────────────┤   │
    ├─LAExprMacro<GOperandMul, GExprUnary>─┤   │
    ├─GExprMul─────────────────────────────┤   │
    ├─LAExprMacro<GOperandAdd, GExprMul>───┤   │
    ├─GExprAdd─────────────────────────────┤   │
    ├─LAExprMacro<GOperandRel, GExprAdd>───┤   │
    ├─GExprRel─────────────────────────────┤   │
    ├─RAExprMacro<GOperandAnd, GExprRel>───┤   │
    ├─GExprAnd─────────────────────────────┤   │
    ├─RAExprMacro<GOperandOr, GExprAnd>────┤   │
    ├─GExprOr──────────────────────────────┤   │
    ├─GExpr────────────────────────────────┘   │
    └─(<GExpr> ",")+───────────────────────────┘

  See the LALRPOP manual for advice on making your grammar LR(1).

/home/prybicki/code/latte/src/latte.lalrpop:101:5: 101:19: Local ambiguity detected

  The problem arises after having observed the following symbols in the input:
    "!" GExprAtom
  At that point, if the next token is a `"-"`, then the parser can proceed in two different ways.

  First, the parser could execute the production at /home/prybicki/code/latte/src/latte.lalrpop:101:5: 101:19, which would consume the top 1 token(s) from the stack and produce a `GExprUnary`. This might then yield a parse tree like
    GExprAtom                              ╷ GOperandAdd GExprMul
    ├─GExprUnary───────────────────────────┤                    │
    ├─LAExprMacro<GOperandMul, GExprUnary>─┤                    │
    ├─GExprMul─────────────────────────────┤                    │
    ├─LAExprMacro<GOperandAdd, GExprMul>───┘                    │
    └─LAExprMacro<GOperandAdd, GExprMul>────────────────────────┘

  Alternatively, the parser could execute the production at /home/prybicki/code/latte/src/latte.lalrpop:99:5: 99:63, which would consume the top 2 token(s) from the stack and produce a `GExprUnary`. This might then yield a parse tree like
    "!"                            GExprAtom GOperandAdd GExprMul
    ├─GExprUnary───────────────────────────┤                    │
    ├─LAExprMacro<GOperandMul, GExprUnary>─┤                    │
    ├─GExprMul─────────────────────────────┤                    │
    ├─LAExprMacro<GOperandAdd, GExprMul>───┘                    │
    └─LAExprMacro<GOperandAdd, GExprMul>────────────────────────┘

  See the LALRPOP manual for advice on making your grammar LR(1).

/home/prybicki/code/latte/src/latte.lalrpop:101:5: 101:19: Local ambiguity detected

  The problem arises after having observed the following symbols in the input:
    "!" GExprAtom
  At that point, if the next token is a `"/"`, then the parser can proceed in two different ways.

  First, the parser could execute the production at /home/prybicki/code/latte/src/latte.lalrpop:101:5: 101:19, which would consume the top 1 token(s) from the stack and produce a `GExprUnary`. This might then yield a parse tree like
    GExprAtom                              ╷ GOperandMul GExprUnary
    ├─GExprUnary───────────────────────────┤                      │
    ├─LAExprMacro<GOperandMul, GExprUnary>─┘                      │
    └─LAExprMacro<GOperandMul, GExprUnary>────────────────────────┘

  Alternatively, the parser could execute the production at /home/prybicki/code/latte/src/latte.lalrpop:99:5: 99:63, which would consume the top 2 token(s) from the stack and produce a `GExprUnary`. This might then yield a parse tree like
    "!"                            GExprAtom GOperandMul GExprUnary
    ├─GExprUnary───────────────────────────┤                      │
    ├─LAExprMacro<GOperandMul, GExprUnary>─┘                      │
    └─LAExprMacro<GOperandMul, GExprUnary>────────────────────────┘

  See the LALRPOP manual for advice on making your grammar LR(1).

/home/prybicki/code/latte/src/latte.lalrpop:101:5: 101:19: Local ambiguity detected

  The problem arises after having observed the following symbols in the input:
    "!" GExprAtom
  At that point, if the next token is a `"<"`, then the parser can proceed in two different ways.

  First, the parser could execute the production at /home/prybicki/code/latte/src/latte.lalrpop:101:5: 101:19, which would consume the top 1 token(s) from the stack and produce a `GExprUnary`. This might then yield a parse tree like
    GExprAtom                              ╷ GOperandRel GExprAdd
    ├─GExprUnary───────────────────────────┤                    │
    ├─LAExprMacro<GOperandMul, GExprUnary>─┤                    │
    ├─GExprMul─────────────────────────────┤                    │
    ├─LAExprMacro<GOperandAdd, GExprMul>───┤                    │
    ├─GExprAdd─────────────────────────────┤                    │
    ├─LAExprMacro<GOperandRel, GExprAdd>───┘                    │
    └─LAExprMacro<GOperandRel, GExprAdd>────────────────────────┘

  Alternatively, the parser could execute the production at /home/prybicki/code/latte/src/latte.lalrpop:99:5: 99:63, which would consume the top 2 token(s) from the stack and produce a `GExprUnary`. This might then yield a parse tree like
    "!"                            GExprAtom GOperandRel GExprAdd
    ├─GExprUnary───────────────────────────┤                    │
    ├─LAExprMacro<GOperandMul, GExprUnary>─┤                    │
    ├─GExprMul─────────────────────────────┤                    │
    ├─LAExprMacro<GOperandAdd, GExprMul>───┤                    │
    ├─GExprAdd─────────────────────────────┤                    │
    ├─LAExprMacro<GOperandRel, GExprAdd>───┘                    │
    └─LAExprMacro<GOperandRel, GExprAdd>────────────────────────┘

  See the LALRPOP manual for advice on making your grammar LR(1).

/home/prybicki/code/latte/src/latte.lalrpop:101:5: 101:19: Local ambiguity detected

  The problem arises after having observed the following symbols in the input:
    "!" GExprAtom
  At that point, if the next token is a `"<="`, then the parser can proceed in two different ways.

  First, the parser could execute the production at /home/prybicki/code/latte/src/latte.lalrpop:101:5: 101:19, which would consume the top 1 token(s) from the stack and produce a `GExprUnary`. This might then yield a parse tree like
    GExprAtom                              ╷ GOperandRel GExprAdd
    ├─GExprUnary───────────────────────────┤                    │
    ├─LAExprMacro<GOperandMul, GExprUnary>─┤                    │
    ├─GExprMul─────────────────────────────┤                    │
    ├─LAExprMacro<GOperandAdd, GExprMul>───┤                    │
    ├─GExprAdd─────────────────────────────┤                    │
    ├─LAExprMacro<GOperandRel, GExprAdd>───┘                    │
    └─LAExprMacro<GOperandRel, GExprAdd>────────────────────────┘

  Alternatively, the parser could execute the production at /home/prybicki/code/latte/src/latte.lalrpop:99:5: 99:63, which would consume the top 2 token(s) from the stack and produce a `GExprUnary`. This might then yield a parse tree like
    "!"                            GExprAtom GOperandRel GExprAdd
    ├─GExprUnary───────────────────────────┤                    │
    ├─LAExprMacro<GOperandMul, GExprUnary>─┤                    │
    ├─GExprMul─────────────────────────────┤                    │
    ├─LAExprMacro<GOperandAdd, GExprMul>───┤                    │
    ├─GExprAdd─────────────────────────────┤                    │
    ├─LAExprMacro<GOperandRel, GExprAdd>───┘                    │
    └─LAExprMacro<GOperandRel, GExprAdd>────────────────────────┘

  See the LALRPOP manual for advice on making your grammar LR(1).

/home/prybicki/code/latte/src/latte.lalrpop:101:5: 101:19: Local ambiguity detected

  The problem arises after having observed the following symbols in the input:
    "!" GExprAtom
  At that point, if the next token is a `">"`, then the parser can proceed in two different ways.

  First, the parser could execute the production at /home/prybicki/code/latte/src/latte.lalrpop:101:5: 101:19, which would consume the top 1 token(s) from the stack and produce a `GExprUnary`. This might then yield a parse tree like
    GExprAtom                              ╷ GOperandRel GExprAdd
    ├─GExprUnary───────────────────────────┤                    │
    ├─LAExprMacro<GOperandMul, GExprUnary>─┤                    │
    ├─GExprMul─────────────────────────────┤                    │
    ├─LAExprMacro<GOperandAdd, GExprMul>───┤                    │
    ├─GExprAdd─────────────────────────────┤                    │
    ├─LAExprMacro<GOperandRel, GExprAdd>───┘                    │
    └─LAExprMacro<GOperandRel, GExprAdd>────────────────────────┘

  Alternatively, the parser could execute the production at /home/prybicki/code/latte/src/latte.lalrpop:99:5: 99:63, which would consume the top 2 token(s) from the stack and produce a `GExprUnary`. This might then yield a parse tree like
    "!"                            GExprAtom GOperandRel GExprAdd
    ├─GExprUnary───────────────────────────┤                    │
    ├─LAExprMacro<GOperandMul, GExprUnary>─┤                    │
    ├─GExprMul─────────────────────────────┤                    │
    ├─LAExprMacro<GOperandAdd, GExprMul>───┤                    │
    ├─GExprAdd─────────────────────────────┤                    │
    ├─LAExprMacro<GOperandRel, GExprAdd>───┘                    │
    └─LAExprMacro<GOperandRel, GExprAdd>────────────────────────┘

  See the LALRPOP manual for advice on making your grammar LR(1).

/home/prybicki/code/latte/src/latte.lalrpop:101:5: 101:19: Local ambiguity detected

  The problem arises after having observed the following symbols in the input:
    "!" GExprAtom
  At that point, if the next token is a `">="`, then the parser can proceed in two different ways.

  First, the parser could execute the production at /home/prybicki/code/latte/src/latte.lalrpop:101:5: 101:19, which would consume the top 1 token(s) from the stack and produce a `GExprUnary`. This might then yield a parse tree like
    GExprAtom                              ╷ GOperandRel GExprAdd
    ├─GExprUnary───────────────────────────┤                    │
    ├─LAExprMacro<GOperandMul, GExprUnary>─┤                    │
    ├─GExprMul─────────────────────────────┤                    │
    ├─LAExprMacro<GOperandAdd, GExprMul>───┤                    │
    ├─GExprAdd─────────────────────────────┤                    │
    ├─LAExprMacro<GOperandRel, GExprAdd>───┘                    │
    └─LAExprMacro<GOperandRel, GExprAdd>────────────────────────┘

  Alternatively, the parser could execute the production at /home/prybicki/code/latte/src/latte.lalrpop:99:5: 99:63, which would consume the top 2 token(s) from the stack and produce a `GExprUnary`. This might then yield a parse tree like
    "!"                            GExprAtom GOperandRel GExprAdd
    ├─GExprUnary───────────────────────────┤                    │
    ├─LAExprMacro<GOperandMul, GExprUnary>─┤                    │
    ├─GExprMul─────────────────────────────┤                    │
    ├─LAExprMacro<GOperandAdd, GExprMul>───┤                    │
    ├─GExprAdd─────────────────────────────┤                    │
    ├─LAExprMacro<GOperandRel, GExprAdd>───┘                    │
    └─LAExprMacro<GOperandRel, GExprAdd>────────────────────────┘

  See the LALRPOP manual for advice on making your grammar LR(1).

/home/prybicki/code/latte/src/latte.lalrpop:101:5: 101:19: Conflict detected

    when in this state:
  GExprUnary = GExprAtom (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = "!" GExprAtom (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `"false"` we can reduce to a `GExprUnary` but we can also reduce to a `GExprUnary`

/home/prybicki/code/latte/src/latte.lalrpop:101:5: 101:19: Conflict detected

    when in this state:
  GExprUnary = GExprAtom (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = "!" GExprAtom (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `"true"` we can reduce to a `GExprUnary` but we can also reduce to a `GExprUnary`

/home/prybicki/code/latte/src/latte.lalrpop:101:5: 101:19: Local ambiguity detected

  The problem arises after having observed the following symbols in the input:
    "!" GExprAtom
  At that point, if the next token is a `"||"`, then the parser can proceed in two different ways.

  First, the parser could execute the production at /home/prybicki/code/latte/src/latte.lalrpop:101:5: 101:19, which would consume the top 1 token(s) from the stack and produce a `GExprUnary`. This might then yield a parse tree like
    GExprAtom                              ╷ GOperandOr RAExprMacro<GOperandOr, GExprAnd>
    ├─GExprUnary───────────────────────────┤                                            │
    ├─LAExprMacro<GOperandMul, GExprUnary>─┤                                            │
    ├─GExprMul─────────────────────────────┤                                            │
    ├─LAExprMacro<GOperandAdd, GExprMul>───┤                                            │
    ├─GExprAdd─────────────────────────────┤                                            │
    ├─LAExprMacro<GOperandRel, GExprAdd>───┤                                            │
    ├─GExprRel─────────────────────────────┤                                            │
    ├─RAExprMacro<GOperandAnd, GExprRel>───┤                                            │
    ├─GExprAnd─────────────────────────────┘                                            │
    └─RAExprMacro<GOperandOr, GExprAnd>─────────────────────────────────────────────────┘

  Alternatively, the parser could execute the production at /home/prybicki/code/latte/src/latte.lalrpop:99:5: 99:63, which would consume the top 2 token(s) from the stack and produce a `GExprUnary`. This might then yield a parse tree like
    "!"                            GExprAtom GOperandOr RAExprMacro<GOperandOr, GExprAnd>
    ├─GExprUnary───────────────────────────┤                                            │
    ├─LAExprMacro<GOperandMul, GExprUnary>─┤                                            │
    ├─GExprMul─────────────────────────────┤                                            │
    ├─LAExprMacro<GOperandAdd, GExprMul>───┤                                            │
    ├─GExprAdd─────────────────────────────┤                                            │
    ├─LAExprMacro<GOperandRel, GExprAdd>───┤                                            │
    ├─GExprRel─────────────────────────────┤                                            │
    ├─RAExprMacro<GOperandAnd, GExprRel>───┤                                            │
    ├─GExprAnd─────────────────────────────┘                                            │
    └─RAExprMacro<GOperandOr, GExprAnd>─────────────────────────────────────────────────┘

  See the LALRPOP manual for advice on making your grammar LR(1).

/home/prybicki/code/latte/src/latte.lalrpop:101:5: 101:19: Conflict detected

    when in this state:
  GExprUnary = GExprAtom (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = "!" GExprAtom (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `r#"\"([^,\",\\\\]|\\\\\")*\""#` we can reduce to a `GExprUnary` but we can also reduce to a `GExprUnary`

/home/prybicki/code/latte/src/latte.lalrpop:101:5: 101:19: Conflict detected

    when in this state:
  GExprUnary = GExprAtom (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = "!" GExprAtom (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `r#"[+-]"#` we can reduce to a `GExprUnary` but we can also reduce to a `GExprUnary`

/home/prybicki/code/latte/src/latte.lalrpop:101:5: 101:19: Conflict detected

    when in this state:
  GExprUnary = GExprAtom (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = "!" GExprAtom (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `r#"[0-9]+"#` we can reduce to a `GExprUnary` but we can also reduce to a `GExprUnary`

/home/prybicki/code/latte/src/latte.lalrpop:101:5: 101:19: Conflict detected

    when in this state:
  GExprUnary = GExprAtom (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = "!" GExprAtom (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `r#"[A-Z,a-z,_\']+"#` we can reduce to a `GExprUnary` but we can also reduce to a `GExprUnary`

/home/prybicki/code/latte/src/latte.lalrpop:101:5: 101:19: Conflict detected

    when in this state:
  GExprUnary = GExprAtom (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = "!" GExprAtom (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `EOF` we can reduce to a `GExprUnary` but we can also reduce to a `GExprUnary`

/home/prybicki/code/latte/src/latte.lalrpop:90:13: 90:19: Local ambiguity detected

  The problem arises after having observed the following symbols in the input:
    "-" "(" GExprOr
  At that point, if the next token is a `")"`, then the parser can proceed in two different ways.

  First, the parser could execute the production at /home/prybicki/code/latte/src/latte.lalrpop:90:13: 90:19, which would consume the top 1 token(s) from the stack and produce a `GExpr`. This might then yield a parse tree like
    GExprOr                     ╷ ")"
    ├─GExpr─────────────────────┤   │
    ├─CommaSeparatedList<GExpr>─┘   │
    └─GExprAtom─────────────────────┘

  Alternatively, the parser could shift the `")"` token and later use it to construct a `GExprAtom`. This might then yield a parse tree like
    "-" "(" GExprOr ")"
    │   └─GExprAtom───┤
    └─GExprUnary──────┘

  See the LALRPOP manual for advice on making your grammar LR(1).

/home/prybicki/code/latte/src/latte.lalrpop:101:5: 101:19: Conflict detected

    when in this state:
  GExprUnary = GExprAtom (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = "-" GExprAtom (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `"!"` we can reduce to a `GExprUnary` but we can also reduce to a `GExprUnary`

/home/prybicki/code/latte/src/latte.lalrpop:101:5: 101:19: Local ambiguity detected

  The problem arises after having observed the following symbols in the input:
    "-" GExprAtom
  At that point, if the next token is a `"%"`, then the parser can proceed in two different ways.

  First, the parser could execute the production at /home/prybicki/code/latte/src/latte.lalrpop:101:5: 101:19, which would consume the top 1 token(s) from the stack and produce a `GExprUnary`. This might then yield a parse tree like
    GExprAtom                              ╷ GOperandMul GExprUnary
    ├─GExprUnary───────────────────────────┤                      │
    ├─LAExprMacro<GOperandMul, GExprUnary>─┘                      │
    └─LAExprMacro<GOperandMul, GExprUnary>────────────────────────┘

  Alternatively, the parser could execute the production at /home/prybicki/code/latte/src/latte.lalrpop:100:5: 100:63, which would consume the top 2 token(s) from the stack and produce a `GExprUnary`. This might then yield a parse tree like
    "-"                            GExprAtom GOperandMul GExprUnary
    ├─GExprUnary───────────────────────────┤                      │
    ├─LAExprMacro<GOperandMul, GExprUnary>─┘                      │
    └─LAExprMacro<GOperandMul, GExprUnary>────────────────────────┘

  See the LALRPOP manual for advice on making your grammar LR(1).

/home/prybicki/code/latte/src/latte.lalrpop:101:5: 101:19: Local ambiguity detected

  The problem arises after having observed the following symbols in the input:
    "-" GExprAtom
  At that point, if the next token is a `"&&"`, then the parser can proceed in two different ways.

  First, the parser could execute the production at /home/prybicki/code/latte/src/latte.lalrpop:101:5: 101:19, which would consume the top 1 token(s) from the stack and produce a `GExprUnary`. This might then yield a parse tree like
    GExprAtom                              ╷ GOperandAnd RAExprMacro<GOperandAnd, GExprRel>
    ├─GExprUnary───────────────────────────┤                                              │
    ├─LAExprMacro<GOperandMul, GExprUnary>─┤                                              │
    ├─GExprMul─────────────────────────────┤                                              │
    ├─LAExprMacro<GOperandAdd, GExprMul>───┤                                              │
    ├─GExprAdd─────────────────────────────┤                                              │
    ├─LAExprMacro<GOperandRel, GExprAdd>───┤                                              │
    ├─GExprRel─────────────────────────────┘                                              │
    └─RAExprMacro<GOperandAnd, GExprRel>──────────────────────────────────────────────────┘

  Alternatively, the parser could execute the production at /home/prybicki/code/latte/src/latte.lalrpop:100:5: 100:63, which would consume the top 2 token(s) from the stack and produce a `GExprUnary`. This might then yield a parse tree like
    "-"                            GExprAtom GOperandAnd RAExprMacro<GOperandAnd, GExprRel>
    ├─GExprUnary───────────────────────────┤                                              │
    ├─LAExprMacro<GOperandMul, GExprUnary>─┤                                              │
    ├─GExprMul─────────────────────────────┤                                              │
    ├─LAExprMacro<GOperandAdd, GExprMul>───┤                                              │
    ├─GExprAdd─────────────────────────────┤                                              │
    ├─LAExprMacro<GOperandRel, GExprAdd>───┤                                              │
    ├─GExprRel─────────────────────────────┘                                              │
    └─RAExprMacro<GOperandAnd, GExprRel>──────────────────────────────────────────────────┘

  See the LALRPOP manual for advice on making your grammar LR(1).

/home/prybicki/code/latte/src/latte.lalrpop:101:5: 101:19: Conflict detected

    when in this state:
  GExprUnary = GExprAtom (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = "-" GExprAtom (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `"("` we can reduce to a `GExprUnary` but we can also reduce to a `GExprUnary`

/home/prybicki/code/latte/src/latte.lalrpop:101:5: 101:19: Local ambiguity detected

  The problem arises after having observed the following symbols in the input:
    "-" GExprAtom
  At that point, if the next token is a `")"`, then the parser can proceed in two different ways.

  First, the parser could execute the production at /home/prybicki/code/latte/src/latte.lalrpop:101:5: 101:19, which would consume the top 1 token(s) from the stack and produce a `GExprUnary`. This might then yield a parse tree like
    GExprAtom                              ╷ ")"
    ├─GExprUnary───────────────────────────┤   │
    ├─LAExprMacro<GOperandMul, GExprUnary>─┤   │
    ├─GExprMul─────────────────────────────┤   │
    ├─LAExprMacro<GOperandAdd, GExprMul>───┤   │
    ├─GExprAdd─────────────────────────────┤   │
    ├─LAExprMacro<GOperandRel, GExprAdd>───┤   │
    ├─GExprRel─────────────────────────────┤   │
    ├─RAExprMacro<GOperandAnd, GExprRel>───┤   │
    ├─GExprAnd─────────────────────────────┤   │
    ├─RAExprMacro<GOperandOr, GExprAnd>────┤   │
    ├─GExprOr──────────────────────────────┤   │
    ├─GExpr────────────────────────────────┤   │
    ├─CommaSeparatedList<GExpr>────────────┘   │
    └─GExprAtom────────────────────────────────┘

  Alternatively, the parser could execute the production at /home/prybicki/code/latte/src/latte.lalrpop:100:5: 100:63, which would consume the top 2 token(s) from the stack and produce a `GExprUnary`. This might then yield a parse tree like
    "-"                            GExprAtom ")"
    ├─GExprUnary───────────────────────────┤   │
    ├─LAExprMacro<GOperandMul, GExprUnary>─┤   │
    ├─GExprMul─────────────────────────────┤   │
    ├─LAExprMacro<GOperandAdd, GExprMul>───┤   │
    ├─GExprAdd─────────────────────────────┤   │
    ├─LAExprMacro<GOperandRel, GExprAdd>───┤   │
    ├─GExprRel─────────────────────────────┤   │
    ├─RAExprMacro<GOperandAnd, GExprRel>───┤   │
    ├─GExprAnd─────────────────────────────┤   │
    ├─RAExprMacro<GOperandOr, GExprAnd>────┤   │
    ├─GExprOr──────────────────────────────┤   │
    ├─GExpr────────────────────────────────┤   │
    ├─CommaSeparatedList<GExpr>────────────┘   │
    └─GExprAtom────────────────────────────────┘

  See the LALRPOP manual for advice on making your grammar LR(1).

/home/prybicki/code/latte/src/latte.lalrpop:101:5: 101:19: Local ambiguity detected

  The problem arises after having observed the following symbols in the input:
    "-" GExprAtom
  At that point, if the next token is a `"*"`, then the parser can proceed in two different ways.

  First, the parser could execute the production at /home/prybicki/code/latte/src/latte.lalrpop:101:5: 101:19, which would consume the top 1 token(s) from the stack and produce a `GExprUnary`. This might then yield a parse tree like
    GExprAtom                              ╷ GOperandMul GExprUnary
    ├─GExprUnary───────────────────────────┤                      │
    ├─LAExprMacro<GOperandMul, GExprUnary>─┘                      │
    └─LAExprMacro<GOperandMul, GExprUnary>────────────────────────┘

  Alternatively, the parser could execute the production at /home/prybicki/code/latte/src/latte.lalrpop:100:5: 100:63, which would consume the top 2 token(s) from the stack and produce a `GExprUnary`. This might then yield a parse tree like
    "-"                            GExprAtom GOperandMul GExprUnary
    ├─GExprUnary───────────────────────────┤                      │
    ├─LAExprMacro<GOperandMul, GExprUnary>─┘                      │
    └─LAExprMacro<GOperandMul, GExprUnary>────────────────────────┘

  See the LALRPOP manual for advice on making your grammar LR(1).

/home/prybicki/code/latte/src/latte.lalrpop:101:5: 101:19: Local ambiguity detected

  The problem arises after having observed the following symbols in the input:
    "-" GExprAtom
  At that point, if the next token is a `"+"`, then the parser can proceed in two different ways.

  First, the parser could execute the production at /home/prybicki/code/latte/src/latte.lalrpop:101:5: 101:19, which would consume the top 1 token(s) from the stack and produce a `GExprUnary`. This might then yield a parse tree like
    GExprAtom                              ╷ GOperandAdd GExprMul
    ├─GExprUnary───────────────────────────┤                    │
    ├─LAExprMacro<GOperandMul, GExprUnary>─┤                    │
    ├─GExprMul─────────────────────────────┤                    │
    ├─LAExprMacro<GOperandAdd, GExprMul>───┘                    │
    └─LAExprMacro<GOperandAdd, GExprMul>────────────────────────┘

  Alternatively, the parser could execute the production at /home/prybicki/code/latte/src/latte.lalrpop:100:5: 100:63, which would consume the top 2 token(s) from the stack and produce a `GExprUnary`. This might then yield a parse tree like
    "-"                            GExprAtom GOperandAdd GExprMul
    ├─GExprUnary───────────────────────────┤                    │
    ├─LAExprMacro<GOperandMul, GExprUnary>─┤                    │
    ├─GExprMul─────────────────────────────┤                    │
    ├─LAExprMacro<GOperandAdd, GExprMul>───┘                    │
    └─LAExprMacro<GOperandAdd, GExprMul>────────────────────────┘

  See the LALRPOP manual for advice on making your grammar LR(1).

/home/prybicki/code/latte/src/latte.lalrpop:101:5: 101:19: Local ambiguity detected

  The problem arises after having observed the following symbols in the input:
    "-" GExprAtom
  At that point, if the next token is a `","`, then the parser can proceed in two different ways.

  First, the parser could execute the production at /home/prybicki/code/latte/src/latte.lalrpop:101:5: 101:19, which would consume the top 1 token(s) from the stack and produce a `GExprUnary`. This might then yield a parse tree like
    GExprAtom                              ╷ ","
    ├─GExprUnary───────────────────────────┤   │
    ├─LAExprMacro<GOperandMul, GExprUnary>─┤   │
    ├─GExprMul─────────────────────────────┤   │
    ├─LAExprMacro<GOperandAdd, GExprMul>───┤   │
    ├─GExprAdd─────────────────────────────┤   │
    ├─LAExprMacro<GOperandRel, GExprAdd>───┤   │
    ├─GExprRel─────────────────────────────┤   │
    ├─RAExprMacro<GOperandAnd, GExprRel>───┤   │
    ├─GExprAnd─────────────────────────────┤   │
    ├─RAExprMacro<GOperandOr, GExprAnd>────┤   │
    ├─GExprOr──────────────────────────────┤   │
    ├─GExpr────────────────────────────────┘   │
    └─(<GExpr> ",")+───────────────────────────┘

  Alternatively, the parser could execute the production at /home/prybicki/code/latte/src/latte.lalrpop:100:5: 100:63, which would consume the top 2 token(s) from the stack and produce a `GExprUnary`. This might then yield a parse tree like
    "-"                            GExprAtom ","
    ├─GExprUnary───────────────────────────┤   │
    ├─LAExprMacro<GOperandMul, GExprUnary>─┤   │
    ├─GExprMul─────────────────────────────┤   │
    ├─LAExprMacro<GOperandAdd, GExprMul>───┤   │
    ├─GExprAdd─────────────────────────────┤   │
    ├─LAExprMacro<GOperandRel, GExprAdd>───┤   │
    ├─GExprRel─────────────────────────────┤   │
    ├─RAExprMacro<GOperandAnd, GExprRel>───┤   │
    ├─GExprAnd─────────────────────────────┤   │
    ├─RAExprMacro<GOperandOr, GExprAnd>────┤   │
    ├─GExprOr──────────────────────────────┤   │
    ├─GExpr────────────────────────────────┘   │
    └─(<GExpr> ",")+───────────────────────────┘

  See the LALRPOP manual for advice on making your grammar LR(1).

/home/prybicki/code/latte/src/latte.lalrpop:101:5: 101:19: Local ambiguity detected

  The problem arises after having observed the following symbols in the input:
    "-" GExprAtom
  At that point, if the next token is a `"-"`, then the parser can proceed in two different ways.

  First, the parser could execute the production at /home/prybicki/code/latte/src/latte.lalrpop:101:5: 101:19, which would consume the top 1 token(s) from the stack and produce a `GExprUnary`. This might then yield a parse tree like
    GExprAtom                              ╷ GOperandAdd GExprMul
    ├─GExprUnary───────────────────────────┤                    │
    ├─LAExprMacro<GOperandMul, GExprUnary>─┤                    │
    ├─GExprMul─────────────────────────────┤                    │
    ├─LAExprMacro<GOperandAdd, GExprMul>───┘                    │
    └─LAExprMacro<GOperandAdd, GExprMul>────────────────────────┘

  Alternatively, the parser could execute the production at /home/prybicki/code/latte/src/latte.lalrpop:100:5: 100:63, which would consume the top 2 token(s) from the stack and produce a `GExprUnary`. This might then yield a parse tree like
    "-"                            GExprAtom GOperandAdd GExprMul
    ├─GExprUnary───────────────────────────┤                    │
    ├─LAExprMacro<GOperandMul, GExprUnary>─┤                    │
    ├─GExprMul─────────────────────────────┤                    │
    ├─LAExprMacro<GOperandAdd, GExprMul>───┘                    │
    └─LAExprMacro<GOperandAdd, GExprMul>────────────────────────┘

  See the LALRPOP manual for advice on making your grammar LR(1).

/home/prybicki/code/latte/src/latte.lalrpop:101:5: 101:19: Local ambiguity detected

  The problem arises after having observed the following symbols in the input:
    "-" GExprAtom
  At that point, if the next token is a `"/"`, then the parser can proceed in two different ways.

  First, the parser could execute the production at /home/prybicki/code/latte/src/latte.lalrpop:101:5: 101:19, which would consume the top 1 token(s) from the stack and produce a `GExprUnary`. This might then yield a parse tree like
    GExprAtom                              ╷ GOperandMul GExprUnary
    ├─GExprUnary───────────────────────────┤                      │
    ├─LAExprMacro<GOperandMul, GExprUnary>─┘                      │
    └─LAExprMacro<GOperandMul, GExprUnary>────────────────────────┘

  Alternatively, the parser could execute the production at /home/prybicki/code/latte/src/latte.lalrpop:100:5: 100:63, which would consume the top 2 token(s) from the stack and produce a `GExprUnary`. This might then yield a parse tree like
    "-"                            GExprAtom GOperandMul GExprUnary
    ├─GExprUnary───────────────────────────┤                      │
    ├─LAExprMacro<GOperandMul, GExprUnary>─┘                      │
    └─LAExprMacro<GOperandMul, GExprUnary>────────────────────────┘

  See the LALRPOP manual for advice on making your grammar LR(1).

/home/prybicki/code/latte/src/latte.lalrpop:101:5: 101:19: Local ambiguity detected

  The problem arises after having observed the following symbols in the input:
    "-" GExprAtom
  At that point, if the next token is a `"<"`, then the parser can proceed in two different ways.

  First, the parser could execute the production at /home/prybicki/code/latte/src/latte.lalrpop:101:5: 101:19, which would consume the top 1 token(s) from the stack and produce a `GExprUnary`. This might then yield a parse tree like
    GExprAtom                              ╷ GOperandRel GExprAdd
    ├─GExprUnary───────────────────────────┤                    │
    ├─LAExprMacro<GOperandMul, GExprUnary>─┤                    │
    ├─GExprMul─────────────────────────────┤                    │
    ├─LAExprMacro<GOperandAdd, GExprMul>───┤                    │
    ├─GExprAdd─────────────────────────────┤                    │
    ├─LAExprMacro<GOperandRel, GExprAdd>───┘                    │
    └─LAExprMacro<GOperandRel, GExprAdd>────────────────────────┘

  Alternatively, the parser could execute the production at /home/prybicki/code/latte/src/latte.lalrpop:100:5: 100:63, which would consume the top 2 token(s) from the stack and produce a `GExprUnary`. This might then yield a parse tree like
    "-"                            GExprAtom GOperandRel GExprAdd
    ├─GExprUnary───────────────────────────┤                    │
    ├─LAExprMacro<GOperandMul, GExprUnary>─┤                    │
    ├─GExprMul─────────────────────────────┤                    │
    ├─LAExprMacro<GOperandAdd, GExprMul>───┤                    │
    ├─GExprAdd─────────────────────────────┤                    │
    ├─LAExprMacro<GOperandRel, GExprAdd>───┘                    │
    └─LAExprMacro<GOperandRel, GExprAdd>────────────────────────┘

  See the LALRPOP manual for advice on making your grammar LR(1).

/home/prybicki/code/latte/src/latte.lalrpop:101:5: 101:19: Local ambiguity detected

  The problem arises after having observed the following symbols in the input:
    "-" GExprAtom
  At that point, if the next token is a `"<="`, then the parser can proceed in two different ways.

  First, the parser could execute the production at /home/prybicki/code/latte/src/latte.lalrpop:101:5: 101:19, which would consume the top 1 token(s) from the stack and produce a `GExprUnary`. This might then yield a parse tree like
    GExprAtom                              ╷ GOperandRel GExprAdd
    ├─GExprUnary───────────────────────────┤                    │
    ├─LAExprMacro<GOperandMul, GExprUnary>─┤                    │
    ├─GExprMul─────────────────────────────┤                    │
    ├─LAExprMacro<GOperandAdd, GExprMul>───┤                    │
    ├─GExprAdd─────────────────────────────┤                    │
    ├─LAExprMacro<GOperandRel, GExprAdd>───┘                    │
    └─LAExprMacro<GOperandRel, GExprAdd>────────────────────────┘

  Alternatively, the parser could execute the production at /home/prybicki/code/latte/src/latte.lalrpop:100:5: 100:63, which would consume the top 2 token(s) from the stack and produce a `GExprUnary`. This might then yield a parse tree like
    "-"                            GExprAtom GOperandRel GExprAdd
    ├─GExprUnary───────────────────────────┤                    │
    ├─LAExprMacro<GOperandMul, GExprUnary>─┤                    │
    ├─GExprMul─────────────────────────────┤                    │
    ├─LAExprMacro<GOperandAdd, GExprMul>───┤                    │
    ├─GExprAdd─────────────────────────────┤                    │
    ├─LAExprMacro<GOperandRel, GExprAdd>───┘                    │
    └─LAExprMacro<GOperandRel, GExprAdd>────────────────────────┘

  See the LALRPOP manual for advice on making your grammar LR(1).

/home/prybicki/code/latte/src/latte.lalrpop:101:5: 101:19: Local ambiguity detected

  The problem arises after having observed the following symbols in the input:
    "-" GExprAtom
  At that point, if the next token is a `">"`, then the parser can proceed in two different ways.

  First, the parser could execute the production at /home/prybicki/code/latte/src/latte.lalrpop:101:5: 101:19, which would consume the top 1 token(s) from the stack and produce a `GExprUnary`. This might then yield a parse tree like
    GExprAtom                              ╷ GOperandRel GExprAdd
    ├─GExprUnary───────────────────────────┤                    │
    ├─LAExprMacro<GOperandMul, GExprUnary>─┤                    │
    ├─GExprMul─────────────────────────────┤                    │
    ├─LAExprMacro<GOperandAdd, GExprMul>───┤                    │
    ├─GExprAdd─────────────────────────────┤                    │
    ├─LAExprMacro<GOperandRel, GExprAdd>───┘                    │
    └─LAExprMacro<GOperandRel, GExprAdd>────────────────────────┘

  Alternatively, the parser could execute the production at /home/prybicki/code/latte/src/latte.lalrpop:100:5: 100:63, which would consume the top 2 token(s) from the stack and produce a `GExprUnary`. This might then yield a parse tree like
    "-"                            GExprAtom GOperandRel GExprAdd
    ├─GExprUnary───────────────────────────┤                    │
    ├─LAExprMacro<GOperandMul, GExprUnary>─┤                    │
    ├─GExprMul─────────────────────────────┤                    │
    ├─LAExprMacro<GOperandAdd, GExprMul>───┤                    │
    ├─GExprAdd─────────────────────────────┤                    │
    ├─LAExprMacro<GOperandRel, GExprAdd>───┘                    │
    └─LAExprMacro<GOperandRel, GExprAdd>────────────────────────┘

  See the LALRPOP manual for advice on making your grammar LR(1).

/home/prybicki/code/latte/src/latte.lalrpop:101:5: 101:19: Local ambiguity detected

  The problem arises after having observed the following symbols in the input:
    "-" GExprAtom
  At that point, if the next token is a `">="`, then the parser can proceed in two different ways.

  First, the parser could execute the production at /home/prybicki/code/latte/src/latte.lalrpop:101:5: 101:19, which would consume the top 1 token(s) from the stack and produce a `GExprUnary`. This might then yield a parse tree like
    GExprAtom                              ╷ GOperandRel GExprAdd
    ├─GExprUnary───────────────────────────┤                    │
    ├─LAExprMacro<GOperandMul, GExprUnary>─┤                    │
    ├─GExprMul─────────────────────────────┤                    │
    ├─LAExprMacro<GOperandAdd, GExprMul>───┤                    │
    ├─GExprAdd─────────────────────────────┤                    │
    ├─LAExprMacro<GOperandRel, GExprAdd>───┘                    │
    └─LAExprMacro<GOperandRel, GExprAdd>────────────────────────┘

  Alternatively, the parser could execute the production at /home/prybicki/code/latte/src/latte.lalrpop:100:5: 100:63, which would consume the top 2 token(s) from the stack and produce a `GExprUnary`. This might then yield a parse tree like
    "-"                            GExprAtom GOperandRel GExprAdd
    ├─GExprUnary───────────────────────────┤                    │
    ├─LAExprMacro<GOperandMul, GExprUnary>─┤                    │
    ├─GExprMul─────────────────────────────┤                    │
    ├─LAExprMacro<GOperandAdd, GExprMul>───┤                    │
    ├─GExprAdd─────────────────────────────┤                    │
    ├─LAExprMacro<GOperandRel, GExprAdd>───┘                    │
    └─LAExprMacro<GOperandRel, GExprAdd>────────────────────────┘

  See the LALRPOP manual for advice on making your grammar LR(1).

/home/prybicki/code/latte/src/latte.lalrpop:101:5: 101:19: Conflict detected

    when in this state:
  GExprUnary = GExprAtom (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = "-" GExprAtom (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `"false"` we can reduce to a `GExprUnary` but we can also reduce to a `GExprUnary`

/home/prybicki/code/latte/src/latte.lalrpop:101:5: 101:19: Conflict detected

    when in this state:
  GExprUnary = GExprAtom (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = "-" GExprAtom (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `"true"` we can reduce to a `GExprUnary` but we can also reduce to a `GExprUnary`

/home/prybicki/code/latte/src/latte.lalrpop:101:5: 101:19: Local ambiguity detected

  The problem arises after having observed the following symbols in the input:
    "-" GExprAtom
  At that point, if the next token is a `"||"`, then the parser can proceed in two different ways.

  First, the parser could execute the production at /home/prybicki/code/latte/src/latte.lalrpop:101:5: 101:19, which would consume the top 1 token(s) from the stack and produce a `GExprUnary`. This might then yield a parse tree like
    GExprAtom                              ╷ GOperandOr RAExprMacro<GOperandOr, GExprAnd>
    ├─GExprUnary───────────────────────────┤                                            │
    ├─LAExprMacro<GOperandMul, GExprUnary>─┤                                            │
    ├─GExprMul─────────────────────────────┤                                            │
    ├─LAExprMacro<GOperandAdd, GExprMul>───┤                                            │
    ├─GExprAdd─────────────────────────────┤                                            │
    ├─LAExprMacro<GOperandRel, GExprAdd>───┤                                            │
    ├─GExprRel─────────────────────────────┤                                            │
    ├─RAExprMacro<GOperandAnd, GExprRel>───┤                                            │
    ├─GExprAnd─────────────────────────────┘                                            │
    └─RAExprMacro<GOperandOr, GExprAnd>─────────────────────────────────────────────────┘

  Alternatively, the parser could execute the production at /home/prybicki/code/latte/src/latte.lalrpop:100:5: 100:63, which would consume the top 2 token(s) from the stack and produce a `GExprUnary`. This might then yield a parse tree like
    "-"                            GExprAtom GOperandOr RAExprMacro<GOperandOr, GExprAnd>
    ├─GExprUnary───────────────────────────┤                                            │
    ├─LAExprMacro<GOperandMul, GExprUnary>─┤                                            │
    ├─GExprMul─────────────────────────────┤                                            │
    ├─LAExprMacro<GOperandAdd, GExprMul>───┤                                            │
    ├─GExprAdd─────────────────────────────┤                                            │
    ├─LAExprMacro<GOperandRel, GExprAdd>───┤                                            │
    ├─GExprRel─────────────────────────────┤                                            │
    ├─RAExprMacro<GOperandAnd, GExprRel>───┤                                            │
    ├─GExprAnd─────────────────────────────┘                                            │
    └─RAExprMacro<GOperandOr, GExprAnd>─────────────────────────────────────────────────┘

  See the LALRPOP manual for advice on making your grammar LR(1).

/home/prybicki/code/latte/src/latte.lalrpop:101:5: 101:19: Conflict detected

    when in this state:
  GExprUnary = GExprAtom (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = "-" GExprAtom (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `r#"\"([^,\",\\\\]|\\\\\")*\""#` we can reduce to a `GExprUnary` but we can also reduce to a `GExprUnary`

/home/prybicki/code/latte/src/latte.lalrpop:101:5: 101:19: Conflict detected

    when in this state:
  GExprUnary = GExprAtom (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = "-" GExprAtom (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `r#"[+-]"#` we can reduce to a `GExprUnary` but we can also reduce to a `GExprUnary`

/home/prybicki/code/latte/src/latte.lalrpop:101:5: 101:19: Conflict detected

    when in this state:
  GExprUnary = GExprAtom (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = "-" GExprAtom (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `r#"[0-9]+"#` we can reduce to a `GExprUnary` but we can also reduce to a `GExprUnary`

/home/prybicki/code/latte/src/latte.lalrpop:101:5: 101:19: Conflict detected

    when in this state:
  GExprUnary = GExprAtom (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = "-" GExprAtom (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `r#"[A-Z,a-z,_\']+"#` we can reduce to a `GExprUnary` but we can also reduce to a `GExprUnary`

/home/prybicki/code/latte/src/latte.lalrpop:101:5: 101:19: Conflict detected

    when in this state:
  GExprUnary = GExprAtom (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  GExprUnary = "-" GExprAtom (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `EOF` we can reduce to a `GExprUnary` but we can also reduce to a `GExprUnary`

/home/prybicki/code/latte/src/latte.lalrpop:80:8: 80:17: Local ambiguity detected

  The problem arises after having observed the following symbols in the input:
    (<GExpr> ",")+ GExpr ","
  At that point, if the next token is a `"!"`, then the parser can proceed in two different ways.

  First, the parser could execute the production at /home/prybicki/code/latte/src/latte.lalrpop:80:8: 80:17, which would consume the top 3 token(s) from the stack and produce a `(<GExpr> ",")+`. This might then yield a parse tree like
    (<GExpr> ",")+ GExpr "," GExpr
    ├─(<GExpr> ",")+───────┘     │
    └─CommaSeparatedList<GExpr>──┘

  Alternatively, the parser could execute the production at /home/prybicki/code/latte/src/latte.lalrpop:80:8: 80:17, which would consume the top 2 token(s) from the stack and produce a `(<GExpr> ",")+`. This might then yield a parse tree like
    GExpr             "," ╷ GExpr
    ├─(<GExpr> ",")+──────┘     │
    └─CommaSeparatedList<GExpr>─┘

  See the LALRPOP manual for advice on making your grammar LR(1).

/home/prybicki/code/latte/src/latte.lalrpop:80:8: 80:17: Conflict detected

    when in this state:
  (<GExpr> ",")+ = (<GExpr> ",")+ GExpr "," (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  (<GExpr> ",")+ = GExpr "," (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `"%"` we can reduce to a `(<GExpr> ",")+` but we can also reduce to a `(<GExpr> ",")+`

/home/prybicki/code/latte/src/latte.lalrpop:80:8: 80:17: Conflict detected

    when in this state:
  (<GExpr> ",")+ = (<GExpr> ",")+ GExpr "," (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  (<GExpr> ",")+ = GExpr "," (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `"&&"` we can reduce to a `(<GExpr> ",")+` but we can also reduce to a `(<GExpr> ",")+`

/home/prybicki/code/latte/src/latte.lalrpop:80:8: 80:17: Local ambiguity detected

  The problem arises after having observed the following symbols in the input:
    (<GExpr> ",")+ GExpr ","
  At that point, if the next token is a `"("`, then the parser can proceed in two different ways.

  First, the parser could execute the production at /home/prybicki/code/latte/src/latte.lalrpop:80:8: 80:17, which would consume the top 3 token(s) from the stack and produce a `(<GExpr> ",")+`. This might then yield a parse tree like
    (<GExpr> ",")+ GExpr "," GExpr
    ├─(<GExpr> ",")+───────┘     │
    └─CommaSeparatedList<GExpr>──┘

  Alternatively, the parser could execute the production at /home/prybicki/code/latte/src/latte.lalrpop:80:8: 80:17, which would consume the top 2 token(s) from the stack and produce a `(<GExpr> ",")+`. This might then yield a parse tree like
    GExpr             "," ╷ GExpr
    ├─(<GExpr> ",")+──────┘     │
    └─CommaSeparatedList<GExpr>─┘

  See the LALRPOP manual for advice on making your grammar LR(1).

/home/prybicki/code/latte/src/latte.lalrpop:80:8: 80:17: Local ambiguity detected

  The problem arises after having observed the following symbols in the input:
    (<GExpr> ",")+ GExpr ","
  At that point, if the next token is a `")"`, then the parser can proceed in two different ways.

  First, the parser could execute the production at /home/prybicki/code/latte/src/latte.lalrpop:80:8: 80:17, which would consume the top 3 token(s) from the stack and produce a `(<GExpr> ",")+`. This might then yield a parse tree like
    (<GExpr> ",")+ GExpr "," GExpr
    ├─(<GExpr> ",")+───────┘     │
    └─CommaSeparatedList<GExpr>──┘

  Alternatively, the parser could execute the production at /home/prybicki/code/latte/src/latte.lalrpop:80:8: 80:17, which would consume the top 2 token(s) from the stack and produce a `(<GExpr> ",")+`. This might then yield a parse tree like
    GExpr             "," ╷ GExpr
    ├─(<GExpr> ",")+──────┘     │
    └─CommaSeparatedList<GExpr>─┘

  See the LALRPOP manual for advice on making your grammar LR(1).

/home/prybicki/code/latte/src/latte.lalrpop:80:8: 80:17: Conflict detected

    when in this state:
  (<GExpr> ",")+ = (<GExpr> ",")+ GExpr "," (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  (<GExpr> ",")+ = GExpr "," (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `"*"` we can reduce to a `(<GExpr> ",")+` but we can also reduce to a `(<GExpr> ",")+`

/home/prybicki/code/latte/src/latte.lalrpop:80:8: 80:17: Conflict detected

    when in this state:
  (<GExpr> ",")+ = (<GExpr> ",")+ GExpr "," (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  (<GExpr> ",")+ = GExpr "," (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `"+"` we can reduce to a `(<GExpr> ",")+` but we can also reduce to a `(<GExpr> ",")+`

/home/prybicki/code/latte/src/latte.lalrpop:80:8: 80:17: Conflict detected

    when in this state:
  (<GExpr> ",")+ = (<GExpr> ",")+ GExpr "," (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  (<GExpr> ",")+ = GExpr "," (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `","` we can reduce to a `(<GExpr> ",")+` but we can also reduce to a `(<GExpr> ",")+`

/home/prybicki/code/latte/src/latte.lalrpop:80:8: 80:17: Local ambiguity detected

  The problem arises after having observed the following symbols in the input:
    (<GExpr> ",")+ GExpr ","
  At that point, if the next token is a `"-"`, then the parser can proceed in two different ways.

  First, the parser could execute the production at /home/prybicki/code/latte/src/latte.lalrpop:80:8: 80:17, which would consume the top 3 token(s) from the stack and produce a `(<GExpr> ",")+`. This might then yield a parse tree like
    (<GExpr> ",")+ GExpr "," GExpr
    ├─(<GExpr> ",")+───────┘     │
    └─CommaSeparatedList<GExpr>──┘

  Alternatively, the parser could execute the production at /home/prybicki/code/latte/src/latte.lalrpop:80:8: 80:17, which would consume the top 2 token(s) from the stack and produce a `(<GExpr> ",")+`. This might then yield a parse tree like
    GExpr             "," ╷ GExpr
    ├─(<GExpr> ",")+──────┘     │
    └─CommaSeparatedList<GExpr>─┘

  See the LALRPOP manual for advice on making your grammar LR(1).

/home/prybicki/code/latte/src/latte.lalrpop:80:8: 80:17: Conflict detected

    when in this state:
  (<GExpr> ",")+ = (<GExpr> ",")+ GExpr "," (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  (<GExpr> ",")+ = GExpr "," (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `"/"` we can reduce to a `(<GExpr> ",")+` but we can also reduce to a `(<GExpr> ",")+`

/home/prybicki/code/latte/src/latte.lalrpop:80:8: 80:17: Conflict detected

    when in this state:
  (<GExpr> ",")+ = (<GExpr> ",")+ GExpr "," (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  (<GExpr> ",")+ = GExpr "," (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `"<"` we can reduce to a `(<GExpr> ",")+` but we can also reduce to a `(<GExpr> ",")+`

/home/prybicki/code/latte/src/latte.lalrpop:80:8: 80:17: Conflict detected

    when in this state:
  (<GExpr> ",")+ = (<GExpr> ",")+ GExpr "," (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  (<GExpr> ",")+ = GExpr "," (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `"<="` we can reduce to a `(<GExpr> ",")+` but we can also reduce to a `(<GExpr> ",")+`

/home/prybicki/code/latte/src/latte.lalrpop:80:8: 80:17: Conflict detected

    when in this state:
  (<GExpr> ",")+ = (<GExpr> ",")+ GExpr "," (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  (<GExpr> ",")+ = GExpr "," (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `">"` we can reduce to a `(<GExpr> ",")+` but we can also reduce to a `(<GExpr> ",")+`

/home/prybicki/code/latte/src/latte.lalrpop:80:8: 80:17: Conflict detected

    when in this state:
  (<GExpr> ",")+ = (<GExpr> ",")+ GExpr "," (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  (<GExpr> ",")+ = GExpr "," (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `">="` we can reduce to a `(<GExpr> ",")+` but we can also reduce to a `(<GExpr> ",")+`

/home/prybicki/code/latte/src/latte.lalrpop:80:8: 80:17: Local ambiguity detected

  The problem arises after having observed the following symbols in the input:
    (<GExpr> ",")+ GExpr ","
  At that point, if the next token is a `"false"`, then the parser can proceed in two different ways.

  First, the parser could execute the production at /home/prybicki/code/latte/src/latte.lalrpop:80:8: 80:17, which would consume the top 3 token(s) from the stack and produce a `(<GExpr> ",")+`. This might then yield a parse tree like
    (<GExpr> ",")+ GExpr "," GExpr
    ├─(<GExpr> ",")+───────┘     │
    └─CommaSeparatedList<GExpr>──┘

  Alternatively, the parser could execute the production at /home/prybicki/code/latte/src/latte.lalrpop:80:8: 80:17, which would consume the top 2 token(s) from the stack and produce a `(<GExpr> ",")+`. This might then yield a parse tree like
    GExpr             "," ╷ GExpr
    ├─(<GExpr> ",")+──────┘     │
    └─CommaSeparatedList<GExpr>─┘

  See the LALRPOP manual for advice on making your grammar LR(1).

/home/prybicki/code/latte/src/latte.lalrpop:80:8: 80:17: Local ambiguity detected

  The problem arises after having observed the following symbols in the input:
    (<GExpr> ",")+ GExpr ","
  At that point, if the next token is a `"true"`, then the parser can proceed in two different ways.

  First, the parser could execute the production at /home/prybicki/code/latte/src/latte.lalrpop:80:8: 80:17, which would consume the top 3 token(s) from the stack and produce a `(<GExpr> ",")+`. This might then yield a parse tree like
    (<GExpr> ",")+ GExpr "," GExpr
    ├─(<GExpr> ",")+───────┘     │
    └─CommaSeparatedList<GExpr>──┘

  Alternatively, the parser could execute the production at /home/prybicki/code/latte/src/latte.lalrpop:80:8: 80:17, which would consume the top 2 token(s) from the stack and produce a `(<GExpr> ",")+`. This might then yield a parse tree like
    GExpr             "," ╷ GExpr
    ├─(<GExpr> ",")+──────┘     │
    └─CommaSeparatedList<GExpr>─┘

  See the LALRPOP manual for advice on making your grammar LR(1).

/home/prybicki/code/latte/src/latte.lalrpop:80:8: 80:17: Conflict detected

    when in this state:
  (<GExpr> ",")+ = (<GExpr> ",")+ GExpr "," (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  (<GExpr> ",")+ = GExpr "," (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `"||"` we can reduce to a `(<GExpr> ",")+` but we can also reduce to a `(<GExpr> ",")+`

/home/prybicki/code/latte/src/latte.lalrpop:80:8: 80:17: Local ambiguity detected

  The problem arises after having observed the following symbols in the input:
    (<GExpr> ",")+ GExpr ","
  At that point, if the next token is a `r#"\"([^,\",\\\\]|\\\\\")*\""#`, then the parser can proceed in two different ways.

  First, the parser could execute the production at /home/prybicki/code/latte/src/latte.lalrpop:80:8: 80:17, which would consume the top 3 token(s) from the stack and produce a `(<GExpr> ",")+`. This might then yield a parse tree like
    (<GExpr> ",")+ GExpr "," GExpr
    ├─(<GExpr> ",")+───────┘     │
    └─CommaSeparatedList<GExpr>──┘

  Alternatively, the parser could execute the production at /home/prybicki/code/latte/src/latte.lalrpop:80:8: 80:17, which would consume the top 2 token(s) from the stack and produce a `(<GExpr> ",")+`. This might then yield a parse tree like
    GExpr             "," ╷ GExpr
    ├─(<GExpr> ",")+──────┘     │
    └─CommaSeparatedList<GExpr>─┘

  See the LALRPOP manual for advice on making your grammar LR(1).

/home/prybicki/code/latte/src/latte.lalrpop:80:8: 80:17: Local ambiguity detected

  The problem arises after having observed the following symbols in the input:
    (<GExpr> ",")+ GExpr ","
  At that point, if the next token is a `r#"[+-]"#`, then the parser can proceed in two different ways.

  First, the parser could execute the production at /home/prybicki/code/latte/src/latte.lalrpop:80:8: 80:17, which would consume the top 3 token(s) from the stack and produce a `(<GExpr> ",")+`. This might then yield a parse tree like
    (<GExpr> ",")+ GExpr "," GExpr
    ├─(<GExpr> ",")+───────┘     │
    └─CommaSeparatedList<GExpr>──┘

  Alternatively, the parser could execute the production at /home/prybicki/code/latte/src/latte.lalrpop:80:8: 80:17, which would consume the top 2 token(s) from the stack and produce a `(<GExpr> ",")+`. This might then yield a parse tree like
    GExpr             "," ╷ GExpr
    ├─(<GExpr> ",")+──────┘     │
    └─CommaSeparatedList<GExpr>─┘

  See the LALRPOP manual for advice on making your grammar LR(1).

/home/prybicki/code/latte/src/latte.lalrpop:80:8: 80:17: Local ambiguity detected

  The problem arises after having observed the following symbols in the input:
    (<GExpr> ",")+ GExpr ","
  At that point, if the next token is a `r#"[0-9]+"#`, then the parser can proceed in two different ways.

  First, the parser could execute the production at /home/prybicki/code/latte/src/latte.lalrpop:80:8: 80:17, which would consume the top 3 token(s) from the stack and produce a `(<GExpr> ",")+`. This might then yield a parse tree like
    (<GExpr> ",")+ GExpr "," GExpr
    ├─(<GExpr> ",")+───────┘     │
    └─CommaSeparatedList<GExpr>──┘

  Alternatively, the parser could execute the production at /home/prybicki/code/latte/src/latte.lalrpop:80:8: 80:17, which would consume the top 2 token(s) from the stack and produce a `(<GExpr> ",")+`. This might then yield a parse tree like
    GExpr             "," ╷ GExpr
    ├─(<GExpr> ",")+──────┘     │
    └─CommaSeparatedList<GExpr>─┘

  See the LALRPOP manual for advice on making your grammar LR(1).

/home/prybicki/code/latte/src/latte.lalrpop:80:8: 80:17: Local ambiguity detected

  The problem arises after having observed the following symbols in the input:
    (<GExpr> ",")+ GExpr ","
  At that point, if the next token is a `r#"[A-Z,a-z,_\']+"#`, then the parser can proceed in two different ways.

  First, the parser could execute the production at /home/prybicki/code/latte/src/latte.lalrpop:80:8: 80:17, which would consume the top 3 token(s) from the stack and produce a `(<GExpr> ",")+`. This might then yield a parse tree like
    (<GExpr> ",")+ GExpr "," GExpr
    ├─(<GExpr> ",")+───────┘     │
    └─CommaSeparatedList<GExpr>──┘

  Alternatively, the parser could execute the production at /home/prybicki/code/latte/src/latte.lalrpop:80:8: 80:17, which would consume the top 2 token(s) from the stack and produce a `(<GExpr> ",")+`. This might then yield a parse tree like
    GExpr             "," ╷ GExpr
    ├─(<GExpr> ",")+──────┘     │
    └─CommaSeparatedList<GExpr>─┘

  See the LALRPOP manual for advice on making your grammar LR(1).

/home/prybicki/code/latte/src/latte.lalrpop:80:8: 80:17: Conflict detected

    when in this state:
  (<GExpr> ",")+ = (<GExpr> ",")+ GExpr "," (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  (<GExpr> ",")+ = GExpr "," (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `EOF` we can reduce to a `(<GExpr> ",")+` but we can also reduce to a `(<GExpr> ",")+`

/home/prybicki/code/latte/src/latte.lalrpop:92:12: 92:44: Conflict detected

    when in this state:
  GExprOr = RAExprMacro<GOperandOr, GExprAnd> (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandOr, GExprAnd> = GExprAnd GOperandOr RAExprMacro<GOperandOr, GExprAnd> (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `"!"` we can reduce to a `GExprOr` but we can also reduce to a `RAExprMacro<GOperandOr, GExprAnd>`

/home/prybicki/code/latte/src/latte.lalrpop:92:12: 92:44: Conflict detected

    when in this state:
  GExprOr = RAExprMacro<GOperandOr, GExprAnd> (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandOr, GExprAnd> = GExprAnd GOperandOr RAExprMacro<GOperandOr, GExprAnd> (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `"%"` we can reduce to a `GExprOr` but we can also reduce to a `RAExprMacro<GOperandOr, GExprAnd>`

/home/prybicki/code/latte/src/latte.lalrpop:92:12: 92:44: Conflict detected

    when in this state:
  GExprOr = RAExprMacro<GOperandOr, GExprAnd> (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandOr, GExprAnd> = GExprAnd GOperandOr RAExprMacro<GOperandOr, GExprAnd> (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `"&&"` we can reduce to a `GExprOr` but we can also reduce to a `RAExprMacro<GOperandOr, GExprAnd>`

/home/prybicki/code/latte/src/latte.lalrpop:92:12: 92:44: Conflict detected

    when in this state:
  GExprOr = RAExprMacro<GOperandOr, GExprAnd> (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandOr, GExprAnd> = GExprAnd GOperandOr RAExprMacro<GOperandOr, GExprAnd> (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `"("` we can reduce to a `GExprOr` but we can also reduce to a `RAExprMacro<GOperandOr, GExprAnd>`

/home/prybicki/code/latte/src/latte.lalrpop:92:12: 92:44: Local ambiguity detected

  The problem arises after having observed the following symbols in the input:
    GExprAnd GOperandOr RAExprMacro<GOperandOr, GExprAnd>
  At that point, if the next token is a `")"`, then the parser can proceed in two different ways.

  First, the parser could execute the production at /home/prybicki/code/latte/src/latte.lalrpop:92:12: 92:44, which would consume the top 1 token(s) from the stack and produce a `GExprOr`. This might then yield a parse tree like
    RAExprMacro<GOperandOr, GExprAnd> ")"
    ├─GExprOr───────────────────────┤   │
    ├─GExpr─────────────────────────┤   │
    ├─CommaSeparatedList<GExpr>─────┘   │
    └─GExprAtom─────────────────────────┘

  Alternatively, the parser could execute the production at /home/prybicki/code/latte/src/latte.lalrpop:92:12: 92:44, which would consume the top 3 token(s) from the stack and produce a `RAExprMacro<GOperandOr, GExprAnd>`. This might then yield a parse tree like
    GExprAnd GOperandOr RAExprMacro<GOperandOr, GExprAnd> ")"
    ├─RAExprMacro<GOperandOr, GExprAnd>─────────────────┤   │
    ├─GExprOr───────────────────────────────────────────┤   │
    ├─GExpr─────────────────────────────────────────────┤   │
    ├─CommaSeparatedList<GExpr>─────────────────────────┘   │
    └─GExprAtom─────────────────────────────────────────────┘

  See the LALRPOP manual for advice on making your grammar LR(1).

/home/prybicki/code/latte/src/latte.lalrpop:92:12: 92:44: Conflict detected

    when in this state:
  GExprOr = RAExprMacro<GOperandOr, GExprAnd> (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandOr, GExprAnd> = GExprAnd GOperandOr RAExprMacro<GOperandOr, GExprAnd> (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `"*"` we can reduce to a `GExprOr` but we can also reduce to a `RAExprMacro<GOperandOr, GExprAnd>`

/home/prybicki/code/latte/src/latte.lalrpop:92:12: 92:44: Conflict detected

    when in this state:
  GExprOr = RAExprMacro<GOperandOr, GExprAnd> (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandOr, GExprAnd> = GExprAnd GOperandOr RAExprMacro<GOperandOr, GExprAnd> (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `"+"` we can reduce to a `GExprOr` but we can also reduce to a `RAExprMacro<GOperandOr, GExprAnd>`

/home/prybicki/code/latte/src/latte.lalrpop:92:12: 92:44: Local ambiguity detected

  The problem arises after having observed the following symbols in the input:
    GExprAnd GOperandOr RAExprMacro<GOperandOr, GExprAnd>
  At that point, if the next token is a `","`, then the parser can proceed in two different ways.

  First, the parser could execute the production at /home/prybicki/code/latte/src/latte.lalrpop:92:12: 92:44, which would consume the top 1 token(s) from the stack and produce a `GExprOr`. This might then yield a parse tree like
    RAExprMacro<GOperandOr, GExprAnd> ","
    ├─GExprOr───────────────────────┤   │
    ├─GExpr─────────────────────────┘   │
    └─(<GExpr> ",")+────────────────────┘

  Alternatively, the parser could execute the production at /home/prybicki/code/latte/src/latte.lalrpop:92:12: 92:44, which would consume the top 3 token(s) from the stack and produce a `RAExprMacro<GOperandOr, GExprAnd>`. This might then yield a parse tree like
    GExprAnd GOperandOr RAExprMacro<GOperandOr, GExprAnd> ","
    ├─RAExprMacro<GOperandOr, GExprAnd>─────────────────┤   │
    ├─GExprOr───────────────────────────────────────────┤   │
    ├─GExpr─────────────────────────────────────────────┘   │
    └─(<GExpr> ",")+────────────────────────────────────────┘

  See the LALRPOP manual for advice on making your grammar LR(1).

/home/prybicki/code/latte/src/latte.lalrpop:92:12: 92:44: Conflict detected

    when in this state:
  GExprOr = RAExprMacro<GOperandOr, GExprAnd> (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandOr, GExprAnd> = GExprAnd GOperandOr RAExprMacro<GOperandOr, GExprAnd> (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `"-"` we can reduce to a `GExprOr` but we can also reduce to a `RAExprMacro<GOperandOr, GExprAnd>`

/home/prybicki/code/latte/src/latte.lalrpop:92:12: 92:44: Conflict detected

    when in this state:
  GExprOr = RAExprMacro<GOperandOr, GExprAnd> (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandOr, GExprAnd> = GExprAnd GOperandOr RAExprMacro<GOperandOr, GExprAnd> (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `"/"` we can reduce to a `GExprOr` but we can also reduce to a `RAExprMacro<GOperandOr, GExprAnd>`

/home/prybicki/code/latte/src/latte.lalrpop:92:12: 92:44: Conflict detected

    when in this state:
  GExprOr = RAExprMacro<GOperandOr, GExprAnd> (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandOr, GExprAnd> = GExprAnd GOperandOr RAExprMacro<GOperandOr, GExprAnd> (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `"<"` we can reduce to a `GExprOr` but we can also reduce to a `RAExprMacro<GOperandOr, GExprAnd>`

/home/prybicki/code/latte/src/latte.lalrpop:92:12: 92:44: Conflict detected

    when in this state:
  GExprOr = RAExprMacro<GOperandOr, GExprAnd> (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandOr, GExprAnd> = GExprAnd GOperandOr RAExprMacro<GOperandOr, GExprAnd> (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `"<="` we can reduce to a `GExprOr` but we can also reduce to a `RAExprMacro<GOperandOr, GExprAnd>`

/home/prybicki/code/latte/src/latte.lalrpop:92:12: 92:44: Conflict detected

    when in this state:
  GExprOr = RAExprMacro<GOperandOr, GExprAnd> (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandOr, GExprAnd> = GExprAnd GOperandOr RAExprMacro<GOperandOr, GExprAnd> (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `">"` we can reduce to a `GExprOr` but we can also reduce to a `RAExprMacro<GOperandOr, GExprAnd>`

/home/prybicki/code/latte/src/latte.lalrpop:92:12: 92:44: Conflict detected

    when in this state:
  GExprOr = RAExprMacro<GOperandOr, GExprAnd> (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandOr, GExprAnd> = GExprAnd GOperandOr RAExprMacro<GOperandOr, GExprAnd> (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `">="` we can reduce to a `GExprOr` but we can also reduce to a `RAExprMacro<GOperandOr, GExprAnd>`

/home/prybicki/code/latte/src/latte.lalrpop:92:12: 92:44: Conflict detected

    when in this state:
  GExprOr = RAExprMacro<GOperandOr, GExprAnd> (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandOr, GExprAnd> = GExprAnd GOperandOr RAExprMacro<GOperandOr, GExprAnd> (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `"false"` we can reduce to a `GExprOr` but we can also reduce to a `RAExprMacro<GOperandOr, GExprAnd>`

/home/prybicki/code/latte/src/latte.lalrpop:92:12: 92:44: Conflict detected

    when in this state:
  GExprOr = RAExprMacro<GOperandOr, GExprAnd> (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandOr, GExprAnd> = GExprAnd GOperandOr RAExprMacro<GOperandOr, GExprAnd> (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `"true"` we can reduce to a `GExprOr` but we can also reduce to a `RAExprMacro<GOperandOr, GExprAnd>`

/home/prybicki/code/latte/src/latte.lalrpop:92:12: 92:44: Conflict detected

    when in this state:
  GExprOr = RAExprMacro<GOperandOr, GExprAnd> (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandOr, GExprAnd> = GExprAnd GOperandOr RAExprMacro<GOperandOr, GExprAnd> (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `"||"` we can reduce to a `GExprOr` but we can also reduce to a `RAExprMacro<GOperandOr, GExprAnd>`

/home/prybicki/code/latte/src/latte.lalrpop:92:12: 92:44: Conflict detected

    when in this state:
  GExprOr = RAExprMacro<GOperandOr, GExprAnd> (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandOr, GExprAnd> = GExprAnd GOperandOr RAExprMacro<GOperandOr, GExprAnd> (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `r#"\"([^,\",\\\\]|\\\\\")*\""#` we can reduce to a `GExprOr` but we can also reduce to a `RAExprMacro<GOperandOr, GExprAnd>`

/home/prybicki/code/latte/src/latte.lalrpop:92:12: 92:44: Conflict detected

    when in this state:
  GExprOr = RAExprMacro<GOperandOr, GExprAnd> (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandOr, GExprAnd> = GExprAnd GOperandOr RAExprMacro<GOperandOr, GExprAnd> (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `r#"[+-]"#` we can reduce to a `GExprOr` but we can also reduce to a `RAExprMacro<GOperandOr, GExprAnd>`

/home/prybicki/code/latte/src/latte.lalrpop:92:12: 92:44: Conflict detected

    when in this state:
  GExprOr = RAExprMacro<GOperandOr, GExprAnd> (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandOr, GExprAnd> = GExprAnd GOperandOr RAExprMacro<GOperandOr, GExprAnd> (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `r#"[0-9]+"#` we can reduce to a `GExprOr` but we can also reduce to a `RAExprMacro<GOperandOr, GExprAnd>`

/home/prybicki/code/latte/src/latte.lalrpop:92:12: 92:44: Conflict detected

    when in this state:
  GExprOr = RAExprMacro<GOperandOr, GExprAnd> (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandOr, GExprAnd> = GExprAnd GOperandOr RAExprMacro<GOperandOr, GExprAnd> (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `r#"[A-Z,a-z,_\']+"#` we can reduce to a `GExprOr` but we can also reduce to a `RAExprMacro<GOperandOr, GExprAnd>`

/home/prybicki/code/latte/src/latte.lalrpop:92:12: 92:44: Conflict detected

    when in this state:
  GExprOr = RAExprMacro<GOperandOr, GExprAnd> (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandOr, GExprAnd> = GExprAnd GOperandOr RAExprMacro<GOperandOr, GExprAnd> (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `EOF` we can reduce to a `GExprOr` but we can also reduce to a `RAExprMacro<GOperandOr, GExprAnd>`

/home/prybicki/code/latte/src/latte.lalrpop:93:12: 93:45: Conflict detected

    when in this state:
  GExprAnd = RAExprMacro<GOperandAnd, GExprRel> (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandAnd, GExprRel> = GExprRel GOperandAnd RAExprMacro<GOperandAnd, GExprRel> (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `"!"` we can reduce to a `GExprAnd` but we can also reduce to a `RAExprMacro<GOperandAnd, GExprRel>`

/home/prybicki/code/latte/src/latte.lalrpop:93:12: 93:45: Conflict detected

    when in this state:
  GExprAnd = RAExprMacro<GOperandAnd, GExprRel> (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandAnd, GExprRel> = GExprRel GOperandAnd RAExprMacro<GOperandAnd, GExprRel> (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `"%"` we can reduce to a `GExprAnd` but we can also reduce to a `RAExprMacro<GOperandAnd, GExprRel>`

/home/prybicki/code/latte/src/latte.lalrpop:93:12: 93:45: Conflict detected

    when in this state:
  GExprAnd = RAExprMacro<GOperandAnd, GExprRel> (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandAnd, GExprRel> = GExprRel GOperandAnd RAExprMacro<GOperandAnd, GExprRel> (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `"&&"` we can reduce to a `GExprAnd` but we can also reduce to a `RAExprMacro<GOperandAnd, GExprRel>`

/home/prybicki/code/latte/src/latte.lalrpop:93:12: 93:45: Conflict detected

    when in this state:
  GExprAnd = RAExprMacro<GOperandAnd, GExprRel> (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandAnd, GExprRel> = GExprRel GOperandAnd RAExprMacro<GOperandAnd, GExprRel> (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `"("` we can reduce to a `GExprAnd` but we can also reduce to a `RAExprMacro<GOperandAnd, GExprRel>`

/home/prybicki/code/latte/src/latte.lalrpop:93:12: 93:45: Local ambiguity detected

  The problem arises after having observed the following symbols in the input:
    GExprRel GOperandAnd RAExprMacro<GOperandAnd, GExprRel>
  At that point, if the next token is a `")"`, then the parser can proceed in two different ways.

  First, the parser could execute the production at /home/prybicki/code/latte/src/latte.lalrpop:93:12: 93:45, which would consume the top 1 token(s) from the stack and produce a `GExprAnd`. This might then yield a parse tree like
    RAExprMacro<GOperandAnd, GExprRel>  ╷ ")"
    ├─GExprAnd──────────────────────────┤   │
    ├─RAExprMacro<GOperandOr, GExprAnd>─┤   │
    ├─GExprOr───────────────────────────┤   │
    ├─GExpr─────────────────────────────┤   │
    ├─CommaSeparatedList<GExpr>─────────┘   │
    └─GExprAtom─────────────────────────────┘

  Alternatively, the parser could execute the production at /home/prybicki/code/latte/src/latte.lalrpop:93:12: 93:45, which would consume the top 3 token(s) from the stack and produce a `RAExprMacro<GOperandAnd, GExprRel>`. This might then yield a parse tree like
    GExprRel GOperandAnd RAExprMacro<GOperandAnd, GExprRel> ")"
    ├─RAExprMacro<GOperandAnd, GExprRel>──────────────────┤   │
    ├─GExprAnd────────────────────────────────────────────┤   │
    ├─RAExprMacro<GOperandOr, GExprAnd>───────────────────┤   │
    ├─GExprOr─────────────────────────────────────────────┤   │
    ├─GExpr───────────────────────────────────────────────┤   │
    ├─CommaSeparatedList<GExpr>───────────────────────────┘   │
    └─GExprAtom───────────────────────────────────────────────┘

  See the LALRPOP manual for advice on making your grammar LR(1).

/home/prybicki/code/latte/src/latte.lalrpop:93:12: 93:45: Conflict detected

    when in this state:
  GExprAnd = RAExprMacro<GOperandAnd, GExprRel> (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandAnd, GExprRel> = GExprRel GOperandAnd RAExprMacro<GOperandAnd, GExprRel> (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `"*"` we can reduce to a `GExprAnd` but we can also reduce to a `RAExprMacro<GOperandAnd, GExprRel>`

/home/prybicki/code/latte/src/latte.lalrpop:93:12: 93:45: Conflict detected

    when in this state:
  GExprAnd = RAExprMacro<GOperandAnd, GExprRel> (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandAnd, GExprRel> = GExprRel GOperandAnd RAExprMacro<GOperandAnd, GExprRel> (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `"+"` we can reduce to a `GExprAnd` but we can also reduce to a `RAExprMacro<GOperandAnd, GExprRel>`

/home/prybicki/code/latte/src/latte.lalrpop:93:12: 93:45: Local ambiguity detected

  The problem arises after having observed the following symbols in the input:
    GExprRel GOperandAnd RAExprMacro<GOperandAnd, GExprRel>
  At that point, if the next token is a `","`, then the parser can proceed in two different ways.

  First, the parser could execute the production at /home/prybicki/code/latte/src/latte.lalrpop:93:12: 93:45, which would consume the top 1 token(s) from the stack and produce a `GExprAnd`. This might then yield a parse tree like
    RAExprMacro<GOperandAnd, GExprRel>  ╷ ","
    ├─GExprAnd──────────────────────────┤   │
    ├─RAExprMacro<GOperandOr, GExprAnd>─┤   │
    ├─GExprOr───────────────────────────┤   │
    ├─GExpr─────────────────────────────┘   │
    └─(<GExpr> ",")+────────────────────────┘

  Alternatively, the parser could execute the production at /home/prybicki/code/latte/src/latte.lalrpop:93:12: 93:45, which would consume the top 3 token(s) from the stack and produce a `RAExprMacro<GOperandAnd, GExprRel>`. This might then yield a parse tree like
    GExprRel GOperandAnd RAExprMacro<GOperandAnd, GExprRel> ","
    ├─RAExprMacro<GOperandAnd, GExprRel>──────────────────┤   │
    ├─GExprAnd────────────────────────────────────────────┤   │
    ├─RAExprMacro<GOperandOr, GExprAnd>───────────────────┤   │
    ├─GExprOr─────────────────────────────────────────────┤   │
    ├─GExpr───────────────────────────────────────────────┘   │
    └─(<GExpr> ",")+──────────────────────────────────────────┘

  See the LALRPOP manual for advice on making your grammar LR(1).

/home/prybicki/code/latte/src/latte.lalrpop:93:12: 93:45: Conflict detected

    when in this state:
  GExprAnd = RAExprMacro<GOperandAnd, GExprRel> (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandAnd, GExprRel> = GExprRel GOperandAnd RAExprMacro<GOperandAnd, GExprRel> (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `"-"` we can reduce to a `GExprAnd` but we can also reduce to a `RAExprMacro<GOperandAnd, GExprRel>`

/home/prybicki/code/latte/src/latte.lalrpop:93:12: 93:45: Conflict detected

    when in this state:
  GExprAnd = RAExprMacro<GOperandAnd, GExprRel> (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandAnd, GExprRel> = GExprRel GOperandAnd RAExprMacro<GOperandAnd, GExprRel> (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `"/"` we can reduce to a `GExprAnd` but we can also reduce to a `RAExprMacro<GOperandAnd, GExprRel>`

/home/prybicki/code/latte/src/latte.lalrpop:93:12: 93:45: Conflict detected

    when in this state:
  GExprAnd = RAExprMacro<GOperandAnd, GExprRel> (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandAnd, GExprRel> = GExprRel GOperandAnd RAExprMacro<GOperandAnd, GExprRel> (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `"<"` we can reduce to a `GExprAnd` but we can also reduce to a `RAExprMacro<GOperandAnd, GExprRel>`

/home/prybicki/code/latte/src/latte.lalrpop:93:12: 93:45: Conflict detected

    when in this state:
  GExprAnd = RAExprMacro<GOperandAnd, GExprRel> (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandAnd, GExprRel> = GExprRel GOperandAnd RAExprMacro<GOperandAnd, GExprRel> (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `"<="` we can reduce to a `GExprAnd` but we can also reduce to a `RAExprMacro<GOperandAnd, GExprRel>`

/home/prybicki/code/latte/src/latte.lalrpop:93:12: 93:45: Conflict detected

    when in this state:
  GExprAnd = RAExprMacro<GOperandAnd, GExprRel> (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandAnd, GExprRel> = GExprRel GOperandAnd RAExprMacro<GOperandAnd, GExprRel> (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `">"` we can reduce to a `GExprAnd` but we can also reduce to a `RAExprMacro<GOperandAnd, GExprRel>`

/home/prybicki/code/latte/src/latte.lalrpop:93:12: 93:45: Conflict detected

    when in this state:
  GExprAnd = RAExprMacro<GOperandAnd, GExprRel> (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandAnd, GExprRel> = GExprRel GOperandAnd RAExprMacro<GOperandAnd, GExprRel> (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `">="` we can reduce to a `GExprAnd` but we can also reduce to a `RAExprMacro<GOperandAnd, GExprRel>`

/home/prybicki/code/latte/src/latte.lalrpop:93:12: 93:45: Conflict detected

    when in this state:
  GExprAnd = RAExprMacro<GOperandAnd, GExprRel> (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandAnd, GExprRel> = GExprRel GOperandAnd RAExprMacro<GOperandAnd, GExprRel> (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `"false"` we can reduce to a `GExprAnd` but we can also reduce to a `RAExprMacro<GOperandAnd, GExprRel>`

/home/prybicki/code/latte/src/latte.lalrpop:93:12: 93:45: Conflict detected

    when in this state:
  GExprAnd = RAExprMacro<GOperandAnd, GExprRel> (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandAnd, GExprRel> = GExprRel GOperandAnd RAExprMacro<GOperandAnd, GExprRel> (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `"true"` we can reduce to a `GExprAnd` but we can also reduce to a `RAExprMacro<GOperandAnd, GExprRel>`

/home/prybicki/code/latte/src/latte.lalrpop:93:12: 93:45: Local ambiguity detected

  The problem arises after having observed the following symbols in the input:
    GExprRel GOperandAnd RAExprMacro<GOperandAnd, GExprRel>
  At that point, if the next token is a `"||"`, then the parser can proceed in two different ways.

  First, the parser could execute the production at /home/prybicki/code/latte/src/latte.lalrpop:93:12: 93:45, which would consume the top 1 token(s) from the stack and produce a `GExprAnd`. This might then yield a parse tree like
    RAExprMacro<GOperandAnd, GExprRel> GOperandOr RAExprMacro<GOperandOr, GExprAnd>
    ├─GExprAnd───────────────────────┘                                            │
    └─RAExprMacro<GOperandOr, GExprAnd>───────────────────────────────────────────┘

  Alternatively, the parser could execute the production at /home/prybicki/code/latte/src/latte.lalrpop:93:12: 93:45, which would consume the top 3 token(s) from the stack and produce a `RAExprMacro<GOperandAnd, GExprRel>`. This might then yield a parse tree like
    GExprRel GOperandAnd RAExprMacro<GOperandAnd, GExprRel> GOperandOr RAExprMacro<GOperandOr, GExprAnd>
    ├─RAExprMacro<GOperandAnd, GExprRel>──────────────────┤                                            │
    ├─GExprAnd────────────────────────────────────────────┘                                            │
    └─RAExprMacro<GOperandOr, GExprAnd>────────────────────────────────────────────────────────────────┘

  See the LALRPOP manual for advice on making your grammar LR(1).

/home/prybicki/code/latte/src/latte.lalrpop:93:12: 93:45: Conflict detected

    when in this state:
  GExprAnd = RAExprMacro<GOperandAnd, GExprRel> (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandAnd, GExprRel> = GExprRel GOperandAnd RAExprMacro<GOperandAnd, GExprRel> (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `r#"\"([^,\",\\\\]|\\\\\")*\""#` we can reduce to a `GExprAnd` but we can also reduce to a `RAExprMacro<GOperandAnd, GExprRel>`

/home/prybicki/code/latte/src/latte.lalrpop:93:12: 93:45: Conflict detected

    when in this state:
  GExprAnd = RAExprMacro<GOperandAnd, GExprRel> (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandAnd, GExprRel> = GExprRel GOperandAnd RAExprMacro<GOperandAnd, GExprRel> (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `r#"[+-]"#` we can reduce to a `GExprAnd` but we can also reduce to a `RAExprMacro<GOperandAnd, GExprRel>`

/home/prybicki/code/latte/src/latte.lalrpop:93:12: 93:45: Conflict detected

    when in this state:
  GExprAnd = RAExprMacro<GOperandAnd, GExprRel> (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandAnd, GExprRel> = GExprRel GOperandAnd RAExprMacro<GOperandAnd, GExprRel> (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `r#"[0-9]+"#` we can reduce to a `GExprAnd` but we can also reduce to a `RAExprMacro<GOperandAnd, GExprRel>`

/home/prybicki/code/latte/src/latte.lalrpop:93:12: 93:45: Conflict detected

    when in this state:
  GExprAnd = RAExprMacro<GOperandAnd, GExprRel> (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandAnd, GExprRel> = GExprRel GOperandAnd RAExprMacro<GOperandAnd, GExprRel> (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `r#"[A-Z,a-z,_\']+"#` we can reduce to a `GExprAnd` but we can also reduce to a `RAExprMacro<GOperandAnd, GExprRel>`

/home/prybicki/code/latte/src/latte.lalrpop:93:12: 93:45: Conflict detected

    when in this state:
  GExprAnd = RAExprMacro<GOperandAnd, GExprRel> (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  RAExprMacro<GOperandAnd, GExprRel> = GExprRel GOperandAnd RAExprMacro<GOperandAnd, GExprRel> (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `EOF` we can reduce to a `GExprAnd` but we can also reduce to a `RAExprMacro<GOperandAnd, GExprRel>`

/home/prybicki/code/latte/src/latte.lalrpop:95:12: 95:45: Conflict detected

    when in this state:
  LAExprMacro<GOperandAdd, GExprMul> = GExprMul (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandAdd, GExprMul> = LAExprMacro<GOperandAdd, GExprMul> GOperandAdd GExprMul (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `"!"` we can reduce to a `LAExprMacro<GOperandAdd, GExprMul>` but we can also reduce to a `LAExprMacro<GOperandAdd, GExprMul>`

/home/prybicki/code/latte/src/latte.lalrpop:95:12: 95:45: Conflict detected

    when in this state:
  LAExprMacro<GOperandAdd, GExprMul> = GExprMul (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandAdd, GExprMul> = LAExprMacro<GOperandAdd, GExprMul> GOperandAdd GExprMul (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `"%"` we can reduce to a `LAExprMacro<GOperandAdd, GExprMul>` but we can also reduce to a `LAExprMacro<GOperandAdd, GExprMul>`

/home/prybicki/code/latte/src/latte.lalrpop:95:12: 95:45: Local ambiguity detected

  The problem arises after having observed the following symbols in the input:
    LAExprMacro<GOperandAdd, GExprMul> GOperandAdd GExprMul
  At that point, if the next token is a `"&&"`, then the parser can proceed in two different ways.

  First, the parser could execute the production at /home/prybicki/code/latte/src/latte.lalrpop:95:12: 95:45, which would consume the top 1 token(s) from the stack and produce a `LAExprMacro<GOperandAdd, GExprMul>`. This might then yield a parse tree like
    GExprMul                             ╷ GOperandAnd RAExprMacro<GOperandAnd, GExprRel>
    ├─LAExprMacro<GOperandAdd, GExprMul>─┤                                              │
    ├─GExprAdd───────────────────────────┤                                              │
    ├─LAExprMacro<GOperandRel, GExprAdd>─┤                                              │
    ├─GExprRel───────────────────────────┘                                              │
    └─RAExprMacro<GOperandAnd, GExprRel>────────────────────────────────────────────────┘

  Alternatively, the parser could execute the production at /home/prybicki/code/latte/src/latte.lalrpop:95:12: 95:45, which would consume the top 3 token(s) from the stack and produce a `LAExprMacro<GOperandAdd, GExprMul>`. This might then yield a parse tree like
    LAExprMacro<GOperandAdd, GExprMul> GOperandAdd GExprMul GOperandAnd RAExprMacro<GOperandAnd, GExprRel>
    ├─LAExprMacro<GOperandAdd, GExprMul>──────────────────┤                                              │
    ├─GExprAdd────────────────────────────────────────────┤                                              │
    ├─LAExprMacro<GOperandRel, GExprAdd>──────────────────┤                                              │
    ├─GExprRel────────────────────────────────────────────┘                                              │
    └─RAExprMacro<GOperandAnd, GExprRel>─────────────────────────────────────────────────────────────────┘

  See the LALRPOP manual for advice on making your grammar LR(1).

/home/prybicki/code/latte/src/latte.lalrpop:95:12: 95:45: Conflict detected

    when in this state:
  LAExprMacro<GOperandAdd, GExprMul> = GExprMul (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandAdd, GExprMul> = LAExprMacro<GOperandAdd, GExprMul> GOperandAdd GExprMul (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `"("` we can reduce to a `LAExprMacro<GOperandAdd, GExprMul>` but we can also reduce to a `LAExprMacro<GOperandAdd, GExprMul>`

/home/prybicki/code/latte/src/latte.lalrpop:95:12: 95:45: Local ambiguity detected

  The problem arises after having observed the following symbols in the input:
    LAExprMacro<GOperandAdd, GExprMul> GOperandAdd GExprMul
  At that point, if the next token is a `")"`, then the parser can proceed in two different ways.

  First, the parser could execute the production at /home/prybicki/code/latte/src/latte.lalrpop:95:12: 95:45, which would consume the top 1 token(s) from the stack and produce a `LAExprMacro<GOperandAdd, GExprMul>`. This might then yield a parse tree like
    GExprMul                             ╷ ")"
    ├─LAExprMacro<GOperandAdd, GExprMul>─┤   │
    ├─GExprAdd───────────────────────────┤   │
    ├─LAExprMacro<GOperandRel, GExprAdd>─┤   │
    ├─GExprRel───────────────────────────┤   │
    ├─RAExprMacro<GOperandAnd, GExprRel>─┤   │
    ├─GExprAnd───────────────────────────┤   │
    ├─RAExprMacro<GOperandOr, GExprAnd>──┤   │
    ├─GExprOr────────────────────────────┤   │
    ├─GExpr──────────────────────────────┤   │
    ├─CommaSeparatedList<GExpr>──────────┘   │
    └─GExprAtom──────────────────────────────┘

  Alternatively, the parser could execute the production at /home/prybicki/code/latte/src/latte.lalrpop:95:12: 95:45, which would consume the top 3 token(s) from the stack and produce a `LAExprMacro<GOperandAdd, GExprMul>`. This might then yield a parse tree like
    LAExprMacro<GOperandAdd, GExprMul> GOperandAdd GExprMul ")"
    ├─LAExprMacro<GOperandAdd, GExprMul>──────────────────┤   │
    ├─GExprAdd────────────────────────────────────────────┤   │
    ├─LAExprMacro<GOperandRel, GExprAdd>──────────────────┤   │
    ├─GExprRel────────────────────────────────────────────┤   │
    ├─RAExprMacro<GOperandAnd, GExprRel>──────────────────┤   │
    ├─GExprAnd────────────────────────────────────────────┤   │
    ├─RAExprMacro<GOperandOr, GExprAnd>───────────────────┤   │
    ├─GExprOr─────────────────────────────────────────────┤   │
    ├─GExpr───────────────────────────────────────────────┤   │
    ├─CommaSeparatedList<GExpr>───────────────────────────┘   │
    └─GExprAtom───────────────────────────────────────────────┘

  See the LALRPOP manual for advice on making your grammar LR(1).

/home/prybicki/code/latte/src/latte.lalrpop:95:12: 95:45: Conflict detected

    when in this state:
  LAExprMacro<GOperandAdd, GExprMul> = GExprMul (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandAdd, GExprMul> = LAExprMacro<GOperandAdd, GExprMul> GOperandAdd GExprMul (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `"*"` we can reduce to a `LAExprMacro<GOperandAdd, GExprMul>` but we can also reduce to a `LAExprMacro<GOperandAdd, GExprMul>`

/home/prybicki/code/latte/src/latte.lalrpop:95:12: 95:45: Local ambiguity detected

  The problem arises after having observed the following symbols in the input:
    LAExprMacro<GOperandAdd, GExprMul> GOperandAdd GExprMul
  At that point, if the next token is a `"+"`, then the parser can proceed in two different ways.

  First, the parser could execute the production at /home/prybicki/code/latte/src/latte.lalrpop:95:12: 95:45, which would consume the top 1 token(s) from the stack and produce a `LAExprMacro<GOperandAdd, GExprMul>`. This might then yield a parse tree like
    GExprMul                             ╷ GOperandAdd GExprMul
    ├─LAExprMacro<GOperandAdd, GExprMul>─┘                    │
    └─LAExprMacro<GOperandAdd, GExprMul>──────────────────────┘

  Alternatively, the parser could execute the production at /home/prybicki/code/latte/src/latte.lalrpop:95:12: 95:45, which would consume the top 3 token(s) from the stack and produce a `LAExprMacro<GOperandAdd, GExprMul>`. This might then yield a parse tree like
    LAExprMacro<GOperandAdd, GExprMul> GOperandAdd GExprMul GOperandAdd GExprMul
    ├─LAExprMacro<GOperandAdd, GExprMul>──────────────────┘                    │
    └─LAExprMacro<GOperandAdd, GExprMul>───────────────────────────────────────┘

  See the LALRPOP manual for advice on making your grammar LR(1).

/home/prybicki/code/latte/src/latte.lalrpop:95:12: 95:45: Local ambiguity detected

  The problem arises after having observed the following symbols in the input:
    LAExprMacro<GOperandAdd, GExprMul> GOperandAdd GExprMul
  At that point, if the next token is a `","`, then the parser can proceed in two different ways.

  First, the parser could execute the production at /home/prybicki/code/latte/src/latte.lalrpop:95:12: 95:45, which would consume the top 1 token(s) from the stack and produce a `LAExprMacro<GOperandAdd, GExprMul>`. This might then yield a parse tree like
    GExprMul                             ╷ ","
    ├─LAExprMacro<GOperandAdd, GExprMul>─┤   │
    ├─GExprAdd───────────────────────────┤   │
    ├─LAExprMacro<GOperandRel, GExprAdd>─┤   │
    ├─GExprRel───────────────────────────┤   │
    ├─RAExprMacro<GOperandAnd, GExprRel>─┤   │
    ├─GExprAnd───────────────────────────┤   │
    ├─RAExprMacro<GOperandOr, GExprAnd>──┤   │
    ├─GExprOr────────────────────────────┤   │
    ├─GExpr──────────────────────────────┘   │
    └─(<GExpr> ",")+─────────────────────────┘

  Alternatively, the parser could execute the production at /home/prybicki/code/latte/src/latte.lalrpop:95:12: 95:45, which would consume the top 3 token(s) from the stack and produce a `LAExprMacro<GOperandAdd, GExprMul>`. This might then yield a parse tree like
    LAExprMacro<GOperandAdd, GExprMul> GOperandAdd GExprMul ","
    ├─LAExprMacro<GOperandAdd, GExprMul>──────────────────┤   │
    ├─GExprAdd────────────────────────────────────────────┤   │
    ├─LAExprMacro<GOperandRel, GExprAdd>──────────────────┤   │
    ├─GExprRel────────────────────────────────────────────┤   │
    ├─RAExprMacro<GOperandAnd, GExprRel>──────────────────┤   │
    ├─GExprAnd────────────────────────────────────────────┤   │
    ├─RAExprMacro<GOperandOr, GExprAnd>───────────────────┤   │
    ├─GExprOr─────────────────────────────────────────────┤   │
    ├─GExpr───────────────────────────────────────────────┘   │
    └─(<GExpr> ",")+──────────────────────────────────────────┘

  See the LALRPOP manual for advice on making your grammar LR(1).

/home/prybicki/code/latte/src/latte.lalrpop:95:12: 95:45: Local ambiguity detected

  The problem arises after having observed the following symbols in the input:
    LAExprMacro<GOperandAdd, GExprMul> GOperandAdd GExprMul
  At that point, if the next token is a `"-"`, then the parser can proceed in two different ways.

  First, the parser could execute the production at /home/prybicki/code/latte/src/latte.lalrpop:95:12: 95:45, which would consume the top 1 token(s) from the stack and produce a `LAExprMacro<GOperandAdd, GExprMul>`. This might then yield a parse tree like
    GExprMul                             ╷ GOperandAdd GExprMul
    ├─LAExprMacro<GOperandAdd, GExprMul>─┘                    │
    └─LAExprMacro<GOperandAdd, GExprMul>──────────────────────┘

  Alternatively, the parser could execute the production at /home/prybicki/code/latte/src/latte.lalrpop:95:12: 95:45, which would consume the top 3 token(s) from the stack and produce a `LAExprMacro<GOperandAdd, GExprMul>`. This might then yield a parse tree like
    LAExprMacro<GOperandAdd, GExprMul> GOperandAdd GExprMul GOperandAdd GExprMul
    ├─LAExprMacro<GOperandAdd, GExprMul>──────────────────┘                    │
    └─LAExprMacro<GOperandAdd, GExprMul>───────────────────────────────────────┘

  See the LALRPOP manual for advice on making your grammar LR(1).

/home/prybicki/code/latte/src/latte.lalrpop:95:12: 95:45: Conflict detected

    when in this state:
  LAExprMacro<GOperandAdd, GExprMul> = GExprMul (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandAdd, GExprMul> = LAExprMacro<GOperandAdd, GExprMul> GOperandAdd GExprMul (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `"/"` we can reduce to a `LAExprMacro<GOperandAdd, GExprMul>` but we can also reduce to a `LAExprMacro<GOperandAdd, GExprMul>`

/home/prybicki/code/latte/src/latte.lalrpop:95:12: 95:45: Local ambiguity detected

  The problem arises after having observed the following symbols in the input:
    LAExprMacro<GOperandAdd, GExprMul> GOperandAdd GExprMul
  At that point, if the next token is a `"<"`, then the parser can proceed in two different ways.

  First, the parser could execute the production at /home/prybicki/code/latte/src/latte.lalrpop:95:12: 95:45, which would consume the top 1 token(s) from the stack and produce a `LAExprMacro<GOperandAdd, GExprMul>`. This might then yield a parse tree like
    GExprMul                             ╷ GOperandRel GExprAdd
    ├─LAExprMacro<GOperandAdd, GExprMul>─┤                    │
    ├─GExprAdd───────────────────────────┤                    │
    ├─LAExprMacro<GOperandRel, GExprAdd>─┘                    │
    └─LAExprMacro<GOperandRel, GExprAdd>──────────────────────┘

  Alternatively, the parser could execute the production at /home/prybicki/code/latte/src/latte.lalrpop:95:12: 95:45, which would consume the top 3 token(s) from the stack and produce a `LAExprMacro<GOperandAdd, GExprMul>`. This might then yield a parse tree like
    LAExprMacro<GOperandAdd, GExprMul> GOperandAdd GExprMul GOperandRel GExprAdd
    ├─LAExprMacro<GOperandAdd, GExprMul>──────────────────┤                    │
    ├─GExprAdd────────────────────────────────────────────┤                    │
    ├─LAExprMacro<GOperandRel, GExprAdd>──────────────────┘                    │
    └─LAExprMacro<GOperandRel, GExprAdd>───────────────────────────────────────┘

  See the LALRPOP manual for advice on making your grammar LR(1).

/home/prybicki/code/latte/src/latte.lalrpop:95:12: 95:45: Local ambiguity detected

  The problem arises after having observed the following symbols in the input:
    LAExprMacro<GOperandAdd, GExprMul> GOperandAdd GExprMul
  At that point, if the next token is a `"<="`, then the parser can proceed in two different ways.

  First, the parser could execute the production at /home/prybicki/code/latte/src/latte.lalrpop:95:12: 95:45, which would consume the top 1 token(s) from the stack and produce a `LAExprMacro<GOperandAdd, GExprMul>`. This might then yield a parse tree like
    GExprMul                             ╷ GOperandRel GExprAdd
    ├─LAExprMacro<GOperandAdd, GExprMul>─┤                    │
    ├─GExprAdd───────────────────────────┤                    │
    ├─LAExprMacro<GOperandRel, GExprAdd>─┘                    │
    └─LAExprMacro<GOperandRel, GExprAdd>──────────────────────┘

  Alternatively, the parser could execute the production at /home/prybicki/code/latte/src/latte.lalrpop:95:12: 95:45, which would consume the top 3 token(s) from the stack and produce a `LAExprMacro<GOperandAdd, GExprMul>`. This might then yield a parse tree like
    LAExprMacro<GOperandAdd, GExprMul> GOperandAdd GExprMul GOperandRel GExprAdd
    ├─LAExprMacro<GOperandAdd, GExprMul>──────────────────┤                    │
    ├─GExprAdd────────────────────────────────────────────┤                    │
    ├─LAExprMacro<GOperandRel, GExprAdd>──────────────────┘                    │
    └─LAExprMacro<GOperandRel, GExprAdd>───────────────────────────────────────┘

  See the LALRPOP manual for advice on making your grammar LR(1).

/home/prybicki/code/latte/src/latte.lalrpop:95:12: 95:45: Local ambiguity detected

  The problem arises after having observed the following symbols in the input:
    LAExprMacro<GOperandAdd, GExprMul> GOperandAdd GExprMul
  At that point, if the next token is a `">"`, then the parser can proceed in two different ways.

  First, the parser could execute the production at /home/prybicki/code/latte/src/latte.lalrpop:95:12: 95:45, which would consume the top 1 token(s) from the stack and produce a `LAExprMacro<GOperandAdd, GExprMul>`. This might then yield a parse tree like
    GExprMul                             ╷ GOperandRel GExprAdd
    ├─LAExprMacro<GOperandAdd, GExprMul>─┤                    │
    ├─GExprAdd───────────────────────────┤                    │
    ├─LAExprMacro<GOperandRel, GExprAdd>─┘                    │
    └─LAExprMacro<GOperandRel, GExprAdd>──────────────────────┘

  Alternatively, the parser could execute the production at /home/prybicki/code/latte/src/latte.lalrpop:95:12: 95:45, which would consume the top 3 token(s) from the stack and produce a `LAExprMacro<GOperandAdd, GExprMul>`. This might then yield a parse tree like
    LAExprMacro<GOperandAdd, GExprMul> GOperandAdd GExprMul GOperandRel GExprAdd
    ├─LAExprMacro<GOperandAdd, GExprMul>──────────────────┤                    │
    ├─GExprAdd────────────────────────────────────────────┤                    │
    ├─LAExprMacro<GOperandRel, GExprAdd>──────────────────┘                    │
    └─LAExprMacro<GOperandRel, GExprAdd>───────────────────────────────────────┘

  See the LALRPOP manual for advice on making your grammar LR(1).

/home/prybicki/code/latte/src/latte.lalrpop:95:12: 95:45: Local ambiguity detected

  The problem arises after having observed the following symbols in the input:
    LAExprMacro<GOperandAdd, GExprMul> GOperandAdd GExprMul
  At that point, if the next token is a `">="`, then the parser can proceed in two different ways.

  First, the parser could execute the production at /home/prybicki/code/latte/src/latte.lalrpop:95:12: 95:45, which would consume the top 1 token(s) from the stack and produce a `LAExprMacro<GOperandAdd, GExprMul>`. This might then yield a parse tree like
    GExprMul                             ╷ GOperandRel GExprAdd
    ├─LAExprMacro<GOperandAdd, GExprMul>─┤                    │
    ├─GExprAdd───────────────────────────┤                    │
    ├─LAExprMacro<GOperandRel, GExprAdd>─┘                    │
    └─LAExprMacro<GOperandRel, GExprAdd>──────────────────────┘

  Alternatively, the parser could execute the production at /home/prybicki/code/latte/src/latte.lalrpop:95:12: 95:45, which would consume the top 3 token(s) from the stack and produce a `LAExprMacro<GOperandAdd, GExprMul>`. This might then yield a parse tree like
    LAExprMacro<GOperandAdd, GExprMul> GOperandAdd GExprMul GOperandRel GExprAdd
    ├─LAExprMacro<GOperandAdd, GExprMul>──────────────────┤                    │
    ├─GExprAdd────────────────────────────────────────────┤                    │
    ├─LAExprMacro<GOperandRel, GExprAdd>──────────────────┘                    │
    └─LAExprMacro<GOperandRel, GExprAdd>───────────────────────────────────────┘

  See the LALRPOP manual for advice on making your grammar LR(1).

/home/prybicki/code/latte/src/latte.lalrpop:95:12: 95:45: Conflict detected

    when in this state:
  LAExprMacro<GOperandAdd, GExprMul> = GExprMul (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandAdd, GExprMul> = LAExprMacro<GOperandAdd, GExprMul> GOperandAdd GExprMul (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `"false"` we can reduce to a `LAExprMacro<GOperandAdd, GExprMul>` but we can also reduce to a `LAExprMacro<GOperandAdd, GExprMul>`

/home/prybicki/code/latte/src/latte.lalrpop:95:12: 95:45: Conflict detected

    when in this state:
  LAExprMacro<GOperandAdd, GExprMul> = GExprMul (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandAdd, GExprMul> = LAExprMacro<GOperandAdd, GExprMul> GOperandAdd GExprMul (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `"true"` we can reduce to a `LAExprMacro<GOperandAdd, GExprMul>` but we can also reduce to a `LAExprMacro<GOperandAdd, GExprMul>`

/home/prybicki/code/latte/src/latte.lalrpop:95:12: 95:45: Local ambiguity detected

  The problem arises after having observed the following symbols in the input:
    LAExprMacro<GOperandAdd, GExprMul> GOperandAdd GExprMul
  At that point, if the next token is a `"||"`, then the parser can proceed in two different ways.

  First, the parser could execute the production at /home/prybicki/code/latte/src/latte.lalrpop:95:12: 95:45, which would consume the top 1 token(s) from the stack and produce a `LAExprMacro<GOperandAdd, GExprMul>`. This might then yield a parse tree like
    GExprMul                             ╷ GOperandOr RAExprMacro<GOperandOr, GExprAnd>
    ├─LAExprMacro<GOperandAdd, GExprMul>─┤                                            │
    ├─GExprAdd───────────────────────────┤                                            │
    ├─LAExprMacro<GOperandRel, GExprAdd>─┤                                            │
    ├─GExprRel───────────────────────────┤                                            │
    ├─RAExprMacro<GOperandAnd, GExprRel>─┤                                            │
    ├─GExprAnd───────────────────────────┘                                            │
    └─RAExprMacro<GOperandOr, GExprAnd>───────────────────────────────────────────────┘

  Alternatively, the parser could execute the production at /home/prybicki/code/latte/src/latte.lalrpop:95:12: 95:45, which would consume the top 3 token(s) from the stack and produce a `LAExprMacro<GOperandAdd, GExprMul>`. This might then yield a parse tree like
    LAExprMacro<GOperandAdd, GExprMul> GOperandAdd GExprMul GOperandOr RAExprMacro<GOperandOr, GExprAnd>
    ├─LAExprMacro<GOperandAdd, GExprMul>──────────────────┤                                            │
    ├─GExprAdd────────────────────────────────────────────┤                                            │
    ├─LAExprMacro<GOperandRel, GExprAdd>──────────────────┤                                            │
    ├─GExprRel────────────────────────────────────────────┤                                            │
    ├─RAExprMacro<GOperandAnd, GExprRel>──────────────────┤                                            │
    ├─GExprAnd────────────────────────────────────────────┘                                            │
    └─RAExprMacro<GOperandOr, GExprAnd>────────────────────────────────────────────────────────────────┘

  See the LALRPOP manual for advice on making your grammar LR(1).

/home/prybicki/code/latte/src/latte.lalrpop:95:12: 95:45: Conflict detected

    when in this state:
  LAExprMacro<GOperandAdd, GExprMul> = GExprMul (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandAdd, GExprMul> = LAExprMacro<GOperandAdd, GExprMul> GOperandAdd GExprMul (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `r#"\"([^,\",\\\\]|\\\\\")*\""#` we can reduce to a `LAExprMacro<GOperandAdd, GExprMul>` but we can also reduce to a `LAExprMacro<GOperandAdd, GExprMul>`

/home/prybicki/code/latte/src/latte.lalrpop:95:12: 95:45: Conflict detected

    when in this state:
  LAExprMacro<GOperandAdd, GExprMul> = GExprMul (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandAdd, GExprMul> = LAExprMacro<GOperandAdd, GExprMul> GOperandAdd GExprMul (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `r#"[+-]"#` we can reduce to a `LAExprMacro<GOperandAdd, GExprMul>` but we can also reduce to a `LAExprMacro<GOperandAdd, GExprMul>`

/home/prybicki/code/latte/src/latte.lalrpop:95:12: 95:45: Conflict detected

    when in this state:
  LAExprMacro<GOperandAdd, GExprMul> = GExprMul (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandAdd, GExprMul> = LAExprMacro<GOperandAdd, GExprMul> GOperandAdd GExprMul (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `r#"[0-9]+"#` we can reduce to a `LAExprMacro<GOperandAdd, GExprMul>` but we can also reduce to a `LAExprMacro<GOperandAdd, GExprMul>`

/home/prybicki/code/latte/src/latte.lalrpop:95:12: 95:45: Conflict detected

    when in this state:
  LAExprMacro<GOperandAdd, GExprMul> = GExprMul (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandAdd, GExprMul> = LAExprMacro<GOperandAdd, GExprMul> GOperandAdd GExprMul (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `r#"[A-Z,a-z,_\']+"#` we can reduce to a `LAExprMacro<GOperandAdd, GExprMul>` but we can also reduce to a `LAExprMacro<GOperandAdd, GExprMul>`

/home/prybicki/code/latte/src/latte.lalrpop:95:12: 95:45: Conflict detected

    when in this state:
  LAExprMacro<GOperandAdd, GExprMul> = GExprMul (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandAdd, GExprMul> = LAExprMacro<GOperandAdd, GExprMul> GOperandAdd GExprMul (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `EOF` we can reduce to a `LAExprMacro<GOperandAdd, GExprMul>` but we can also reduce to a `LAExprMacro<GOperandAdd, GExprMul>`

/home/prybicki/code/latte/src/latte.lalrpop:96:12: 96:47: Conflict detected

    when in this state:
  LAExprMacro<GOperandMul, GExprUnary> = GExprUnary (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandMul, GExprUnary> = LAExprMacro<GOperandMul, GExprUnary> GOperandMul GExprUnary (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `"!"` we can reduce to a `LAExprMacro<GOperandMul, GExprUnary>` but we can also reduce to a `LAExprMacro<GOperandMul, GExprUnary>`

/home/prybicki/code/latte/src/latte.lalrpop:96:12: 96:47: Local ambiguity detected

  The problem arises after having observed the following symbols in the input:
    LAExprMacro<GOperandMul, GExprUnary> GOperandMul GExprUnary
  At that point, if the next token is a `"%"`, then the parser can proceed in two different ways.

  First, the parser could execute the production at /home/prybicki/code/latte/src/latte.lalrpop:96:12: 96:47, which would consume the top 1 token(s) from the stack and produce a `LAExprMacro<GOperandMul, GExprUnary>`. This might then yield a parse tree like
    GExprUnary                             ╷ GOperandMul GExprUnary
    ├─LAExprMacro<GOperandMul, GExprUnary>─┘                      │
    └─LAExprMacro<GOperandMul, GExprUnary>────────────────────────┘

  Alternatively, the parser could execute the production at /home/prybicki/code/latte/src/latte.lalrpop:96:12: 96:47, which would consume the top 3 token(s) from the stack and produce a `LAExprMacro<GOperandMul, GExprUnary>`. This might then yield a parse tree like
    LAExprMacro<GOperandMul, GExprUnary> GOperandMul GExprUnary GOperandMul GExprUnary
    ├─LAExprMacro<GOperandMul, GExprUnary>────────────────────┘                      │
    └─LAExprMacro<GOperandMul, GExprUnary>───────────────────────────────────────────┘

  See the LALRPOP manual for advice on making your grammar LR(1).

/home/prybicki/code/latte/src/latte.lalrpop:96:12: 96:47: Local ambiguity detected

  The problem arises after having observed the following symbols in the input:
    LAExprMacro<GOperandMul, GExprUnary> GOperandMul GExprUnary
  At that point, if the next token is a `"&&"`, then the parser can proceed in two different ways.

  First, the parser could execute the production at /home/prybicki/code/latte/src/latte.lalrpop:96:12: 96:47, which would consume the top 1 token(s) from the stack and produce a `LAExprMacro<GOperandMul, GExprUnary>`. This might then yield a parse tree like
    GExprUnary                             ╷ GOperandAnd RAExprMacro<GOperandAnd, GExprRel>
    ├─LAExprMacro<GOperandMul, GExprUnary>─┤                                              │
    ├─GExprMul─────────────────────────────┤                                              │
    ├─LAExprMacro<GOperandAdd, GExprMul>───┤                                              │
    ├─GExprAdd─────────────────────────────┤                                              │
    ├─LAExprMacro<GOperandRel, GExprAdd>───┤                                              │
    ├─GExprRel─────────────────────────────┘                                              │
    └─RAExprMacro<GOperandAnd, GExprRel>──────────────────────────────────────────────────┘

  Alternatively, the parser could execute the production at /home/prybicki/code/latte/src/latte.lalrpop:96:12: 96:47, which would consume the top 3 token(s) from the stack and produce a `LAExprMacro<GOperandMul, GExprUnary>`. This might then yield a parse tree like
    LAExprMacro<GOperandMul, GExprUnary> GOperandMul GExprUnary GOperandAnd RAExprMacro<GOperandAnd, GExprRel>
    ├─LAExprMacro<GOperandMul, GExprUnary>────────────────────┤                                              │
    ├─GExprMul────────────────────────────────────────────────┤                                              │
    ├─LAExprMacro<GOperandAdd, GExprMul>──────────────────────┤                                              │
    ├─GExprAdd────────────────────────────────────────────────┤                                              │
    ├─LAExprMacro<GOperandRel, GExprAdd>──────────────────────┤                                              │
    ├─GExprRel────────────────────────────────────────────────┘                                              │
    └─RAExprMacro<GOperandAnd, GExprRel>─────────────────────────────────────────────────────────────────────┘

  See the LALRPOP manual for advice on making your grammar LR(1).

/home/prybicki/code/latte/src/latte.lalrpop:96:12: 96:47: Conflict detected

    when in this state:
  LAExprMacro<GOperandMul, GExprUnary> = GExprUnary (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandMul, GExprUnary> = LAExprMacro<GOperandMul, GExprUnary> GOperandMul GExprUnary (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `"("` we can reduce to a `LAExprMacro<GOperandMul, GExprUnary>` but we can also reduce to a `LAExprMacro<GOperandMul, GExprUnary>`

/home/prybicki/code/latte/src/latte.lalrpop:96:12: 96:47: Local ambiguity detected

  The problem arises after having observed the following symbols in the input:
    LAExprMacro<GOperandMul, GExprUnary> GOperandMul GExprUnary
  At that point, if the next token is a `")"`, then the parser can proceed in two different ways.

  First, the parser could execute the production at /home/prybicki/code/latte/src/latte.lalrpop:96:12: 96:47, which would consume the top 1 token(s) from the stack and produce a `LAExprMacro<GOperandMul, GExprUnary>`. This might then yield a parse tree like
    GExprUnary                             ╷ ")"
    ├─LAExprMacro<GOperandMul, GExprUnary>─┤   │
    ├─GExprMul─────────────────────────────┤   │
    ├─LAExprMacro<GOperandAdd, GExprMul>───┤   │
    ├─GExprAdd─────────────────────────────┤   │
    ├─LAExprMacro<GOperandRel, GExprAdd>───┤   │
    ├─GExprRel─────────────────────────────┤   │
    ├─RAExprMacro<GOperandAnd, GExprRel>───┤   │
    ├─GExprAnd─────────────────────────────┤   │
    ├─RAExprMacro<GOperandOr, GExprAnd>────┤   │
    ├─GExprOr──────────────────────────────┤   │
    ├─GExpr────────────────────────────────┤   │
    ├─CommaSeparatedList<GExpr>────────────┘   │
    └─GExprAtom────────────────────────────────┘

  Alternatively, the parser could execute the production at /home/prybicki/code/latte/src/latte.lalrpop:96:12: 96:47, which would consume the top 3 token(s) from the stack and produce a `LAExprMacro<GOperandMul, GExprUnary>`. This might then yield a parse tree like
    LAExprMacro<GOperandMul, GExprUnary> GOperandMul GExprUnary ")"
    ├─LAExprMacro<GOperandMul, GExprUnary>────────────────────┤   │
    ├─GExprMul────────────────────────────────────────────────┤   │
    ├─LAExprMacro<GOperandAdd, GExprMul>──────────────────────┤   │
    ├─GExprAdd────────────────────────────────────────────────┤   │
    ├─LAExprMacro<GOperandRel, GExprAdd>──────────────────────┤   │
    ├─GExprRel────────────────────────────────────────────────┤   │
    ├─RAExprMacro<GOperandAnd, GExprRel>──────────────────────┤   │
    ├─GExprAnd────────────────────────────────────────────────┤   │
    ├─RAExprMacro<GOperandOr, GExprAnd>───────────────────────┤   │
    ├─GExprOr─────────────────────────────────────────────────┤   │
    ├─GExpr───────────────────────────────────────────────────┤   │
    ├─CommaSeparatedList<GExpr>───────────────────────────────┘   │
    └─GExprAtom───────────────────────────────────────────────────┘

  See the LALRPOP manual for advice on making your grammar LR(1).

/home/prybicki/code/latte/src/latte.lalrpop:96:12: 96:47: Local ambiguity detected

  The problem arises after having observed the following symbols in the input:
    LAExprMacro<GOperandMul, GExprUnary> GOperandMul GExprUnary
  At that point, if the next token is a `"*"`, then the parser can proceed in two different ways.

  First, the parser could execute the production at /home/prybicki/code/latte/src/latte.lalrpop:96:12: 96:47, which would consume the top 1 token(s) from the stack and produce a `LAExprMacro<GOperandMul, GExprUnary>`. This might then yield a parse tree like
    GExprUnary                             ╷ GOperandMul GExprUnary
    ├─LAExprMacro<GOperandMul, GExprUnary>─┘                      │
    └─LAExprMacro<GOperandMul, GExprUnary>────────────────────────┘

  Alternatively, the parser could execute the production at /home/prybicki/code/latte/src/latte.lalrpop:96:12: 96:47, which would consume the top 3 token(s) from the stack and produce a `LAExprMacro<GOperandMul, GExprUnary>`. This might then yield a parse tree like
    LAExprMacro<GOperandMul, GExprUnary> GOperandMul GExprUnary GOperandMul GExprUnary
    ├─LAExprMacro<GOperandMul, GExprUnary>────────────────────┘                      │
    └─LAExprMacro<GOperandMul, GExprUnary>───────────────────────────────────────────┘

  See the LALRPOP manual for advice on making your grammar LR(1).

/home/prybicki/code/latte/src/latte.lalrpop:96:12: 96:47: Local ambiguity detected

  The problem arises after having observed the following symbols in the input:
    LAExprMacro<GOperandMul, GExprUnary> GOperandMul GExprUnary
  At that point, if the next token is a `"+"`, then the parser can proceed in two different ways.

  First, the parser could execute the production at /home/prybicki/code/latte/src/latte.lalrpop:96:12: 96:47, which would consume the top 1 token(s) from the stack and produce a `LAExprMacro<GOperandMul, GExprUnary>`. This might then yield a parse tree like
    GExprUnary                             ╷ GOperandAdd GExprMul
    ├─LAExprMacro<GOperandMul, GExprUnary>─┤                    │
    ├─GExprMul─────────────────────────────┤                    │
    ├─LAExprMacro<GOperandAdd, GExprMul>───┘                    │
    └─LAExprMacro<GOperandAdd, GExprMul>────────────────────────┘

  Alternatively, the parser could execute the production at /home/prybicki/code/latte/src/latte.lalrpop:96:12: 96:47, which would consume the top 3 token(s) from the stack and produce a `LAExprMacro<GOperandMul, GExprUnary>`. This might then yield a parse tree like
    LAExprMacro<GOperandMul, GExprUnary> GOperandMul GExprUnary GOperandAdd GExprMul
    ├─LAExprMacro<GOperandMul, GExprUnary>────────────────────┤                    │
    ├─GExprMul────────────────────────────────────────────────┤                    │
    ├─LAExprMacro<GOperandAdd, GExprMul>──────────────────────┘                    │
    └─LAExprMacro<GOperandAdd, GExprMul>───────────────────────────────────────────┘

  See the LALRPOP manual for advice on making your grammar LR(1).

/home/prybicki/code/latte/src/latte.lalrpop:96:12: 96:47: Local ambiguity detected

  The problem arises after having observed the following symbols in the input:
    LAExprMacro<GOperandMul, GExprUnary> GOperandMul GExprUnary
  At that point, if the next token is a `","`, then the parser can proceed in two different ways.

  First, the parser could execute the production at /home/prybicki/code/latte/src/latte.lalrpop:96:12: 96:47, which would consume the top 1 token(s) from the stack and produce a `LAExprMacro<GOperandMul, GExprUnary>`. This might then yield a parse tree like
    GExprUnary                             ╷ ","
    ├─LAExprMacro<GOperandMul, GExprUnary>─┤   │
    ├─GExprMul─────────────────────────────┤   │
    ├─LAExprMacro<GOperandAdd, GExprMul>───┤   │
    ├─GExprAdd─────────────────────────────┤   │
    ├─LAExprMacro<GOperandRel, GExprAdd>───┤   │
    ├─GExprRel─────────────────────────────┤   │
    ├─RAExprMacro<GOperandAnd, GExprRel>───┤   │
    ├─GExprAnd─────────────────────────────┤   │
    ├─RAExprMacro<GOperandOr, GExprAnd>────┤   │
    ├─GExprOr──────────────────────────────┤   │
    ├─GExpr────────────────────────────────┘   │
    └─(<GExpr> ",")+───────────────────────────┘

  Alternatively, the parser could execute the production at /home/prybicki/code/latte/src/latte.lalrpop:96:12: 96:47, which would consume the top 3 token(s) from the stack and produce a `LAExprMacro<GOperandMul, GExprUnary>`. This might then yield a parse tree like
    LAExprMacro<GOperandMul, GExprUnary> GOperandMul GExprUnary ","
    ├─LAExprMacro<GOperandMul, GExprUnary>────────────────────┤   │
    ├─GExprMul────────────────────────────────────────────────┤   │
    ├─LAExprMacro<GOperandAdd, GExprMul>──────────────────────┤   │
    ├─GExprAdd────────────────────────────────────────────────┤   │
    ├─LAExprMacro<GOperandRel, GExprAdd>──────────────────────┤   │
    ├─GExprRel────────────────────────────────────────────────┤   │
    ├─RAExprMacro<GOperandAnd, GExprRel>──────────────────────┤   │
    ├─GExprAnd────────────────────────────────────────────────┤   │
    ├─RAExprMacro<GOperandOr, GExprAnd>───────────────────────┤   │
    ├─GExprOr─────────────────────────────────────────────────┤   │
    ├─GExpr───────────────────────────────────────────────────┘   │
    └─(<GExpr> ",")+──────────────────────────────────────────────┘

  See the LALRPOP manual for advice on making your grammar LR(1).

/home/prybicki/code/latte/src/latte.lalrpop:96:12: 96:47: Local ambiguity detected

  The problem arises after having observed the following symbols in the input:
    LAExprMacro<GOperandMul, GExprUnary> GOperandMul GExprUnary
  At that point, if the next token is a `"-"`, then the parser can proceed in two different ways.

  First, the parser could execute the production at /home/prybicki/code/latte/src/latte.lalrpop:96:12: 96:47, which would consume the top 1 token(s) from the stack and produce a `LAExprMacro<GOperandMul, GExprUnary>`. This might then yield a parse tree like
    GExprUnary                             ╷ GOperandAdd GExprMul
    ├─LAExprMacro<GOperandMul, GExprUnary>─┤                    │
    ├─GExprMul─────────────────────────────┤                    │
    ├─LAExprMacro<GOperandAdd, GExprMul>───┘                    │
    └─LAExprMacro<GOperandAdd, GExprMul>────────────────────────┘

  Alternatively, the parser could execute the production at /home/prybicki/code/latte/src/latte.lalrpop:96:12: 96:47, which would consume the top 3 token(s) from the stack and produce a `LAExprMacro<GOperandMul, GExprUnary>`. This might then yield a parse tree like
    LAExprMacro<GOperandMul, GExprUnary> GOperandMul GExprUnary GOperandAdd GExprMul
    ├─LAExprMacro<GOperandMul, GExprUnary>────────────────────┤                    │
    ├─GExprMul────────────────────────────────────────────────┤                    │
    ├─LAExprMacro<GOperandAdd, GExprMul>──────────────────────┘                    │
    └─LAExprMacro<GOperandAdd, GExprMul>───────────────────────────────────────────┘

  See the LALRPOP manual for advice on making your grammar LR(1).

/home/prybicki/code/latte/src/latte.lalrpop:96:12: 96:47: Local ambiguity detected

  The problem arises after having observed the following symbols in the input:
    LAExprMacro<GOperandMul, GExprUnary> GOperandMul GExprUnary
  At that point, if the next token is a `"/"`, then the parser can proceed in two different ways.

  First, the parser could execute the production at /home/prybicki/code/latte/src/latte.lalrpop:96:12: 96:47, which would consume the top 1 token(s) from the stack and produce a `LAExprMacro<GOperandMul, GExprUnary>`. This might then yield a parse tree like
    GExprUnary                             ╷ GOperandMul GExprUnary
    ├─LAExprMacro<GOperandMul, GExprUnary>─┘                      │
    └─LAExprMacro<GOperandMul, GExprUnary>────────────────────────┘

  Alternatively, the parser could execute the production at /home/prybicki/code/latte/src/latte.lalrpop:96:12: 96:47, which would consume the top 3 token(s) from the stack and produce a `LAExprMacro<GOperandMul, GExprUnary>`. This might then yield a parse tree like
    LAExprMacro<GOperandMul, GExprUnary> GOperandMul GExprUnary GOperandMul GExprUnary
    ├─LAExprMacro<GOperandMul, GExprUnary>────────────────────┘                      │
    └─LAExprMacro<GOperandMul, GExprUnary>───────────────────────────────────────────┘

  See the LALRPOP manual for advice on making your grammar LR(1).

/home/prybicki/code/latte/src/latte.lalrpop:96:12: 96:47: Local ambiguity detected

  The problem arises after having observed the following symbols in the input:
    LAExprMacro<GOperandMul, GExprUnary> GOperandMul GExprUnary
  At that point, if the next token is a `"<"`, then the parser can proceed in two different ways.

  First, the parser could execute the production at /home/prybicki/code/latte/src/latte.lalrpop:96:12: 96:47, which would consume the top 1 token(s) from the stack and produce a `LAExprMacro<GOperandMul, GExprUnary>`. This might then yield a parse tree like
    GExprUnary                             ╷ GOperandRel GExprAdd
    ├─LAExprMacro<GOperandMul, GExprUnary>─┤                    │
    ├─GExprMul─────────────────────────────┤                    │
    ├─LAExprMacro<GOperandAdd, GExprMul>───┤                    │
    ├─GExprAdd─────────────────────────────┤                    │
    ├─LAExprMacro<GOperandRel, GExprAdd>───┘                    │
    └─LAExprMacro<GOperandRel, GExprAdd>────────────────────────┘

  Alternatively, the parser could execute the production at /home/prybicki/code/latte/src/latte.lalrpop:96:12: 96:47, which would consume the top 3 token(s) from the stack and produce a `LAExprMacro<GOperandMul, GExprUnary>`. This might then yield a parse tree like
    LAExprMacro<GOperandMul, GExprUnary> GOperandMul GExprUnary GOperandRel GExprAdd
    ├─LAExprMacro<GOperandMul, GExprUnary>────────────────────┤                    │
    ├─GExprMul────────────────────────────────────────────────┤                    │
    ├─LAExprMacro<GOperandAdd, GExprMul>──────────────────────┤                    │
    ├─GExprAdd────────────────────────────────────────────────┤                    │
    ├─LAExprMacro<GOperandRel, GExprAdd>──────────────────────┘                    │
    └─LAExprMacro<GOperandRel, GExprAdd>───────────────────────────────────────────┘

  See the LALRPOP manual for advice on making your grammar LR(1).

/home/prybicki/code/latte/src/latte.lalrpop:96:12: 96:47: Local ambiguity detected

  The problem arises after having observed the following symbols in the input:
    LAExprMacro<GOperandMul, GExprUnary> GOperandMul GExprUnary
  At that point, if the next token is a `"<="`, then the parser can proceed in two different ways.

  First, the parser could execute the production at /home/prybicki/code/latte/src/latte.lalrpop:96:12: 96:47, which would consume the top 1 token(s) from the stack and produce a `LAExprMacro<GOperandMul, GExprUnary>`. This might then yield a parse tree like
    GExprUnary                             ╷ GOperandRel GExprAdd
    ├─LAExprMacro<GOperandMul, GExprUnary>─┤                    │
    ├─GExprMul─────────────────────────────┤                    │
    ├─LAExprMacro<GOperandAdd, GExprMul>───┤                    │
    ├─GExprAdd─────────────────────────────┤                    │
    ├─LAExprMacro<GOperandRel, GExprAdd>───┘                    │
    └─LAExprMacro<GOperandRel, GExprAdd>────────────────────────┘

  Alternatively, the parser could execute the production at /home/prybicki/code/latte/src/latte.lalrpop:96:12: 96:47, which would consume the top 3 token(s) from the stack and produce a `LAExprMacro<GOperandMul, GExprUnary>`. This might then yield a parse tree like
    LAExprMacro<GOperandMul, GExprUnary> GOperandMul GExprUnary GOperandRel GExprAdd
    ├─LAExprMacro<GOperandMul, GExprUnary>────────────────────┤                    │
    ├─GExprMul────────────────────────────────────────────────┤                    │
    ├─LAExprMacro<GOperandAdd, GExprMul>──────────────────────┤                    │
    ├─GExprAdd────────────────────────────────────────────────┤                    │
    ├─LAExprMacro<GOperandRel, GExprAdd>──────────────────────┘                    │
    └─LAExprMacro<GOperandRel, GExprAdd>───────────────────────────────────────────┘

  See the LALRPOP manual for advice on making your grammar LR(1).

/home/prybicki/code/latte/src/latte.lalrpop:96:12: 96:47: Local ambiguity detected

  The problem arises after having observed the following symbols in the input:
    LAExprMacro<GOperandMul, GExprUnary> GOperandMul GExprUnary
  At that point, if the next token is a `">"`, then the parser can proceed in two different ways.

  First, the parser could execute the production at /home/prybicki/code/latte/src/latte.lalrpop:96:12: 96:47, which would consume the top 1 token(s) from the stack and produce a `LAExprMacro<GOperandMul, GExprUnary>`. This might then yield a parse tree like
    GExprUnary                             ╷ GOperandRel GExprAdd
    ├─LAExprMacro<GOperandMul, GExprUnary>─┤                    │
    ├─GExprMul─────────────────────────────┤                    │
    ├─LAExprMacro<GOperandAdd, GExprMul>───┤                    │
    ├─GExprAdd─────────────────────────────┤                    │
    ├─LAExprMacro<GOperandRel, GExprAdd>───┘                    │
    └─LAExprMacro<GOperandRel, GExprAdd>────────────────────────┘

  Alternatively, the parser could execute the production at /home/prybicki/code/latte/src/latte.lalrpop:96:12: 96:47, which would consume the top 3 token(s) from the stack and produce a `LAExprMacro<GOperandMul, GExprUnary>`. This might then yield a parse tree like
    LAExprMacro<GOperandMul, GExprUnary> GOperandMul GExprUnary GOperandRel GExprAdd
    ├─LAExprMacro<GOperandMul, GExprUnary>────────────────────┤                    │
    ├─GExprMul────────────────────────────────────────────────┤                    │
    ├─LAExprMacro<GOperandAdd, GExprMul>──────────────────────┤                    │
    ├─GExprAdd────────────────────────────────────────────────┤                    │
    ├─LAExprMacro<GOperandRel, GExprAdd>──────────────────────┘                    │
    └─LAExprMacro<GOperandRel, GExprAdd>───────────────────────────────────────────┘

  See the LALRPOP manual for advice on making your grammar LR(1).

/home/prybicki/code/latte/src/latte.lalrpop:96:12: 96:47: Local ambiguity detected

  The problem arises after having observed the following symbols in the input:
    LAExprMacro<GOperandMul, GExprUnary> GOperandMul GExprUnary
  At that point, if the next token is a `">="`, then the parser can proceed in two different ways.

  First, the parser could execute the production at /home/prybicki/code/latte/src/latte.lalrpop:96:12: 96:47, which would consume the top 1 token(s) from the stack and produce a `LAExprMacro<GOperandMul, GExprUnary>`. This might then yield a parse tree like
    GExprUnary                             ╷ GOperandRel GExprAdd
    ├─LAExprMacro<GOperandMul, GExprUnary>─┤                    │
    ├─GExprMul─────────────────────────────┤                    │
    ├─LAExprMacro<GOperandAdd, GExprMul>───┤                    │
    ├─GExprAdd─────────────────────────────┤                    │
    ├─LAExprMacro<GOperandRel, GExprAdd>───┘                    │
    └─LAExprMacro<GOperandRel, GExprAdd>────────────────────────┘

  Alternatively, the parser could execute the production at /home/prybicki/code/latte/src/latte.lalrpop:96:12: 96:47, which would consume the top 3 token(s) from the stack and produce a `LAExprMacro<GOperandMul, GExprUnary>`. This might then yield a parse tree like
    LAExprMacro<GOperandMul, GExprUnary> GOperandMul GExprUnary GOperandRel GExprAdd
    ├─LAExprMacro<GOperandMul, GExprUnary>────────────────────┤                    │
    ├─GExprMul────────────────────────────────────────────────┤                    │
    ├─LAExprMacro<GOperandAdd, GExprMul>──────────────────────┤                    │
    ├─GExprAdd────────────────────────────────────────────────┤                    │
    ├─LAExprMacro<GOperandRel, GExprAdd>──────────────────────┘                    │
    └─LAExprMacro<GOperandRel, GExprAdd>───────────────────────────────────────────┘

  See the LALRPOP manual for advice on making your grammar LR(1).

/home/prybicki/code/latte/src/latte.lalrpop:96:12: 96:47: Conflict detected

    when in this state:
  LAExprMacro<GOperandMul, GExprUnary> = GExprUnary (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandMul, GExprUnary> = LAExprMacro<GOperandMul, GExprUnary> GOperandMul GExprUnary (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `"false"` we can reduce to a `LAExprMacro<GOperandMul, GExprUnary>` but we can also reduce to a `LAExprMacro<GOperandMul, GExprUnary>`

/home/prybicki/code/latte/src/latte.lalrpop:96:12: 96:47: Conflict detected

    when in this state:
  LAExprMacro<GOperandMul, GExprUnary> = GExprUnary (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandMul, GExprUnary> = LAExprMacro<GOperandMul, GExprUnary> GOperandMul GExprUnary (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `"true"` we can reduce to a `LAExprMacro<GOperandMul, GExprUnary>` but we can also reduce to a `LAExprMacro<GOperandMul, GExprUnary>`

/home/prybicki/code/latte/src/latte.lalrpop:96:12: 96:47: Local ambiguity detected

  The problem arises after having observed the following symbols in the input:
    LAExprMacro<GOperandMul, GExprUnary> GOperandMul GExprUnary
  At that point, if the next token is a `"||"`, then the parser can proceed in two different ways.

  First, the parser could execute the production at /home/prybicki/code/latte/src/latte.lalrpop:96:12: 96:47, which would consume the top 1 token(s) from the stack and produce a `LAExprMacro<GOperandMul, GExprUnary>`. This might then yield a parse tree like
    GExprUnary                             ╷ GOperandOr RAExprMacro<GOperandOr, GExprAnd>
    ├─LAExprMacro<GOperandMul, GExprUnary>─┤                                            │
    ├─GExprMul─────────────────────────────┤                                            │
    ├─LAExprMacro<GOperandAdd, GExprMul>───┤                                            │
    ├─GExprAdd─────────────────────────────┤                                            │
    ├─LAExprMacro<GOperandRel, GExprAdd>───┤                                            │
    ├─GExprRel─────────────────────────────┤                                            │
    ├─RAExprMacro<GOperandAnd, GExprRel>───┤                                            │
    ├─GExprAnd─────────────────────────────┘                                            │
    └─RAExprMacro<GOperandOr, GExprAnd>─────────────────────────────────────────────────┘

  Alternatively, the parser could execute the production at /home/prybicki/code/latte/src/latte.lalrpop:96:12: 96:47, which would consume the top 3 token(s) from the stack and produce a `LAExprMacro<GOperandMul, GExprUnary>`. This might then yield a parse tree like
    LAExprMacro<GOperandMul, GExprUnary> GOperandMul GExprUnary GOperandOr RAExprMacro<GOperandOr, GExprAnd>
    ├─LAExprMacro<GOperandMul, GExprUnary>────────────────────┤                                            │
    ├─GExprMul────────────────────────────────────────────────┤                                            │
    ├─LAExprMacro<GOperandAdd, GExprMul>──────────────────────┤                                            │
    ├─GExprAdd────────────────────────────────────────────────┤                                            │
    ├─LAExprMacro<GOperandRel, GExprAdd>──────────────────────┤                                            │
    ├─GExprRel────────────────────────────────────────────────┤                                            │
    ├─RAExprMacro<GOperandAnd, GExprRel>──────────────────────┤                                            │
    ├─GExprAnd────────────────────────────────────────────────┘                                            │
    └─RAExprMacro<GOperandOr, GExprAnd>────────────────────────────────────────────────────────────────────┘

  See the LALRPOP manual for advice on making your grammar LR(1).

/home/prybicki/code/latte/src/latte.lalrpop:96:12: 96:47: Conflict detected

    when in this state:
  LAExprMacro<GOperandMul, GExprUnary> = GExprUnary (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandMul, GExprUnary> = LAExprMacro<GOperandMul, GExprUnary> GOperandMul GExprUnary (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `r#"\"([^,\",\\\\]|\\\\\")*\""#` we can reduce to a `LAExprMacro<GOperandMul, GExprUnary>` but we can also reduce to a `LAExprMacro<GOperandMul, GExprUnary>`

/home/prybicki/code/latte/src/latte.lalrpop:96:12: 96:47: Conflict detected

    when in this state:
  LAExprMacro<GOperandMul, GExprUnary> = GExprUnary (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandMul, GExprUnary> = LAExprMacro<GOperandMul, GExprUnary> GOperandMul GExprUnary (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `r#"[+-]"#` we can reduce to a `LAExprMacro<GOperandMul, GExprUnary>` but we can also reduce to a `LAExprMacro<GOperandMul, GExprUnary>`

/home/prybicki/code/latte/src/latte.lalrpop:96:12: 96:47: Conflict detected

    when in this state:
  LAExprMacro<GOperandMul, GExprUnary> = GExprUnary (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandMul, GExprUnary> = LAExprMacro<GOperandMul, GExprUnary> GOperandMul GExprUnary (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `r#"[0-9]+"#` we can reduce to a `LAExprMacro<GOperandMul, GExprUnary>` but we can also reduce to a `LAExprMacro<GOperandMul, GExprUnary>`

/home/prybicki/code/latte/src/latte.lalrpop:96:12: 96:47: Conflict detected

    when in this state:
  LAExprMacro<GOperandMul, GExprUnary> = GExprUnary (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandMul, GExprUnary> = LAExprMacro<GOperandMul, GExprUnary> GOperandMul GExprUnary (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `r#"[A-Z,a-z,_\']+"#` we can reduce to a `LAExprMacro<GOperandMul, GExprUnary>` but we can also reduce to a `LAExprMacro<GOperandMul, GExprUnary>`

/home/prybicki/code/latte/src/latte.lalrpop:96:12: 96:47: Conflict detected

    when in this state:
  LAExprMacro<GOperandMul, GExprUnary> = GExprUnary (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandMul, GExprUnary> = LAExprMacro<GOperandMul, GExprUnary> GOperandMul GExprUnary (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `EOF` we can reduce to a `LAExprMacro<GOperandMul, GExprUnary>` but we can also reduce to a `LAExprMacro<GOperandMul, GExprUnary>`

/home/prybicki/code/latte/src/latte.lalrpop:94:12: 94:45: Conflict detected

    when in this state:
  LAExprMacro<GOperandRel, GExprAdd> = GExprAdd (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandRel, GExprAdd> = LAExprMacro<GOperandRel, GExprAdd> GOperandRel GExprAdd (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `"!"` we can reduce to a `LAExprMacro<GOperandRel, GExprAdd>` but we can also reduce to a `LAExprMacro<GOperandRel, GExprAdd>`

/home/prybicki/code/latte/src/latte.lalrpop:94:12: 94:45: Conflict detected

    when in this state:
  LAExprMacro<GOperandRel, GExprAdd> = GExprAdd (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandRel, GExprAdd> = LAExprMacro<GOperandRel, GExprAdd> GOperandRel GExprAdd (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `"%"` we can reduce to a `LAExprMacro<GOperandRel, GExprAdd>` but we can also reduce to a `LAExprMacro<GOperandRel, GExprAdd>`

/home/prybicki/code/latte/src/latte.lalrpop:94:12: 94:45: Local ambiguity detected

  The problem arises after having observed the following symbols in the input:
    LAExprMacro<GOperandRel, GExprAdd> GOperandRel GExprAdd
  At that point, if the next token is a `"&&"`, then the parser can proceed in two different ways.

  First, the parser could execute the production at /home/prybicki/code/latte/src/latte.lalrpop:94:12: 94:45, which would consume the top 1 token(s) from the stack and produce a `LAExprMacro<GOperandRel, GExprAdd>`. This might then yield a parse tree like
    GExprAdd                             ╷ GOperandAnd RAExprMacro<GOperandAnd, GExprRel>
    ├─LAExprMacro<GOperandRel, GExprAdd>─┤                                              │
    ├─GExprRel───────────────────────────┘                                              │
    └─RAExprMacro<GOperandAnd, GExprRel>────────────────────────────────────────────────┘

  Alternatively, the parser could execute the production at /home/prybicki/code/latte/src/latte.lalrpop:94:12: 94:45, which would consume the top 3 token(s) from the stack and produce a `LAExprMacro<GOperandRel, GExprAdd>`. This might then yield a parse tree like
    LAExprMacro<GOperandRel, GExprAdd> GOperandRel GExprAdd GOperandAnd RAExprMacro<GOperandAnd, GExprRel>
    ├─LAExprMacro<GOperandRel, GExprAdd>──────────────────┤                                              │
    ├─GExprRel────────────────────────────────────────────┘                                              │
    └─RAExprMacro<GOperandAnd, GExprRel>─────────────────────────────────────────────────────────────────┘

  See the LALRPOP manual for advice on making your grammar LR(1).

/home/prybicki/code/latte/src/latte.lalrpop:94:12: 94:45: Conflict detected

    when in this state:
  LAExprMacro<GOperandRel, GExprAdd> = GExprAdd (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandRel, GExprAdd> = LAExprMacro<GOperandRel, GExprAdd> GOperandRel GExprAdd (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `"("` we can reduce to a `LAExprMacro<GOperandRel, GExprAdd>` but we can also reduce to a `LAExprMacro<GOperandRel, GExprAdd>`

/home/prybicki/code/latte/src/latte.lalrpop:94:12: 94:45: Local ambiguity detected

  The problem arises after having observed the following symbols in the input:
    LAExprMacro<GOperandRel, GExprAdd> GOperandRel GExprAdd
  At that point, if the next token is a `")"`, then the parser can proceed in two different ways.

  First, the parser could execute the production at /home/prybicki/code/latte/src/latte.lalrpop:94:12: 94:45, which would consume the top 1 token(s) from the stack and produce a `LAExprMacro<GOperandRel, GExprAdd>`. This might then yield a parse tree like
    GExprAdd                             ╷ ")"
    ├─LAExprMacro<GOperandRel, GExprAdd>─┤   │
    ├─GExprRel───────────────────────────┤   │
    ├─RAExprMacro<GOperandAnd, GExprRel>─┤   │
    ├─GExprAnd───────────────────────────┤   │
    ├─RAExprMacro<GOperandOr, GExprAnd>──┤   │
    ├─GExprOr────────────────────────────┤   │
    ├─GExpr──────────────────────────────┤   │
    ├─CommaSeparatedList<GExpr>──────────┘   │
    └─GExprAtom──────────────────────────────┘

  Alternatively, the parser could execute the production at /home/prybicki/code/latte/src/latte.lalrpop:94:12: 94:45, which would consume the top 3 token(s) from the stack and produce a `LAExprMacro<GOperandRel, GExprAdd>`. This might then yield a parse tree like
    LAExprMacro<GOperandRel, GExprAdd> GOperandRel GExprAdd ")"
    ├─LAExprMacro<GOperandRel, GExprAdd>──────────────────┤   │
    ├─GExprRel────────────────────────────────────────────┤   │
    ├─RAExprMacro<GOperandAnd, GExprRel>──────────────────┤   │
    ├─GExprAnd────────────────────────────────────────────┤   │
    ├─RAExprMacro<GOperandOr, GExprAnd>───────────────────┤   │
    ├─GExprOr─────────────────────────────────────────────┤   │
    ├─GExpr───────────────────────────────────────────────┤   │
    ├─CommaSeparatedList<GExpr>───────────────────────────┘   │
    └─GExprAtom───────────────────────────────────────────────┘

  See the LALRPOP manual for advice on making your grammar LR(1).

/home/prybicki/code/latte/src/latte.lalrpop:94:12: 94:45: Conflict detected

    when in this state:
  LAExprMacro<GOperandRel, GExprAdd> = GExprAdd (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandRel, GExprAdd> = LAExprMacro<GOperandRel, GExprAdd> GOperandRel GExprAdd (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `"*"` we can reduce to a `LAExprMacro<GOperandRel, GExprAdd>` but we can also reduce to a `LAExprMacro<GOperandRel, GExprAdd>`

/home/prybicki/code/latte/src/latte.lalrpop:94:12: 94:45: Conflict detected

    when in this state:
  LAExprMacro<GOperandRel, GExprAdd> = GExprAdd (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandRel, GExprAdd> = LAExprMacro<GOperandRel, GExprAdd> GOperandRel GExprAdd (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `"+"` we can reduce to a `LAExprMacro<GOperandRel, GExprAdd>` but we can also reduce to a `LAExprMacro<GOperandRel, GExprAdd>`

/home/prybicki/code/latte/src/latte.lalrpop:94:12: 94:45: Local ambiguity detected

  The problem arises after having observed the following symbols in the input:
    LAExprMacro<GOperandRel, GExprAdd> GOperandRel GExprAdd
  At that point, if the next token is a `","`, then the parser can proceed in two different ways.

  First, the parser could execute the production at /home/prybicki/code/latte/src/latte.lalrpop:94:12: 94:45, which would consume the top 1 token(s) from the stack and produce a `LAExprMacro<GOperandRel, GExprAdd>`. This might then yield a parse tree like
    GExprAdd                             ╷ ","
    ├─LAExprMacro<GOperandRel, GExprAdd>─┤   │
    ├─GExprRel───────────────────────────┤   │
    ├─RAExprMacro<GOperandAnd, GExprRel>─┤   │
    ├─GExprAnd───────────────────────────┤   │
    ├─RAExprMacro<GOperandOr, GExprAnd>──┤   │
    ├─GExprOr────────────────────────────┤   │
    ├─GExpr──────────────────────────────┘   │
    └─(<GExpr> ",")+─────────────────────────┘

  Alternatively, the parser could execute the production at /home/prybicki/code/latte/src/latte.lalrpop:94:12: 94:45, which would consume the top 3 token(s) from the stack and produce a `LAExprMacro<GOperandRel, GExprAdd>`. This might then yield a parse tree like
    LAExprMacro<GOperandRel, GExprAdd> GOperandRel GExprAdd ","
    ├─LAExprMacro<GOperandRel, GExprAdd>──────────────────┤   │
    ├─GExprRel────────────────────────────────────────────┤   │
    ├─RAExprMacro<GOperandAnd, GExprRel>──────────────────┤   │
    ├─GExprAnd────────────────────────────────────────────┤   │
    ├─RAExprMacro<GOperandOr, GExprAnd>───────────────────┤   │
    ├─GExprOr─────────────────────────────────────────────┤   │
    ├─GExpr───────────────────────────────────────────────┘   │
    └─(<GExpr> ",")+──────────────────────────────────────────┘

  See the LALRPOP manual for advice on making your grammar LR(1).

/home/prybicki/code/latte/src/latte.lalrpop:94:12: 94:45: Conflict detected

    when in this state:
  LAExprMacro<GOperandRel, GExprAdd> = GExprAdd (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandRel, GExprAdd> = LAExprMacro<GOperandRel, GExprAdd> GOperandRel GExprAdd (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `"-"` we can reduce to a `LAExprMacro<GOperandRel, GExprAdd>` but we can also reduce to a `LAExprMacro<GOperandRel, GExprAdd>`

/home/prybicki/code/latte/src/latte.lalrpop:94:12: 94:45: Conflict detected

    when in this state:
  LAExprMacro<GOperandRel, GExprAdd> = GExprAdd (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandRel, GExprAdd> = LAExprMacro<GOperandRel, GExprAdd> GOperandRel GExprAdd (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `"/"` we can reduce to a `LAExprMacro<GOperandRel, GExprAdd>` but we can also reduce to a `LAExprMacro<GOperandRel, GExprAdd>`

/home/prybicki/code/latte/src/latte.lalrpop:94:12: 94:45: Local ambiguity detected

  The problem arises after having observed the following symbols in the input:
    LAExprMacro<GOperandRel, GExprAdd> GOperandRel GExprAdd
  At that point, if the next token is a `"<"`, then the parser can proceed in two different ways.

  First, the parser could execute the production at /home/prybicki/code/latte/src/latte.lalrpop:94:12: 94:45, which would consume the top 1 token(s) from the stack and produce a `LAExprMacro<GOperandRel, GExprAdd>`. This might then yield a parse tree like
    GExprAdd                             ╷ GOperandRel GExprAdd
    ├─LAExprMacro<GOperandRel, GExprAdd>─┘                    │
    └─LAExprMacro<GOperandRel, GExprAdd>──────────────────────┘

  Alternatively, the parser could execute the production at /home/prybicki/code/latte/src/latte.lalrpop:94:12: 94:45, which would consume the top 3 token(s) from the stack and produce a `LAExprMacro<GOperandRel, GExprAdd>`. This might then yield a parse tree like
    LAExprMacro<GOperandRel, GExprAdd> GOperandRel GExprAdd GOperandRel GExprAdd
    ├─LAExprMacro<GOperandRel, GExprAdd>──────────────────┘                    │
    └─LAExprMacro<GOperandRel, GExprAdd>───────────────────────────────────────┘

  See the LALRPOP manual for advice on making your grammar LR(1).

/home/prybicki/code/latte/src/latte.lalrpop:94:12: 94:45: Local ambiguity detected

  The problem arises after having observed the following symbols in the input:
    LAExprMacro<GOperandRel, GExprAdd> GOperandRel GExprAdd
  At that point, if the next token is a `"<="`, then the parser can proceed in two different ways.

  First, the parser could execute the production at /home/prybicki/code/latte/src/latte.lalrpop:94:12: 94:45, which would consume the top 1 token(s) from the stack and produce a `LAExprMacro<GOperandRel, GExprAdd>`. This might then yield a parse tree like
    GExprAdd                             ╷ GOperandRel GExprAdd
    ├─LAExprMacro<GOperandRel, GExprAdd>─┘                    │
    └─LAExprMacro<GOperandRel, GExprAdd>──────────────────────┘

  Alternatively, the parser could execute the production at /home/prybicki/code/latte/src/latte.lalrpop:94:12: 94:45, which would consume the top 3 token(s) from the stack and produce a `LAExprMacro<GOperandRel, GExprAdd>`. This might then yield a parse tree like
    LAExprMacro<GOperandRel, GExprAdd> GOperandRel GExprAdd GOperandRel GExprAdd
    ├─LAExprMacro<GOperandRel, GExprAdd>──────────────────┘                    │
    └─LAExprMacro<GOperandRel, GExprAdd>───────────────────────────────────────┘

  See the LALRPOP manual for advice on making your grammar LR(1).

/home/prybicki/code/latte/src/latte.lalrpop:94:12: 94:45: Local ambiguity detected

  The problem arises after having observed the following symbols in the input:
    LAExprMacro<GOperandRel, GExprAdd> GOperandRel GExprAdd
  At that point, if the next token is a `">"`, then the parser can proceed in two different ways.

  First, the parser could execute the production at /home/prybicki/code/latte/src/latte.lalrpop:94:12: 94:45, which would consume the top 1 token(s) from the stack and produce a `LAExprMacro<GOperandRel, GExprAdd>`. This might then yield a parse tree like
    GExprAdd                             ╷ GOperandRel GExprAdd
    ├─LAExprMacro<GOperandRel, GExprAdd>─┘                    │
    └─LAExprMacro<GOperandRel, GExprAdd>──────────────────────┘

  Alternatively, the parser could execute the production at /home/prybicki/code/latte/src/latte.lalrpop:94:12: 94:45, which would consume the top 3 token(s) from the stack and produce a `LAExprMacro<GOperandRel, GExprAdd>`. This might then yield a parse tree like
    LAExprMacro<GOperandRel, GExprAdd> GOperandRel GExprAdd GOperandRel GExprAdd
    ├─LAExprMacro<GOperandRel, GExprAdd>──────────────────┘                    │
    └─LAExprMacro<GOperandRel, GExprAdd>───────────────────────────────────────┘

  See the LALRPOP manual for advice on making your grammar LR(1).

/home/prybicki/code/latte/src/latte.lalrpop:94:12: 94:45: Local ambiguity detected

  The problem arises after having observed the following symbols in the input:
    LAExprMacro<GOperandRel, GExprAdd> GOperandRel GExprAdd
  At that point, if the next token is a `">="`, then the parser can proceed in two different ways.

  First, the parser could execute the production at /home/prybicki/code/latte/src/latte.lalrpop:94:12: 94:45, which would consume the top 1 token(s) from the stack and produce a `LAExprMacro<GOperandRel, GExprAdd>`. This might then yield a parse tree like
    GExprAdd                             ╷ GOperandRel GExprAdd
    ├─LAExprMacro<GOperandRel, GExprAdd>─┘                    │
    └─LAExprMacro<GOperandRel, GExprAdd>──────────────────────┘

  Alternatively, the parser could execute the production at /home/prybicki/code/latte/src/latte.lalrpop:94:12: 94:45, which would consume the top 3 token(s) from the stack and produce a `LAExprMacro<GOperandRel, GExprAdd>`. This might then yield a parse tree like
    LAExprMacro<GOperandRel, GExprAdd> GOperandRel GExprAdd GOperandRel GExprAdd
    ├─LAExprMacro<GOperandRel, GExprAdd>──────────────────┘                    │
    └─LAExprMacro<GOperandRel, GExprAdd>───────────────────────────────────────┘

  See the LALRPOP manual for advice on making your grammar LR(1).

/home/prybicki/code/latte/src/latte.lalrpop:94:12: 94:45: Conflict detected

    when in this state:
  LAExprMacro<GOperandRel, GExprAdd> = GExprAdd (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandRel, GExprAdd> = LAExprMacro<GOperandRel, GExprAdd> GOperandRel GExprAdd (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `"false"` we can reduce to a `LAExprMacro<GOperandRel, GExprAdd>` but we can also reduce to a `LAExprMacro<GOperandRel, GExprAdd>`

/home/prybicki/code/latte/src/latte.lalrpop:94:12: 94:45: Conflict detected

    when in this state:
  LAExprMacro<GOperandRel, GExprAdd> = GExprAdd (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandRel, GExprAdd> = LAExprMacro<GOperandRel, GExprAdd> GOperandRel GExprAdd (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `"true"` we can reduce to a `LAExprMacro<GOperandRel, GExprAdd>` but we can also reduce to a `LAExprMacro<GOperandRel, GExprAdd>`

/home/prybicki/code/latte/src/latte.lalrpop:94:12: 94:45: Local ambiguity detected

  The problem arises after having observed the following symbols in the input:
    LAExprMacro<GOperandRel, GExprAdd> GOperandRel GExprAdd
  At that point, if the next token is a `"||"`, then the parser can proceed in two different ways.

  First, the parser could execute the production at /home/prybicki/code/latte/src/latte.lalrpop:94:12: 94:45, which would consume the top 1 token(s) from the stack and produce a `LAExprMacro<GOperandRel, GExprAdd>`. This might then yield a parse tree like
    GExprAdd                             ╷ GOperandOr RAExprMacro<GOperandOr, GExprAnd>
    ├─LAExprMacro<GOperandRel, GExprAdd>─┤                                            │
    ├─GExprRel───────────────────────────┤                                            │
    ├─RAExprMacro<GOperandAnd, GExprRel>─┤                                            │
    ├─GExprAnd───────────────────────────┘                                            │
    └─RAExprMacro<GOperandOr, GExprAnd>───────────────────────────────────────────────┘

  Alternatively, the parser could execute the production at /home/prybicki/code/latte/src/latte.lalrpop:94:12: 94:45, which would consume the top 3 token(s) from the stack and produce a `LAExprMacro<GOperandRel, GExprAdd>`. This might then yield a parse tree like
    LAExprMacro<GOperandRel, GExprAdd> GOperandRel GExprAdd GOperandOr RAExprMacro<GOperandOr, GExprAnd>
    ├─LAExprMacro<GOperandRel, GExprAdd>──────────────────┤                                            │
    ├─GExprRel────────────────────────────────────────────┤                                            │
    ├─RAExprMacro<GOperandAnd, GExprRel>──────────────────┤                                            │
    ├─GExprAnd────────────────────────────────────────────┘                                            │
    └─RAExprMacro<GOperandOr, GExprAnd>────────────────────────────────────────────────────────────────┘

  See the LALRPOP manual for advice on making your grammar LR(1).

/home/prybicki/code/latte/src/latte.lalrpop:94:12: 94:45: Conflict detected

    when in this state:
  LAExprMacro<GOperandRel, GExprAdd> = GExprAdd (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandRel, GExprAdd> = LAExprMacro<GOperandRel, GExprAdd> GOperandRel GExprAdd (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `r#"\"([^,\",\\\\]|\\\\\")*\""#` we can reduce to a `LAExprMacro<GOperandRel, GExprAdd>` but we can also reduce to a `LAExprMacro<GOperandRel, GExprAdd>`

/home/prybicki/code/latte/src/latte.lalrpop:94:12: 94:45: Conflict detected

    when in this state:
  LAExprMacro<GOperandRel, GExprAdd> = GExprAdd (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandRel, GExprAdd> = LAExprMacro<GOperandRel, GExprAdd> GOperandRel GExprAdd (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `r#"[+-]"#` we can reduce to a `LAExprMacro<GOperandRel, GExprAdd>` but we can also reduce to a `LAExprMacro<GOperandRel, GExprAdd>`

/home/prybicki/code/latte/src/latte.lalrpop:94:12: 94:45: Conflict detected

    when in this state:
  LAExprMacro<GOperandRel, GExprAdd> = GExprAdd (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandRel, GExprAdd> = LAExprMacro<GOperandRel, GExprAdd> GOperandRel GExprAdd (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `r#"[0-9]+"#` we can reduce to a `LAExprMacro<GOperandRel, GExprAdd>` but we can also reduce to a `LAExprMacro<GOperandRel, GExprAdd>`

/home/prybicki/code/latte/src/latte.lalrpop:94:12: 94:45: Conflict detected

    when in this state:
  LAExprMacro<GOperandRel, GExprAdd> = GExprAdd (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandRel, GExprAdd> = LAExprMacro<GOperandRel, GExprAdd> GOperandRel GExprAdd (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `r#"[A-Z,a-z,_\']+"#` we can reduce to a `LAExprMacro<GOperandRel, GExprAdd>` but we can also reduce to a `LAExprMacro<GOperandRel, GExprAdd>`

/home/prybicki/code/latte/src/latte.lalrpop:94:12: 94:45: Conflict detected

    when in this state:
  LAExprMacro<GOperandRel, GExprAdd> = GExprAdd (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]
  LAExprMacro<GOperandRel, GExprAdd> = LAExprMacro<GOperandRel, GExprAdd> GOperandRel GExprAdd (*) ["!", "%", "&&", "(", ")", "*", "+", ",", "-", "/", "<", "<=", ">", ">=", "false", "true", "||", r#"\"([^,\",\\\\]|\\\\\")*\""#, r#"[+-]"#, r#"[0-9]+"#, r#"[A-Z,a-z,_\']+"#, EOF]

  and looking at a token `EOF` we can reduce to a `LAExprMacro<GOperandRel, GExprAdd>` but we can also reduce to a `LAExprMacro<GOperandRel, GExprAdd>`

